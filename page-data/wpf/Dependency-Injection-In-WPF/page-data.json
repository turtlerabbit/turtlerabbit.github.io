{"componentChunkName":"component---src-templates-archive-post-js","path":"/wpf/Dependency-Injection-In-WPF/","result":{"data":{"mdx":{"id":"9f20e3cb-5098-55b1-8fbd-faa50bc85442","excerpt":"1. What is Dependency Injection? 종속성 주입은 IoC (Inversion of Control…","frontmatter":{"title":"How to implement Dependency Injection in WPF","date":"April 17, 2021","tag":"DependencyInjection, DI, WPF"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to implement Dependency Injection in WPF\",\n  \"date\": \"2021-04-17 01\",\n  \"tag\": \"DependencyInjection, DI, WPF\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. What is Dependency Injection?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC885\\uC18D\\uC131 \\uC8FC\\uC785\\uC740 IoC (Inversion of Control) \\uC124\\uACC4 \\uC6D0\\uCE59\\uC744 \\uB2EC\\uC131\\uD558\\uACE0 \\uAC1D\\uCCB4 \\uC0DD\\uC131\\uACFC \\uC18C\\uBE44\\uB97C \\uBD84\\uB9AC\\uD558\\uB294 \\uB370 \\uB3C4\\uC6C0\\uC774\\uB41C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC885\\uC18D\\uC131 \\uC8FC\\uC785 \\uD504\\uB808\\uC784 \\uC6CC\\uD06C\\uB294 \\uAC1C\\uCCB4 \\uC0DD\\uC131, \\uAC1C\\uCCB4 \\uC218\\uBA85 \\uC720\\uC9C0 \\uAD00\\uB9AC \\uBC0F \\uB7F0\\uD0C0\\uC784\\uC5D0 \\uD544\\uC694\\uD55C \\uC885\\uC18D\\uC131 \\uC81C\\uACF5\\uC744 \\uC6A9\\uC774\\uD558\\uAC8C\\uD55C\\uB2E4.\")), mdx(\"h1\", null), mdx(\"h3\", null, \"2. Implementing Dependency Injection in WPF application.\"), mdx(\"h4\", null, \"Step 1. Create the .NET Core WPF application.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select \\u201CCreate a new project\\u201D from Get Started dialog\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select the \\u201CWPF App (.NET Core)\\u201D project template, from the \\u201CCreate a new project\\u201D dialog and click \\u201CNext\\u201C.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Give a name to the project and click on the \\u201CCreate\\u201D button. The project will be created and loaded into Visual Studio.\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 2. Add the NuGet packages to the project.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microsoft.Extensions.DependencyInjection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microsoft.EntityFrameworkCore.Sqlite\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 3. Create a Data Folder and add DBContext and Model classes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Employee.cs: \\n//This is the class that will act as the model.\\n\\npublic class Employee\\n{\\n    public int Id { get; set; }\\n    public string FirstName { get; set; }\\n    public string LastName { get; set; }\\n}\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"EmployeeDbContext.cs: \\n// This is the DbContext class (Database Context) \\n// and will be used to register with the Dependency Injection Service Provider.\\n\\npublic class EmployeeDbContext : DbContext\\n{\\n    #region Contructor\\n    public EmployeeDbContext(DbContextOptions<EmployeeDbContext> options) : base(options)\\n    {\\n        Database.EnsureCreated();\\n    }\\n    #endregion\\n\\n    #region Public properties\\n    public DbSet<Employee> Employee { get; set; }\\n    #endregion\\n\\n    #region Overridden method\\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\\n    {\\n        modelBuilder.Entity<Employee>().HasData(GetEmployees());\\n        base.OnModelCreating(modelBuilder);\\n    }\\n    #endregion\\n\\n    #region Private method\\n    private List<Employee> GetEmployees()\\n    {\\n        return new List<Employee>\\n        {\\n            new Employee {Id = 100, FirstName =\\\"John\\\", LastName = \\\"Doe\\\"},\\n            new Employee {Id = 101, FirstName =\\\"Nicole\\\", LastName = \\\"Martha\\\"},\\n            new Employee {Id = 102, FirstName =\\\"Steve\\\", LastName = \\\"Johnson\\\"},\\n            new Employee {Id = 103, FirstName =\\\"Thomas\\\", LastName = \\\"Bond\\\"},\\n        };\\n    }\\n    #endregion\\n}\\n\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 4. Modify App.xaml.cs class\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uD074\\uB798\\uC2A4\\uC5D0\\uC11C\\uB294 private method ConfigureServices()\\uB97C \\uC0DD\\uC131\\uD588\\uB2E4. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ConfigureServices() \\uBA54\\uC11C\\uB4DC\\uC5D0\\uC11C\\uB294 EmployeeDbContext\\uC640 MainWindow \\uD074\\uB798\\uC2A4\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uB4F1\\uB85D\\uD558\\uC5EC \\uD544\\uC694\\uD560 \\uB54C \\uC885\\uC18D\\uC131 \\uD504\\uB808\\uC784 \\uC6CC\\uD06C\\uC5D0\\uC11C \\uD574\\uB2F9 \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uC8FC\\uC785 \\uD560 \\uC218 \\uC788\\uB3C4\\uB85D\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uB9AC\\uAC00 \\uCD94\\uAC00 \\uD55C \\uB2E4\\uB978 \\uBA54\\uC11C\\uB4DC\\uB294 OnStartup ()\\uC774\\uACE0, \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5EC\\uAE30\\uC11C\\uB294 ServiceProvider\\uC5D0\\uAC8C MainWindow \\uD074\\uB798\\uC2A4\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uC81C\\uACF5\\uD558\\uB3C4\\uB85D \\uC694\\uCCAD\\uD558\\uACE0, \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8 \\uD6C4\\uC5D0 Show () \\uBA54\\uC11C\\uB4DC\\uB97C \\uD638\\uCD9C\\uD558\\uB294 MainWindow\\uB97C \\uD45C\\uC2DC\\uD569\\uB2C8\\uB2E4.\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"App.xaml.cs\\n\\npublic partial class App : Application\\n{\\n    private ServiceProvider serviceProvider;\\n    public App()\\n    {\\n        ServiceCollection services = new ServiceCollection();\\n        ConfigureServices(services);\\n        serviceProvider = services.BuildServiceProvider();\\n    }\\n    private void ConfigureServices(ServiceCollection services)\\n    {\\n        services.AddDbContext<EmployeeDbContext>(options =>\\n        {\\n            options.UseSqlite(\\\"Data Source = Employee.db\\\");\\n        });\\n        services.AddSingleton<MainWindow>();\\n    }\\n    private void OnStartup(object sender, StartupEventArgs e)\\n    {\\n        var mainWindow = serviceProvider.GetService<MainWindow>();\\n        mainWindow.Show();\\n    }\\n}\\n\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 5. Update the App.xaml\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5EC\\uAE30\\uC11C StartupUri\\uB97C \\uC81C\\uAC70\\uD558\\uACE0 App.xaml.cs\\uC5D0\\uC11C \\uB9CC\\uB4E0 Startup \\uC774\\uBCA4\\uD2B8 \\uCC98\\uB9AC\\uAE30\\uB97C \\uCD94\\uAC00\\uD558\\uBA74 MainWindow\\uB97C \\uC2DC\\uC791\\uD558\\uB294 \\uB370 \\uB3C4\\uC6C0\\uC774 \\uB41C\\uB2E4.\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"App.xaml\\n\\n<Application x:Class=\\\"WpfAppDIDemoApplication.App\\\"\\n             xmlns=\\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\\"\\n             xmlns:x=\\\"http://schemas.microsoft.com/winfx/2006/xaml\\\"\\n             xmlns:local=\\\"clr-namespace:WpfAppDIDemoApplication\\\"\\n             Startup=\\\"OnStartup\\\">\\n    <Application.Resources>         \\n    </Application.Resources>\\n</Application>\\n\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 6. Add the following code in MainWindow.xaml Grid tag\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This code will create a DataGrid and help us to display the Employee table data on the User Interface.\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"MainWindow.xaml\\n\\n<Grid>\\n    <DataGrid Name=\\\"EmployeeDG\\\" AutoGenerateColumns=\\\"False\\\">\\n        <DataGrid.Columns>\\n            <DataGridTextColumn Header=\\\"Id\\\" Binding=\\\"{Binding Id}\\\"/>\\n            <DataGridTextColumn Header=\\\"First Name\\\" Binding=\\\"{Binding FirstName}\\\"/>\\n            <DataGridTextColumn Header=\\\"Last Name\\\" Binding=\\\"{Binding LastName}\\\"/>\\n        </DataGrid.Columns>\\n    </DataGrid>\\n  </Grid>\\n\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 7: Add the code in MainWindow.xaml.cs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5EC\\uAE30\\uC11C\\uB294 EmployeeDbContext \\uB9E4\\uAC1C \\uBCC0\\uC218(parameter)\\uB97C \\uD5C8\\uC6A9\\uD558\\uB3C4\\uB85D MainWindows \\uC0DD\\uC131\\uC790\\uB97C \\uC218\\uC815\\uD588\\uC73C\\uBA70 \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9E4\\uAC1C \\uBCC0\\uC218\\uB294 \\uC751\\uC6A9 \\uD504\\uB85C\\uADF8\\uB7A8 \\uB7F0\\uD0C0\\uC784 \\uC911\\uC5D0 dependency framework\\uC5D0\\uC11C \\uC81C\\uACF5\\uB41C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GetEmployee()\\uB294 EmployeeDbContext \\uCC38\\uC870\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uC5D0\\uC11C employees\\uB97C \\uAC00\\uC838\\uC624\\uACE0 DataGrid\\uC758 ItemSource \\uC18D\\uC131\\uC744 \\uCC44\\uC6B4\\uB2E4. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8\\uB7EC\\uBA74 \\uC0AC\\uC6A9\\uC790 \\uC778\\uD130\\uD398\\uC774\\uC2A4\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uD45C\\uC2DC\\uD558\\uB294 \\uB370 \\uB3C4\\uC6C0\\uC774\\uB41C\\uB2E4.\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"MainWindow.xaml.cs\\n\\npublic partial class MainWindow : Window\\n{\\n    EmployeeDbContext dbContext;\\n    public MainWindow(EmployeeDbContext dbContext)\\n    {\\n        this.dbContext = dbContext;\\n        InitializeComponent();\\n        GetEmployees();\\n    }\\n    private void GetEmployees()\\n    {\\n        var employees = dbContext.Employee.ToList();\\n        EmployeeDG.ItemsSource = employees;\\n    }\\n}\\n\")), mdx(\"h1\", null), mdx(\"h4\", null, \"Step 8: Execute the application.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The output of the application will be as given in the snapshot.\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://executecommands.com/wp-content/uploads/2020/05/wpf_di_app_output.png\",\n    \"alt\": \"alt\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/wpf/Dependency-Injection-In-WPF/","previous":{"id":"172c3396-2a25-5e89-9669-3ff3bd6f8adf","fields":{"slug":"/dynamicData/DynamicData-Summary/"},"frontmatter":{"title":"Dynamic Data - Summary"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Summary\",\n  \"date\": \"2021-01-13 01\",\n  \"tag\": \"DynamicData, 요약, 정리, Summary\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"1. Create Dynamic Data Collections \\uC694\\uC57D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// 1. \\uB370\\uC774\\uD130 \\uC18C\\uC2A4:\\nSourceCache<TObject, TKey>, SourceList<TObject>\\n\\n// 2. \\uB370\\uC774\\uD0C0 \\uC18C\\uC2A4\\uC5D0 \\uBC14\\uB85C edit methods \\uC0AC\\uC6A9\\nSourceCache<TObject, TKey>.AddOrUpdata(Items);\\nSourceCache<TObject, TKey>.Edit(cache => cache.AddOrUpdata(Items));\\n\\n// 3. \\uB370\\uC774\\uD0C0 \\uC18C\\uC2A4\\uC5D0\\uC11C \\uBC14\\uB85C \\uC77D\\uAE30 \\uC804\\uC6A9 public\\uC73C\\uB85C \\uB178\\uCD9C\\uD560 \\uB54C\\n//    \\uC0C8\\uB85C\\uC6B4 observable list\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\nIObservableCache<TObject,TKey> \\n    SourceCache<TObject, TKey>.AsObservableCache();\\n\\n\\n// 4. Creating Observable Change Sets : IObservable<IChangeSet<TObject,TKey>>\\n\\n// 4.1 \\uB370\\uC774\\uD0C0 \\uC18C\\uC2A4\\uC5D0 \\uBC14\\uB85C \\uC5F0\\uACB0\\nIObservable<IChangeSet<TObject,TKey>> \\n    SourceCache<TObject, TKey>.Connect();\\n\\n// 4.2 from an Rx Observable.\\n//     form an Observable Collection.\\n//     from an Binding List.\\nIObservable<IChangeSet<TObject,TKey>> \\n    IObservable<IEnumerable<T>>.ToObservableChangeSet(t=> t.key);\\n\\n// 4.3 ObservableChacneSet \\uC815\\uC801 \\uD074\\uB798\\uC2A4 \\uC0AC\\uC6A9\\nIObservable<IChangeSet<TObject,TKey>> \\n    ObservableChangeSet.Create<Trade, long>(ISourceCache<Trade, long> =>\\n    {\\n        ISourceCache<TObject, TKey>.AddOrUpdate(IEnumerable<trade>);\\n    }, trade = > trade.Id);\\n\\n// 5. Summary\\n1. observable change set\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC77C \\uAD6C\\uB3C5\\uC744 \\uACF5\\uC720\\uD558\\uAE30 \\uC704\\uD574\\n    -> IObservable<IChangeSet<>>.Publish()\\n    -> Return : IConnectableObservable\\n\\n2. \\uACF5\\uC720\\uB97C \\uAC00\\uB2A5\\uD558\\uAC8C \\uB9CC\\uB4E0 \\uD6C4, \\uC77D\\uAE30\\uC804\\uC6A9\\uC778 \\uD30C\\uC0DD \\uCEEC\\uB809\\uC158\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uB178\\uCD9C\\n    -> IConnectableObservable.AsObservableCache()\\n    -> Return : IObservableCache : IConnectableCache\\n\\n3. \\uC77D\\uAE30\\uC804\\uC6A9\\uC73C\\uB85C \\uB178\\uCD9C\\uB41C \\uC678\\uBD80\\uC5D0\\uC11C change set\\uC744 \\uBC29\\uCD9C\\uD558\\uB294 observable\\uC744 \\uBC18\\uD658\\n    -> IConnectableCache.Connect()\\n    -> Return : IObservable<IChangeSet<>>\\n\\n4. \\npublic class SourceList<T> : ISourceList<T>, IObservableList<T>, IDisposable\\npublic class SourceCache<TObject, TKey> : ISourceCache<TObject, TKey>, \\n    IObservableCache<TObject, TKey>, IConnectableCache<TObject, TKey>, IDisposable \\n    where TKey : notnull\\n\")), mdx(\"h1\", null), mdx(\"h2\", null, \"2. Sample \\uC694\\uC57D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// IEnumerable<T>\\nIEnumerable<Trade> Generate(int numberToGenerate)\\n\\n\\n// Creating Observable Change Sets : IObservable<IChangeSet<TObject,TKey>>\\nIObservable<IChangeSet<Trade,long>> \\n    ObservableChangeSet.Create<Trade, long>(ISourceCache<Trade, long> =>\\n    {\\n        ISourceCache<Trade, long>.AddOrUpdate(Generate());\\n    }, trade = > trade.Id);\\n\\n\\n// \\uAE30\\uBCF8 \\uC2DC\\uD000\\uC2A4(Observbale Change Sets)\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC77C \\uAD6C\\uB3C5\\uC744 \\uACF5\\uC720\\uD558\\uAE30 \\uC704\\uD574\\nIConnectableObservable<IChangeSet<Trade, long>> \\n    IObservable<IChangeSet<Trade, long>>.Publish();\\n\\n\\n// \\uC77D\\uAE30\\uC804\\uC6A9\\uC778 \\uD30C\\uC0DD \\uCEEC\\uB809\\uC158\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uB178\\uCD9C\\uD558\\uAE30 \\uC704\\uD574\\nIObservableCache<Trade, long> \\n    IConnectableObservable<IChangeSet<Trade, long>>.AsObservableCache();\\n\\n\\n// IObservableCache\\uB294 IConnectableCache\\uB97C \\uC0C1\\uC18D\\uBC1B\\uC740 \\uBAA8\\uC2B5\\uC774\\uB2E4.\\npublic interface IObservableCache<TObject, TKey>\\n    : IConnectableCache<TObject, TKey>, IDisposable where TKey : notnull\\n\\n\\n// \\uC77D\\uAE30\\uC804\\uC6A9\\uC73C\\uB85C \\uB178\\uCD9C\\uB41C \\uC678\\uBD80\\uC5D0\\uC11C Connect()\\uD568\\uC73C\\uB85C\\uC368 \\n// change set\\uC744 \\uBC29\\uCD9C\\uD558\\uB294 observable\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\\nIObservable<IChangeSet<Trede, long>> \\n    IConnectableCache<Trade, long>.Connect();\\n\")), mdx(\"h1\", null), mdx(\"h2\", null, \"3. Change Set Creation \\uC694\\uC57D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// 1. FromObservable\\n`2\\uAC1C\\uC758 observables`\\uB97C \\uBC1B\\uC544 \\uD558\\uB098\\uC758 `IObservable<IChangeSet<T, TKey>>`\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uBC18\\uD658\\uD55C\\uB2E4.  \\n\\n// 2. FromTask\\nCreate an `observable change set` from a `Task`\\n\\n// 3. Reloadable\\n\\uC774\\uC804 data\\uB97C \\uC9C0\\uC6B0\\uACE0 \\uC0C8\\uB85C\\uC774 \\uB85C\\uB4DC\\uB41C data\\uB97C \\uCD94\\uAC00\\uD558\\uB294 \\uAE30\\uB2A5\\uC758 \\nDynamicData\\uC758 `Switch()` \\uC5F0\\uC0B0\\uC790\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uBC18\\uBCF5\\uC801\\uC73C\\uB85C data\\uB97C \\uB2E4\\uC2DC \\uB85C\\uB4DC\\uD55C\\uB2E4.\\n\\n// 4. Reloadable With EditDiff\\n\\uB178\\uC774\\uC988\\uB97C \\uD06C\\uAC8C \\uC904\\uC77C \\uC218 \\uC788\\uB294 `\\uBD88\\uD544\\uC694\\uD55C \\uC5C5\\uB370\\uC774\\uD2B8\\uB97C \\uC608\\uBC29`\\uD558\\uAE30 \\uC704\\uD574 \\n\\uC774\\uC804 \\uB85C\\uB4DC\\uC640\\uC758 diff set\\uB97C \\uACC4\\uC0B0\\uD558\\uB294 `ISourceCache<TObject, TKey>.EditDiff()`\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC\\n\\uB2E4\\uC2DC \\uB85C\\uB4DC\\uD558\\uACE0 \\uBAA9\\uB85D\\uC744 \\uC720\\uC9C0\\uD55C\\uB2E4.\\n\\n// 5. FromTask With RefCount\\n\\uAD6C\\uB3C5\\uC774 \\uD558\\uB098 \\uC774\\uC0C1 \\uC788\\uB294 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\uB418\\uB294 \\uC2DC\\uD000\\uC2A4\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.  \\n\\uAD6C\\uB3C5\\uC774 0\\uC774\\uBA74 \\uC790\\uC2E0\\uC744 \\uD574\\uC9C0\\uD558\\uACE0 \\uB2E4\\uC2DC \\uC0C8\\uB85C\\uC6B4 \\uAD6C\\uB3C5\\uC774 \\uC624\\uBA74 \\uCC98\\uC74C\\uBD80\\uD130 \\uC790\\uB3D9\\uC73C\\uB85C \\uC2DC\\uC791\\uD55C\\uB2E4.\\n`RefCount()`\\uB294 `\\uD45C\\uC900 rx Publish().RefCount()` \\uC791\\uC5C5\\uC758 dd \\uC624\\uBC84\\uB85C\\uB4DC\\uC774\\uB2E4.\\ndd\\uAC00 \\uC790\\uB3D9\\uC73C\\uB85C \\uCC98\\uB9AC\\uD558\\uBBC0\\uB85C `Publish()`\\uB97C \\uC0AC\\uC6A9\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n\\n// 6. WithRetry\\n`Retry()` : In an enterprise app, would probably use a backoff retry strategy\\n\")), mdx(\"h1\", null), mdx(\"h2\", null, \"4. Inspect Collection \\uC694\\uC57D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// 1. \\uC18C\\uC2A4\\uC758 \\uD56D\\uBAA9\\uC774 \\uCD94\\uAC00 \\uB418\\uAC70\\uB098 \\uC81C\\uAC70 \\uB420 \\uB54C \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uAC80\\uC0AC\\uD558\\uB294 \\uBC29\\uBC95.\\nObservableCacheEx.ToCollection();  \\n\\nthis.cleanUp = source\\n    .Connect()\\n    .ToCollection()  // \\uC18C\\uC2A4\\uAC00 \\uBCC0\\uACBD \\uB420 \\uB54C\\uB9C8\\uB2E4 \\uC0C8 \\uCEEC\\uB809\\uC158\\uC774 \\uC0DD\\uC131\\uB41C\\uB2E4.\\n\\n#\\n\\n// 2. TObject\\uC758 \\uC18D\\uC131\\uC774 \\uBCC0\\uACBD \\uB420 \\uB54C \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uAC80\\uC0AC\\uD558\\uB294 \\uBC29\\uBC95.\\nObservableCacheEx.AutoRefresh();\\n\\nthis.cleanUp = source\\n    .Connect()\\n    .AutoRefresh(vm => vm.IsActive)  // vm\\uC740 TObject, TObject.Property\\uAC00 \\uBCC0\\uACBD \\uB420 \\uB54C\\n    .ToCollection()  // \\uC18C\\uC2A4\\uC758 \\uD56D\\uBAA9\\uC778 TObject\\uAC00 \\uCD94\\uAC00\\uB418\\uAC70\\uB098 \\uC0AD\\uC81C \\uB420 \\uB54C\\n\\n#\\n\\n// 3. \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uAC80\\uC0AC\\uD558\\uACE0 \\n//    \\uB0B4\\uBD80 observables\\uC758 \\uD56D\\uBAA9\\uC774 \\uD65C\\uC131 \\uC0C1\\uD0DC\\uC778\\uC9C0 \\uC5EC\\uBD80\\uB97C \\uB300\\uC870\\uD558\\uB294 \\uBC29\\uBC95.\\nObservableCacheEx.MergeMany();\\nObservable.CombineLatest(); \\n\\nvar activeChanged = observableWithState\\n    .MergeMany(state => state.IsActive)  // IObservable<bool> IsActive\\n    // \\uD56D\\uBAA9\\uC774 \\uAE30\\uBCF8 \\uBAA9\\uB85D\\uC5D0 \\uCD94\\uAC00 \\uB420 \\uB54C observable\\uC744 \\uC790\\uB3D9\\uC73C\\uB85C \\uC5F0\\uACB0\\uD558\\uACE0 \\n    // \\uD56D\\uBAA9\\uC774 \\uC81C\\uAC70\\uB418\\uBA74 \\uC5F0\\uACB0\\uC744 \\uD574\\uC81C.\\n\\nvar collectionChanged = observableWithState.ToCollection();\\n// \\uAE30\\uBCF8 observable \\uBAA9\\uB85D\\uC774 \\uBCC0\\uACBD \\uB420 \\uB54C(\\uCD94\\uAC00, \\uC81C\\uAC70 \\uBC0F \\uAD50\\uCCB4) \\n// \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uACF5\\uAC1C(reveal)\\uD55C\\uB2E4.\\n\\ncollectionChanged\\n    .CombineLatest(activeChanged, (items, _) =>\\n    {\\n        // collectionChanged, activeChanged \\uC911 \\uD558\\uB098\\uAC00 \\uC694\\uC18C\\uB97C \\uC0DD\\uC131 \\uD560 \\uB54C\\uB9C8\\uB2E4 \\n        // \\uD638\\uCD9C\\uD558\\uB294 function.\\n        return items.Any() &&\\n        items.All(state => \\n        {\\n          state.LatestValue.HasValue && state.LatestValue == true;\\n        });\\n    });\\n\\n#\\n\\n// 4. \\uC120\\uD0DD\\uB41C \\uC544\\uC774\\uD15C\\uB4E4\\uC744 \\uBAA8\\uB2C8\\uD130\\uB9C1\\nObservableCacheEx.WhenPropertyChanged();  \\n// \\uCEEC\\uB809\\uC158\\uC758 \\uAC01 \\uD56D\\uBAA9\\uC744 \\uBCF4\\uACE0 \\uBCC0\\uACBD\\uB41C \\uD56D\\uBAA9\\uC774 \\uC788\\uC73C\\uBA74 \\uC54C\\uB9B0\\uB2E4.\\n\\nvar selectedItems = this.source\\n    .Connect()\\n    .AutoRefresh(si => si.IsSelected)\\n    .Filter(si => si.IsSelected)\\n    .ToCollection()\\n    .StartWithEmpty()\\n    .Publish();\\n\\n// \\uAE30\\uBCF8 \\uBAA9\\uB85D\\uC774 \\uBCC0\\uACBD\\uB418\\uAC70\\uB098 IsSelected\\uAC00 \\uBCC0\\uACBD \\uB420 \\uB54C \\uAD00\\uCC30 \\uAC00\\uB2A5 \\uD56D\\uBAA9\\uC744 \\uC0DD\\uC131.\\nvar shared = this.source.Connect().Publish();\\nvar selectedChanged = shared\\n    .WhenPropertyChanged(si => si.IsSelected)\\n    .Select(_ => Unit.Default)\\n    .StartWith(Unit.Default);\\nvar collectionChanged = shared\\n    .ToCollection()\\n    .CombineLatest(selectedChanged, (items, _) => items)\\n    .Publish();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"0c3afcfc-956f-5c53-ad8a-d4fd9fbcc160","fields":{"slug":"/fullStackWPF/Domain-Introduction-and-EntityFramework-Setup-01/"},"frontmatter":{"title":"FULL STACK WFP 01 - Domain Introduction and Entity Framework Setup"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 01 - Domain Introduction and Entity Framework Setup\",\n  \"date\": \"2021-05-12 01\",\n  \"tag\": \"WPF, FullStack, EntityFramework, Migrations\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uD504\\uB85C\\uC81D\\uD2B8\\uC640 \\uB3C4\\uBA54\\uC778\\uC744 \\uC18C\\uAC1C\\uD558\\uACE0 \\uB3C4\\uBA54\\uC778 \\uACC4\\uCE35 \\uAD6C\\uCD95\\uC744 \\uC2DC\\uC791\\uD558\\uACE0 \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158\\uC744 \\uC704\\uD55C Entity Framework\\uB97C \\uC124\\uC815\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Domain Introduction\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Class Library \\uC0DD\\uC131 - SimpleTrader.Domain\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Models / User.cs, Account.cs, AssetTransaction.cs, Stock.cs\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class User\\n{\\n    public int Id { get; set; }\\n    public string Email { get; set; }\\n    public string Username { get; set; }\\n    public string Password { get; set; }\\n    public DateTime DatedJoined { get; set; }\\n}\\n\\npublic class Account\\n{\\n    public int Id { get; set; }\\n    public User AccountHolder { get; set; }\\n    public double Balance { get; set; }\\n    public IEnumerable<AssetTransaction> AssetTransactions { get; set; }\\n\\n}\\n\\npublic class AssetTransaction\\n{\\n    public int Id { get; set; }\\n    public Account Account { get; set; }\\n    public bool IsPurchase { get; set; }\\n    public Stock Stock { get; set; }\\n    public int Shares { get; set; }\\n    public DateTime DateProcessed { get; set; }\\n}\\n\\npublic class Stock\\n{\\n    public string Symbol { get; set; }\\n    public double pricePerShare { get; set; }\\n}\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/5TMzsWVcP52h6HyJ_hXt6hBTKP6NEWEFCw68UGMXR57Ta_ChoYaSKgJvdHxhEq9QCZMopWVvt1j71sMywz2Dp3LeqHJELscOsp7hTabj0nyjkuqA8IMa0J-nR1TEp6Mk42HZ9Y1HWf_T4T7M64FSgWANA5I6ljZL-RMBfNmnSDkbXblpKT7z1si_zp3NzLlofx0CqMFgbkC1bc29qq_AfZlYHd1jl8nhTExW6iNRxlXRAdxR9BzFGzrbCvMcwW3hdphL7n4z4u-7do8SSKVngLKIDkVt_xuNnbfWI1yuAWzm8nyi2aFxNfdu6nmNazQ9_mUgqYdXX6PeWDM1ZKioq6dIDLQGjrFsdW01C1xna58E9y9urgBbT2XH4pYcCInMMd2v3RTP4d8pfHcmeqDISuk-XoGJdHfzDufMKAjZBnXNvTuJS0l9uOLt-G9j9nD2K0LmJ6ueNCzmy2gptc7rnDyX1UUypu92YW1k51INewVVEkPngZOEjSZyK-rm9dWWhwhu9kwj9krN6FlKzmLR4M52z_G-1lr3zq7lKTf31zUR65_4Waml21NyjA_Ttquss9KFTlwA_nd_dTvl9vgL3aOahqYBjBCLsOZj5QNGicq4PI4ggUjtlWf_olerFgIthU9BXaRdtNNh4stwL362kx88w-p2ouzIoAM3gaHwPk4gwQctG-hI0chHxjcPbrb81_5ZoRDTD9uwzODZT_drQA=w2002-h1138-no?authuser=0\",\n    \"alt\": \"alt\"\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/_f8yVFhqOZIcOPYFpX7iMFky2VtZnHbvZG-dcUN4HDvp-qRBVjcQkRbZXqV0fBMf2rN4eiCMDxAvDN6DraDQLKwE7byZ2mu5RkrOINqtrLIgfAtIHCuGI7rmCpbGhHWx650CBWJ0QHUWH9bTUV5HsxAXZRC5MOpIzT33-DjrfrsPDZ7ha-GZWOF1Re3bOSoD2o5gJczNeQkwPRNcgbbF3kpSlMdK5-AQp0AUDLdaf7wZoPP5G_RoB0pjkQIVMdcWQQ7oU7dazpDzNChgSLRQ2u-3APQss_aYQZ81y2-fN7RiHoShcyNLeYBAWXmT5nhM2aOgzPXYyL9gREJAXCMZxPc45C3FxxPMUzNieokVA3GAL3VT64Yy-QA9VVOJw4OkhBpFVenbABAoMYci-d_8lcxaORTgu9BodzxyJXG2F9o_gJMj5XVhzS-IjC5M3wP4mAqV4hmlLYr3rIpkvE4HwL-VqEYwqmA4UaJA4pwPCoLzsn0zjDwIJZ5a3niUJ8HuQoc15CM61yPlVQwIfGbupFWkFvSjDlos304j1c57dTesxOx1TBw4sGqoX9Lx82UY4CRItOgxpAsP_6E4W77k2_Ex9sRJxvh-pyYb14TT99m_lb77mxDFB4RrrQrKMbdiB-_ba5atkcKG0Vz9PkitaALqnp6A_8h690k0uKVenDlSbD11-ha3C425RM-J_E099Jho9Mgpuo_1u2UkGczU2A=w1654-h1207-no?authuser=0\",\n    \"alt\": \"alt\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Services / IDataService.cs\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IDataService<T>\\n{\\n    Task<IEnumerable<T>> GetAll();\\n    Task<T> Get(int id);\\n    Task<T> Create(T entity);\\n    Task<T> Update(int id, T entity);\\n\\n    Task<bool> Delete(int id);\\n}\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/4sWgWz3CZyXgI_SCpQrN0ewp53IF_W1-8ChqCmbYi_Y2YsBdR6oR9M9iq_4xDOcNwnnQFB7dzzdvYgNKsvkncgxf9yruWZedS87cqihxhp7gJxYPeNmT2PRwhep0vhbn3s1MTmcjvEwEt0iSJu_iHLkDD3G4Qc8cFTfWhWgE-j9ZfXhgkFNN337AHyqE9RFlNsiPCxMB65cL5XXfwyiNj3uPjAqkBMwJWUXDnu5MLrqeZ_jRwdVXJgXaBQSSp5RvLZZW-VoQOYKPDNPmBTPp2rNmarrh8M3o_z9d_7jV1if3lhP-DPSfTlMqWjiDhGhBXBrYo_cpPatXqNTitjgD7lEaQoeKLnXly-sj9_UEAVcufmVUuGjpQrLonGbxhZ1VAISTnXMoLqMQv_6oBF_CyN45gZF8jXQmQQLKFGTwmisVEVKrFLarXXPgJ3wcL-9UDgQSkUFjelvNkSiCd56-nzgoBSET04rlwf5BCii9hpFgv2SViWalVvQXl523zF9KpjZXVZKqT9-TprBkyINWpRnp89GiVNi_yxx7PxY9h1Wny_NuUxm7BAD8rJxr7T0CGyLHGvAtpiiyCvjPR8TStBGVpoVND-x3Z95GdKhP0_MK030G4-A8GR-XM4aJQRU_18tEvwCSblGM2hU2Bz1QCN-gGw7Q3Ry7waZkz9cnvkhhbMwlXma4M2rr6Ldk9qNTu-uuzvO5oJtiKwYB0PCoMw=w1725-h1285-no?authuser=0\",\n    \"alt\": \"alt\"\n  }))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. Entity Framework Setup\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Class Library \\uC0DD\\uC131 - SimpleTrader.EntityFramework\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NuGet - Microsoft.EntityFrameworkCore \\uC124\\uCE58\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SimpleTraderDbContext.cs\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SimpleTraderDbContext : DbContext\\n{\\n    public DbSet<User> Users { get; set; }\\n    public DbSet<Account> Accounts { get; set; }\\n    public DbSet<AssetTransaction> AssetTransactions { get; set; }\\n\\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\\n    {\\n        // 1. optionsBuilder.UseSqlServer\\uC744 \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC704\\uD574\\n        // NuGet - Microsoft.EntityFrameworkCore.SqlServer \\uC124\\uCE58.\\n        optionsBuilder.UseSqlServer(\\\"Server=(localdb)\\\\\\\\MSSQLLocalDB;Database=nameDB~~;\\\");\\n\\n        base.OnConfiguring(optionsBuilder);\\n    }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NuGet - Microsoft.EntityFrameworkCore.Tools : Package Manager Console \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC704\\uD574\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SimpleTrader.EntityFramework \\uC2DC\\uC791 \\uD504\\uB85C\\uC81D\\uD2B8\\uB85C \\uC124\\uC815.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PM> add-migration initial \\uC2E4\\uD589.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Error - The entity type \\u2018Stock\\u2019 requires a primary key to be defined. \\uBC1C\\uC0DD\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SimpleTraderDbContext : DbContext\\n{\\n    public DbSet<User> Users { get; set; }\\n    public DbSet<Account> Accounts { get; set; }\\n    public DbSet<AssetTransaction> AssetTransactions { get; set; }\\n\\n    // 2. Error \\uD574\\uACB0\\uD558\\uAE30\\uD574 \\uCF54\\uB4DC \\uCD94\\uAC00\\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\\n    {\\n        modelBuilder.Entity<AssetTransaction>().OwnsOne(a => a.Stock);\\n        base.OnModelCreating(modelBuilder);\\n    }\\n\\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\\n    {\\n        // 1. optionsBuilder.UseSqlServer\\uC744 \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC704\\uD574\\n        // NuGet - Microsoft.EntityFrameworkCore.SqlServer \\uC124\\uCE58.\\n        optionsBuilder.UseSqlServer(\\\"Server=(localdb)\\\\\\\\MSSQLLocalDB;Database=nameDB~~;\\\");\\n\\n        base.OnConfiguring(optionsBuilder);\\n    }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PM> add-migration initial\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PM> update-database\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Entity Framework Core Migrations\\n\\n// Creating a Migration\\n[Command Line]\\ndotnet ef migrations add <name of migration>\\n[Package Manager console]\\nadd-migration <name of migration>\\n\\n// Add a Migration\\n[Command Line]\\ndotnet ef migrations add <name of migration>\\n[Package Manager Console]\\nAdd-Migration <name of migration>\\n\\n// Removing a Migration\\n[Command Line]\\ndotnet ef migrations remove\\n[Package Manager Console]\\nremove-migration\\n\\n// Applying a Migration : Update\\n[Command line]\\ndotnet ef database update\\n[Package Manager Console]\\nupdate-database\\n\\n// Reversing a Migration\\n// \\uCCAB \\uBC88\\uC9F8 \\uB9C8\\uC774\\uADF8\\uB808\\uC774\\uC158\\uC758 \\uC774\\uB984\\uC774 \\\"Create\\\"\\uC774\\uACE0 \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uB97C \\uBCF5\\uC6D0\\uD558\\uC5EC \\n// \\uD6C4\\uC18D \\uB9C8\\uC774\\uADF8\\uB808\\uC774\\uC158\\uC73C\\uB85C \\uC778\\uD55C \\uBAA8\\uB4E0 \\uBCC0\\uACBD \\uC0AC\\uD56D\\uC744 \\uC81C\\uAC70\\uD558\\uB824\\uBA74 \\n// \\\"Create\\\"\\uB97C update \\uBA85\\uB839\\uC5D0 \\uC804\\uB2EC\\uD55C\\uB2E4.\\n[Command line]\\ndotnet ef database update Create\\n[Package Manager Console]\\nupdate-database Create\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/kbHhpCd4k4UrRGcMyhNcujqv_OigiZJaBlbJ1M5g9kxBHIeoj5NQpCAPFujItSC6uuG7-pWekoTa8phEjm6MookZt1o974ulTBSJ7ShFka8RgO7imdAYobUByCA0gwA34_idq0aVJVKm4xl8y0SFXbNJBYsg00JkpMsB1mzopMY6t1Vx3y2tHlq0CV8symmH41J1HxWjFksqiuJMTmpfYGwAABTruO0Pee3DhloXLgnSyV_AUnRC0p22Yitt1l_pHI9snODKT0M1pQYZc5Fv5JZoQYQqlNbNa0O-MzF_oAKQo9hNMHOSTFg8_ZMxzWsMo45iZYp400ZExGpK7WuKkjPBqCNW60rewIhum25YJAo87bUrk8mIBGj6JcQhcVw7Z9JBW_F6Ti9ufoOUO40zXcX1eBax77-3z_Q_F4A2RyCmxzBTf_RLSmcLZJW4kYCOPQuJp0zXLsabaxg0WXdgEThnczbbHhaskaq5YmOMA-U-f3bTnNvhgW7ylU99HMfqjqyC-OP3xM3r8rOIGB_jHUlzNKmS2G9PHrZZd2InlvC997kjlo3JZjRUs1ag342hsC0jGvGNvCjRaEPIFQtGGplSk8mlRTmTuQmfkRC4yrNsW7s4gN_GYUbOltx_KDsORzyK1phb2ECkU4GA06D68rjHiEQGZaMMYfrqKGXVJCH3ZIt9QHHWHnTpFJG2K_n1v5eBslbNhTCMTr9ID269iA=w1453-h508-no?authuser=0\",\n    \"alt\": \"alt\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}