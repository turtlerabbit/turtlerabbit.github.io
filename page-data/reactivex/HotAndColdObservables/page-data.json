{"componentChunkName":"component---src-templates-archive-post-js","path":"/reactivex/HotAndColdObservables/","result":{"data":{"mdx":{"id":"94e82003-495d-520b-a1fc-30fb1249c6c2","excerpt":"we will look at how to describe and handle two styles of observable sequences:   Cold : Sequences that are passive and start producing notifications on requestâ€¦","frontmatter":{"title":"Hot And Cold Observables","date":"January 09, 2021","tag":"ReactiveX, tutorial, C#, HotAndColdObservables, publish(), refcount(), replay(), ConnectableObservable"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hot And Cold Observables\",\n  \"date\": \"2021-01-09 09\",\n  \"tag\": \"ReactiveX, tutorial, C#, HotAndColdObservables, publish(), refcount(), replay(), ConnectableObservable\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"we will look at how to describe and handle two styles of observable sequences:  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cold : Sequences that are passive and start producing notifications on request (when subscribed to)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC218\\uB3D9\\uC801\\uC774\\uACE0 \\uC694\\uCCAD\\uC2DC \\uC54C\\uB9BC \\uC0DD\\uC131\\uC744 \\uC2DC\\uC791\\uD558\\uB294 \\uC2DC\\uD000\\uC2A4(\\uAD6C\\uB3C5\\uC2DC)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hot : Sequences that are active and produce notifications regardless of subscriptions  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC5D0 \\uAD00\\uACC4\\uC5C6\\uC774 \\uD65C\\uC131\\uD654\\uB418\\uACE0 \\uC54C\\uB9BC\\uC744 \\uC0DD\\uC131\\uD558\\uB294 \\uC2DC\\uD000\\uC2A4\")))))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Examples of hot observables that could publish regardless of whether there are any subscribers would be:  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mouse movements  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"timer events  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"broadcasts like ESB channels or UDP network packets.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"price ticks from a trading exchange  \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Some examples of cold observables would be:  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"asynchronous request (e.g. when using Observable.FromAsyncPattern)  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"whenever Observable.Create is used  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"subscriptions to queues  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"on-demand sequences  \")))), mdx(\"h1\", null), mdx(\"h4\", null, \"publish()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uC5F0\\uC0B0\\uC790\\uB294 \\uBCF4\\uD1B5\\uC758 Observable\\uC744 ConnectableObservable\\uB85C \\uBCC0\\uD658\\uD574 \\uC900\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"h4\", null, \"ConnectableObservable\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ConnectableObservable\\uC740 Subscriber\\uAC00 \\uC788\\uC5B4\\uB3C4 connect()\\uB97C \\uD638\\uCD9C\\uD558\\uAE30 \\uC804\\uAE4C\\uC9C0\\uB294 \\uC544\\uC774\\uD15C\\uC744 \\uBC29\\uCD9C\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4. connect()\\uB97C \\uD638\\uCD9C\\uD558\\uACE0 \\uB098\\uC11C\\uC57C \\uC544\\uC774\\uD15C\\uC744 \\uBC29\\uCD9C\\uD558\\uAE30 \\uC2DC\\uC791\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"h4\", null, \"refcount()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"refcount() \\uB294 ConnectableObservable\\uC5D0 Connect\\uC640 Disconnect\\uB97C \\uC790\\uB3D9\\uC73C\\uB85C \\uB2F4\\uB2F9\\uD558\\uACE0, ConnectableObservable\\uC744 \\uBCF4\\uD1B5\\uC758 Observable\\uCC98\\uB7FC \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uAC8C \\uD574\\uC900\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"make a Connectable Observable behave like an ordinary Observable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC2DC\\uB9D0\\uD574 Subscription count\\uB97C \\uACC4\\uC18D \\uC138\\uACE0 \\uC788\\uB2E4\\uAC00 Subscription\\uC758 \\uAC1C\\uC218\\uAC00 0 -> 1 \\uAC1C\\uAC00 \\uB418\\uB294 \\uC2DC\\uC810\\uC5D0 connect()\\uB97C \\uC218\\uD589\\uD558\\uACE0 Subscription\\uC774 0\\uC774 \\uB418\\uBA74 disconnect()\\uB97C \\uC218\\uD589\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"h4\", null, \"replay()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"replay() \\uC5F0\\uC0B0\\uC790\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC774\\uC804 \\uBC29\\uCD9C\\uC744 \\uC720\\uC9C0 \\uD55C \\uB2E4\\uC74C \\uC0C8 Observer\\uAC00 \\uC2A4\\uCF54\\uD504\\uC5D0 \\uC62C \\uB54C \\uB2E4\\uC2DC \\uBC29\\uCD9C \\uD560 \\uC218 \\uC788\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ConnectableObservable\\uC744 \\uBC18\\uD658\\uD558\\uBBC0\\uB85C \\uBC29\\uCD9C\\uC744 \\uBA40\\uD2F0 \\uCE90\\uC2A4\\uD2B8\\uD558\\uACE0 \\uC774\\uC804 \\uD56D\\uBAA9\\uB3C4 \\uBC29\\uCD9C\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable\\uC774 \\uD56D\\uBAA9\\uC744 \\uBC29\\uCD9C\\uD558\\uAE30 \\uC2DC\\uC791\\uD55C \\uD6C4\\uC5D0 \\uAD6C\\uB3C5\\uD558\\uB354\\uB77C\\uB3C4 \\uBAA8\\uB4E0 \\uAD00\\uCC30\\uC790\\uAC00 \\uBC29\\uCD9C \\uB41C \\uD56D\\uBAA9\\uC758 \\uB3D9\\uC77C\\uD55C \\uC2DC\\uD000\\uC2A4\\uB97C \\uBCFC \\uC218 \\uC788\\uB3C4\\uB85D\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uACB0 \\uAC00\\uB2A5\\uD55C Observable\\uB85C \\uBCC0\\uD658\\uD558\\uAE30 \\uC804\\uC5D0 Replay \\uC5F0\\uC0B0\\uC790\\uB97C Observable\\uC5D0 \\uC801\\uC6A9\\uD558\\uBA74 \\uACB0\\uACFC\\uC801\\uC73C\\uB85C \\uC5F0\\uACB0 \\uAC00\\uB2A5\\uD55C Observable\\uC740 \\uD56D\\uC0C1 \\uB3D9\\uC77C\\uD55C \\uC644\\uC804\\uD55C \\uC2DC\\uD000\\uC2A4\\uB97C \\uBBF8\\uB798\\uC758 \\uAD00\\uCC30\\uC790\\uC5D0\\uAC8C \\uBC29\\uCD9C\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"replay(1).refCount() keeps latest value in memory even after everyone unsubscribes  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/ReactiveX/tree/main/HotAndColdObservables.Console4net5\"\n  }), \"source\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#Replay\"\n  }), \"\\uCC38\\uACE0 \\uC0AC\\uC774\\uD2B8\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/reactivex/HotAndColdObservables/","previous":{"id":"5b55f91b-dc05-5145-a834-5b917388c8ef","fields":{"slug":"/reactivex/IObservable/"},"frontmatter":{"title":"IObservable<T>"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IObservable<T>\",\n  \"date\": \"2021-01-09 08\",\n  \"tag\": \"ReactiveX, tutorial, C#, IObservable, IDisposable, Observer, Subscribe, CreationOfObservables\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IObservable<out T>\\n{\\n    IDisposable Subscribe(IObserver<T> observer);\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable Subscribe(IObserver<T> observer)\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subscribe = observer(\\uAD00\\uCC30\\uC790)\\uAC00 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uB3C4\\uB85D observable\\uC744 \\uC5F0\\uACB0\\uC2DC\\uD0A8\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD00\\uCC30\\uC790(observer)\\uC758 \\uC758\\uBBF8\\uB294 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uC744 \\uAC1C\\uCCB4\\uB85C \\uC774\\uD574.   \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uD55C\\uB2E4(subscribe)\\uC758 \\uC758\\uBBF8\\uB294 observable\\uACFC observer\\uC744 \\uC5F0\\uACB0\\uC2DC\\uD0A8\\uB2E4\\uB85C \\uC774\\uD574.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uC5F0\\uACB0\\uC2DC\\uD0A4\\uACE0 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uC744 \\uAC1C\\uCCB4\\uB97C \\uD22C\\uC785.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable subscriber = Observable.Subscribe(observer)\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uC54C\\uB9BC \\uC218\\uC2E0\\uC744 \\uC911\\uC9C0 \\uD560 \\uC218 \\uC788\\uB3C4\\uB85D\\uD558\\uB294 \\uC778\\uD130\\uD398\\uC774\\uC2A4\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uC774\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uD558\\uACE0 \\uC788\\uB294 \\uD589\\uC704\\uC790\\uB85C \\uC774\\uD574.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAD6C\\uB3C5\\uC790\\uB294 observable sequence\\uB97C \\uAD6C\\uB3C5\\uD588\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscriber.Dispose()\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"observable\\uACFC observer\\uACFC \\uC5F0\\uACB0 \\uD574\\uC81C  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uD574\\uC81C\\uD55C\\uB2E4\\uB85C \\uC774\\uD574.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static IObservable<Tsource> Create<TSource>(Func<IObserver<TSource>, IDisposable> subscribe) { }\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5(subscription)\\uC774 \\uC0DD\\uC131 \\uB420 \\uB54C\\uB9C8\\uB2E4 \\uC2E4\\uD589\\uB420 \\uB378\\uB9AC\\uAC8C\\uC774\\uD2B8(= Subscribe method)\\uB97C \\uC9C0\\uC815\\uD560 \\uC218 \\uC788\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable.Create()\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uC0DD\\uC131\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAD6C\\uB3C5(subscription)\\uC740 custom Subscribe()\\uB97C \\uB2F4\\uC740 \\uC0C8\\uB85C\\uC6B4 observable sequence\\uB97C \\uC0DD\\uC131\\uD55C \\uAC83\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable subscriber = Observable.Subscribe(Console.WriteLine);\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790\\uB294 \\uC0DD\\uC131\\uD55C observable sequence\\uB97C \\uAD6C\\uB3C5\\uD588\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/ReactiveX/tree/main/Observable.Create.Console4net5\"\n  }), \"source\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#CreationOfObservables\"\n  }), \"\\uCC38\\uACE0 \\uC0AC\\uC774\\uD2B8\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"3343e65b-ea76-5d8f-9979-ae35992a58ec","fields":{"slug":"/dynamicData/DynamicData(1)/"},"frontmatter":{"title":"Dynamic Data - Create Dynamic Data Collections"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Create Dynamic Data Collections\",\n  \"date\": \"2021-01-10 01\",\n  \"tag\": \"DynamicData, SourceCache, SourceList, observable-change-sets, ToObservableChangeSet, ObservableChangeSet\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"DynamicData \\uC0AC\\uC6A9\\uC758 \\uAC1C\\uB150\\uC740\\n\\uB370\\uC774\\uD130 \\uC18C\\uC2A4 ( \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SourceCache<TObject, TKey>\"), \" \\uB610\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SourceList<TObject>\"), \" ) \\uB97C \\uC720\\uC9C0 \\uD55C \\uB2E4\\uC74C\\n\\uB2E4\\uC591\\uD55C \\uC5F0\\uC0B0\\uC790 \\uC870\\uD569\\uC744 \\uC5F0\\uACB0\\uD558\\uC5EC \\uCEEC\\uB809\\uC158\\uC744 \\uC9C1\\uC811 \\uAD00\\uB9AC \\uD560 \\uD544\\uC694\\uC5C6\\uC774 \\uB370\\uC774\\uD130\\uB97C \\uC120\\uC5B8\\uC801\\uC73C\\uB85C \\uC870\\uC791\\uD558\\uACE0 \\uD615\\uC131\\uD558\\uB294 \\uAC83\\uC774\\uB2E4.\"), mdx(\"h2\", null, \"Create Dynamic Data Collections\"), mdx(\"h1\", null), mdx(\"h3\", null, \"The Observable List\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Create an observable list like this:\\nvar myInts = new SourceList<int>();\\n\\n// The observable list provides the direct edit methods you would expect.\\nmyInts.AddRange(Enumerable.Range(0, 10000)); \\nmyInts.Add(99999); \\nmyInts.Remove(99999);\\n\\n// This is achieved using the .Edit method \\n// which ensures only a single change notification is produced.\\nmyInts.Edit(innerList =>\\n{\\n   innerList.Clear();\\n   innerList.AddRange(Enumerable.Range(0, 10000));\\n});\\n\\n// If myInts is to be exposed publicly \\n// it can be made read only using .AsObservableList\\nIObservableList<int> readonlyInts = myInts.AsObservableList();\\n\\n// list\\uC758 \\uBCC0\\uACBD \\uC0AC\\uD56D\\uC740 \\uB2E4\\uC74C myInts.Connect()\\uACFC \\uAC19\\uC774 \\uD638\\uCD9C\\uD558\\uC5EC \\uAD00\\uCC30 \\uD560 \\uC218 \\uC788\\uB2E4.\\nIObservable<IChangeSet<int>> myIntsObservable = myInts.Connect();\\n\\n// \\uC774\\uB807\\uAC8C \\uD558\\uBA74 \\uC218\\uC2ED \\uAC1C\\uC758 operators\\uAC00 \\uC788\\uB294 observable change set\\uAC00 \\uC0DD\\uC131\\uB41C\\uB2E4.\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"The Observable Cache\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Create an observable cache like this:\\nvar myCache = new SourceCache<TObject,TKey>(t => key);\\n\\n// There are direct edit methods, for example\\nmyCache.Clear();\\nmyCache.AddOrUpdate(myItems);\\n\\n// \\uC5EC\\uB7EC \\uC218\\uC815\\uC744 \\uD560 \\uB54C \\uD6A8\\uC728\\uC131\\uC744 \\uB192\\uC774\\uAE30 \\uC704\\uD574 \\uCE90\\uC26C\\uB294 \\uC77C\\uAD04 \\uD3B8\\uC9D1 \\uC218\\uB2E8\\uC744 \\uC81C\\uACF5\\uD55C\\uB2E4.\\nmyCache.Edit(innerCache =>\\n{\\n    innerCache.Clear();\\n    innerCache.AddOrUpdate(myItems);\\n});\\n\\n// \\uC77D\\uAE30 \\uC804\\uC6A9\\uC73C\\uB85C public\\uC73C\\uB85C \\uB178\\uCD9C\\uD560 \\uB54C,\\nIObservableCache<TObject,TKey> readonlyCache = myCache.AsObservableCache();\\n\\n// The cache is observed by calling myCache.Connect() like this:\\nIObservable<IChangeSet<TObject,TKey>> myCacheObservable = myCache.Connect();\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"SourceCache<TObject, TKey>  // An observable cache which exposes an update API. \\n                            // Used at the root of all observable chains.\\n\\npublic class SourceCache<TObject, TKey> : ISourceCache<TObject, TKey>, \\n      IObservableCache<TObject, TKey>, IConnectableCache<TObject, TKey>, \\n      IDisposable where TKey : notnull\\n{\\n    public SourceCache(Func<TObject, TKey> keySelector);\\n\\n    public int Count { get; }\\n    public IObservable<int> CountChanged { get; }\\n    public IEnumerable<TObject> Items { get; }\\n    public IEnumerable<TKey> Keys { get; }\\n    public Func<TObject, TKey> KeySelector { get; }\\n    public IEnumerable<KeyValuePair<TKey, TObject>> KeyValues { get; }\\n\\n    public IObservable<IChangeSet<TObject, TKey>> \\n        Connect(Func<TObject, bool>? predicate = null);\\n    public void Dispose();\\n    public void Edit(Action<ISourceUpdater<TObject, TKey>> updateAction);\\n    public Optional<TObject> Lookup(TKey key);\\n    public IObservable<IChangeSet<TObject, TKey>> \\n        Preview(Func<TObject, bool>? predicate = null);\\n    public IObservable<Change<TObject, TKey>> Watch(TKey key);\\n    protected virtual void Dispose(bool isDisposing);\\n}\\n\")), mdx(\"h1\", null), mdx(\"h2\", null, \"Creating Observable Change Sets\"), mdx(\"p\", null, \"Dynamic Data is based on the concept of creating and manipulating \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"observable change sets.\"), \"\\nobservable change sets\\uC744 \\uB9CC\\uB4DC\\uB294 \\uAE30\\uBCF8 \\uBC29\\uBC95\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISourceCache<T, K>\"), \" \\uBC0F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISourceList<T>\"), \"\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uD558\\uB294 \\uAC83\\uC774\\uB2E4. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Connect to a Cache or List\\nvar myObservableChangeSet = myDynamicDataSource.Connect();\\n\")), mdx(\"p\", null, \"\\uADF8\\uB7EC\\uB098 \\uB370\\uC774\\uD130 \\uC18C\\uC2A4\\uC5D0 \\uB530\\uB77C observables change sets\\uB97C \\uC0DD\\uC131\\uD558\\uB294 \\uB300\\uCCB4 \\uBC29\\uBC95\\uC774 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Create an Observable Change Set from an Rx Observable\\nIObservable<T> myObservable;\\nIObservable<IEnumerable<T>> myObservable;\\nvar myObservableChangeSet = myObservable.ToObservableChangeSet(t=> t.key);\\n\\n// To create a size limited cache,\\nvar myConnection = \\n        myObservable.ToObservableChangeSet(t=> t.key, limitSizeTo:10000);\\n\\n#\\n\\n// Create an Observable Change Set from an Observable Collection\\n// This method is only recommended for simple queries \\n// which act only on the UI thread as ObservableCollection is not thread safe.\\nvar myObservableCollection = new ObservableCollection<T>();\\nvar myConnection = myObservableCollection.ToObservableChangeSet(t => t.Key);\\n\\n#\\n\\n// Create an Observable Change Set from an Binding List\\nvar myBindingList = new BindingList<T>();\\nvar myConnection = myBindingList.ToObservableChangeSet(t => t.Key);\\n\")), mdx(\"h1\", null), mdx(\"p\", null, \"observable change sets\\uB97C \\uC0DD\\uC131\\uD558\\uB294 \\uB610 \\uB2E4\\uB978 \\uBC29\\uBC95\\uC774 \\uC788\\uC73C\\uBA70\\n\\uC774\\uB294 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObservableChangeSet\"), \" \\uC815\\uC801 \\uD074\\uB798\\uC2A4\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC774\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Using the ObservableChangeSet static class\\n\\n// An observable list can be created as follows:\\nvar myObservableList = ObservableChangeSet.Create<int>(observableList =>\\n{\\n    //some code to load data and subscribe\\n    var loader= myService.LoadMyDataObservable().Subscribe(observableList.Add);\\n    var subscriber = \\n        myService.GetMySubscriptionsObservable().Subscribe(observableList .Add);\\n    //dispose of resources\\n    return new CompositeDisposable(loader,subscriber );\\n});\\n\\n// and creating a cache is almost identical except a key has to be specified\\nvar myObservableCache = ObservableChangeSet.Create<Trade, int>(observableCache =>\\n{\\n  //code omitted\\n}, trade = > trade.Id);\\n\")), mdx(\"h1\", null), mdx(\"h2\", null, \"\\uC694\\uC57D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// 1. \\uB370\\uC774\\uD130 \\uC18C\\uC2A4:\\nSourceCache<TObject, TKey>, SourceList<TObject>\\n\\n// 2. \\uB370\\uC774\\uD0C0 \\uC18C\\uC2A4\\uC5D0 \\uBC14\\uB85C edit methods \\uC0AC\\uC6A9\\nSourceCache<TObject, TKey>.AddOrUpdata(Items);\\nSourceCache<TObject, TKey>.Edit(cache => cache.AddOrUpdata(Items));\\n\\n// 3. \\uB370\\uC774\\uD0C0 \\uC18C\\uC2A4\\uC5D0\\uC11C \\uBC14\\uB85C \\uC77D\\uAE30 \\uC804\\uC6A9 public\\uC73C\\uB85C \\uB178\\uCD9C\\uD560 \\uB54C\\n//    \\uC0C8\\uB85C\\uC6B4 observable list\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\nIObservableCache<TObject,TKey> \\n    SourceCache<TObject, TKey>.AsObservableCache();\\n\\n\\n// 4. Creating Observable Change Sets : IObservable<IChangeSet<TObject,TKey>>\\n\\n// 4.1 \\uB370\\uC774\\uD0C0 \\uC18C\\uC2A4\\uC5D0 \\uBC14\\uB85C \\uC5F0\\uACB0\\nIObservable<IChangeSet<TObject,TKey>> \\n    SourceCache<TObject, TKey>.Connect();\\n\\n// 4.2 from an Rx Observable.\\n//     form an Observable Collection.\\n//     from an Binding List.\\nIObservable<IChangeSet<TObject,TKey>> \\n    IObservable<IEnumerable<T>>.ToObservableChangeSet(t=> t.key);\\n\\n// 4.3 ObservableChacneSet \\uC815\\uC801 \\uD074\\uB798\\uC2A4 \\uC0AC\\uC6A9\\nIObservable<IChangeSet<TObject,TKey>> \\n    ObservableChangeSet.Create<Trade, long>(ISourceCache<Trade, long> =>\\n    {\\n        ISourceCache<TObject, TKey>.AddOrUpdate(IEnumerable<trade>);\\n    }, trade = > trade.Id);\\n\")), mdx(\"h1\", null), mdx(\"h2\", null, \"Observable list vs observable cache\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"observable cache\"), \"\\uB294 \\uACE0\\uC720 \\uD55C ID\\uAC00 \\uC788\\uB294 \\uACBD\\uC6B0, \\uC911\\uBCF5\\uC774 \\uCD94\\uAC00\\uB418\\uC9C0 \\uC54A\\uACE0 \\uCD94\\uAC00,\\n\\uC5C5\\uB370\\uC774\\uD2B8 \\uBC0F \\uC81C\\uAC70\\uC2DC \\uC54C\\uB9BC\\uC744 \\uC81C\\uACF5\\uD558\\uB294 dictionary \\uAE30\\uBC18\\uC774\\uBBC0\\uB85C \\uAD00\\uCC30 \\uAC00\\uB2A5\\uD55C \\uCE90\\uC2DC\\uB97C \\uC0AC\\uC6A9\\uD574\\uC57C\\uD55C\\uB2E4.\\n\\uBC18\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observable list\"), \"\\uB294 \\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD558\\uACE0 \\uC5C5\\uB370\\uC774\\uD2B8 \\uAC1C\\uB150\\uB9CC \\uC5C6\\uB2E4.\"), mdx(\"h1\", null), mdx(\"p\", null, \"\\uB610 \\uB2E4\\uB978 \\uCC28\\uC774\\uC810\\uC774 \\uC788\\uB2E4. \\uB3D9\\uC801 \\uB370\\uC774\\uD130\\uC758 \\uCE90\\uC2DC \\uCABD\\uC740 \\uD6E8\\uC52C \\uB354 \\uC131\\uC219\\uD558\\uACE0 \\uB354 \\uAD11\\uBC94\\uC704\\uD55C \\uC5F0\\uC0B0\\uC790\\uB97C \\uAC00\\uC9C0\\uACE0 \\uC788\\uB2E4.\\n\\uB354 \\uB9CE\\uC740 \\uC5F0\\uC0B0\\uC790\\uB97C \\uAC16\\uB294 \\uAC83\\uC740 \\uC8FC\\uB85C \\uD0A4 \\uAE30\\uBC18 \\uC5F0\\uC0B0\\uC790\\uB85C \\uC88B\\uC740 \\uBAA8\\uB4E0 \\uB77C\\uC6B4\\uB4DC \\uC131\\uB2A5\\uC744 \\uB2EC\\uC131\\uD558\\uB294 \\uAC83\\uC774 \\uB354 \\uC26C\\uC6B0\\uBA70\\n\\uBCF8\\uC9C8\\uC801\\uC73C\\uB85C \\uC131\\uB2A5\\uC774 \\uC88B\\uC9C0 \\uC54A\\uC740 \\uB3D9\\uC801 \\uB370\\uC774\\uD130\\uC5D0 \\uC544\\uBB34\\uAC83\\uB3C4 \\uCD94\\uAC00\\uD558\\uACE0 \\uC2F6\\uC9C0 \\uC54A\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}