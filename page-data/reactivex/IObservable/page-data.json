{"componentChunkName":"component---src-templates-archive-post-js","path":"/reactivex/IObservable/","result":{"data":{"mdx":{"id":"5b55f91b-dc05-5145-a834-5b917388c8ef","excerpt":"IDisposable Subscribe(IObserver<T> observer)    Subscribe = observer(관찰자)가 알림을 받도록 observable을 연결시킨다.   관찰자(observer)의 의미는 알림을 받을 개체로 이해.    구독한다(subscribe…","frontmatter":{"title":"IObservable<T>","date":"January 09, 2021","tag":"ReactiveX, tutorial, C#, IObservable, IDisposable, Observer, Subscribe, CreationOfObservables"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IObservable<T>\",\n  \"date\": \"2021-01-09 08\",\n  \"tag\": \"ReactiveX, tutorial, C#, IObservable, IDisposable, Observer, Subscribe, CreationOfObservables\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IObservable<out T>\\n{\\n    IDisposable Subscribe(IObserver<T> observer);\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable Subscribe(IObserver<T> observer)\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subscribe = observer(\\uAD00\\uCC30\\uC790)\\uAC00 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uB3C4\\uB85D observable\\uC744 \\uC5F0\\uACB0\\uC2DC\\uD0A8\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD00\\uCC30\\uC790(observer)\\uC758 \\uC758\\uBBF8\\uB294 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uC744 \\uAC1C\\uCCB4\\uB85C \\uC774\\uD574.   \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uD55C\\uB2E4(subscribe)\\uC758 \\uC758\\uBBF8\\uB294 observable\\uACFC observer\\uC744 \\uC5F0\\uACB0\\uC2DC\\uD0A8\\uB2E4\\uB85C \\uC774\\uD574.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uC5F0\\uACB0\\uC2DC\\uD0A4\\uACE0 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uC744 \\uAC1C\\uCCB4\\uB97C \\uD22C\\uC785.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable subscriber = Observable.Subscribe(observer)\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uC54C\\uB9BC \\uC218\\uC2E0\\uC744 \\uC911\\uC9C0 \\uD560 \\uC218 \\uC788\\uB3C4\\uB85D\\uD558\\uB294 \\uC778\\uD130\\uD398\\uC774\\uC2A4\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uC774\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uD558\\uACE0 \\uC788\\uB294 \\uD589\\uC704\\uC790\\uB85C \\uC774\\uD574.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAD6C\\uB3C5\\uC790\\uB294 observable sequence\\uB97C \\uAD6C\\uB3C5\\uD588\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscriber.Dispose()\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"observable\\uACFC observer\\uACFC \\uC5F0\\uACB0 \\uD574\\uC81C  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uD574\\uC81C\\uD55C\\uB2E4\\uB85C \\uC774\\uD574.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static IObservable<Tsource> Create<TSource>(Func<IObserver<TSource>, IDisposable> subscribe) { }\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5(subscription)\\uC774 \\uC0DD\\uC131 \\uB420 \\uB54C\\uB9C8\\uB2E4 \\uC2E4\\uD589\\uB420 \\uB378\\uB9AC\\uAC8C\\uC774\\uD2B8(= Subscribe method)\\uB97C \\uC9C0\\uC815\\uD560 \\uC218 \\uC788\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable.Create()\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uC0DD\\uC131\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAD6C\\uB3C5(subscription)\\uC740 custom Subscribe()\\uB97C \\uB2F4\\uC740 \\uC0C8\\uB85C\\uC6B4 observable sequence\\uB97C \\uC0DD\\uC131\\uD55C \\uAC83\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable subscriber = Observable.Subscribe(Console.WriteLine);\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790\\uB294 \\uC0DD\\uC131\\uD55C observable sequence\\uB97C \\uAD6C\\uB3C5\\uD588\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/ReactiveX/tree/main/Observable.Create.Console4net5\"\n  }), \"source\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#CreationOfObservables\"\n  }), \"\\uCC38\\uACE0 \\uC0AC\\uC774\\uD2B8\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/reactivex/IObservable/","previous":{"id":"9b5bcf95-cd7c-5493-a305-d07f0452fe56","fields":{"slug":"/csharp/tutorial/Record/"},"frontmatter":{"title":"C# 9.0 Record"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C# 9.0 Record\",\n  \"date\": \"2021-01-09 06\",\n  \"tag\": \"csharp, tutorial, C#, 9.0, Record\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"using System;\\nusing System.Collections.Generic;\\n\\n/// <summary>\\n/// Benefits of Records:\\n///  - Simple to set up\\n///  - Thread-safe\\n///  - Easy/safe to share\\n///  \\n/// When to Use Records:\\n///  - Capturing external data that doesn't change - weatherService, SWAPI.dev\\n///  - API calls\\n///  - Processing data\\n///  - Read-only data\\n///  \\n/// When not to use Records:\\n///  - When you need to change the data (Entity Framework)\\n/// \\n/// </summary>\\n\\nstatic void Main(string[] args)\\n{\\n    Record1 r1a = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Record1 r1b = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Record1 r1c = new(\\\"Sue\\\", \\\"Storm\\\");\\n\\n    Class1 c1a = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Class1 c1b = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Class1 c1c = new(\\\"Sue\\\", \\\"Storm\\\");\\n\\n    Console.WriteLine(\\\"Record Type:\\\");\\n    Console.WriteLine($\\\"To String: { r1a }\\\");\\n\\n    Console.WriteLine($\\\"Are the two objects equal: { Equals(r1a, r1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects reference equal: { ReferenceEquals(r1a, r1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects ==: { r1a == r1b }\\\");\\n    Console.WriteLine($\\\"Are the two objects !=: { r1a != r1b }\\\");\\n\\n    Console.WriteLine($\\\"Hash code of object A: { r1a.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object B: { r1b.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object C: { r1c.GetHashCode() }\\\");\\n\\n\\n    Console.WriteLine();\\n    Console.WriteLine(\\\"********************************\\\");\\n    Console.WriteLine();\\n\\n\\n    Console.WriteLine(\\\"Class Type:\\\");\\n    Console.WriteLine($\\\"To String: { c1a }\\\");\\n\\n    Console.WriteLine($\\\"Are the two objects equal: { Equals(c1a, c1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects reference equal: { ReferenceEquals(c1a, c1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects ==: { c1a == c1b }\\\");\\n    Console.WriteLine($\\\"Are the two objects !=: { c1a != c1b }\\\");\\n\\n    Console.WriteLine($\\\"Hash code of object A: { c1a.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object B: { c1b.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object C: { c1c.GetHashCode() }\\\");\\n\\n\\n    Console.WriteLine();\\n\\n    var (fn, ln) = r1a;\\n    Console.WriteLine($\\\"The value of fn is { fn } and the value of ln is { ln }\\\");\\n\\n    Record1 r1d = r1a with\\n    {\\n        FirstName = \\\"Jon\\\"\\n    };\\n    Console.WriteLine($\\\"Jon's record: { r1d }\\\");\\n\\n    Console.WriteLine();\\n    Record2 r2a = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Console.WriteLine($\\\"R2a Value: { r2a }\\\");\\n    Console.WriteLine($\\\"R2a fn: { r2a.FirstName } ln: { r2a.LastName }\\\");\\n    Console.WriteLine(r2a.SayHello());\\n}\\n\\n// a Record is just a fancy class\\n// Immutable - The values cannot be changes\\npublic record Record1(string FirstName, string LastName);\\npublic record User1(int Id, string FirstName, string LastName) : Record1(FirstName, LastName);\\n\\npublic record Record2(string FirstName, string LastName)\\n{\\n    private string firstName = FirstName;\\n    public string FirstName\\n    {\\n        get { return this.firstName.Substring(0, 1); }\\n        init { }\\n    }\\n\\n    //internal string FirstName { get; init; } = FirstName;\\n\\n    public string FullName { get => $\\\"{ FirstName } { LastName }\\\"; }\\n\\n    public string SayHello()\\n    {\\n        return $\\\"Hello { FirstName }\\\";\\n    }\\n}\\n\\npublic class Class1\\n{\\n    public string FirstName { get; init; }\\n    public string LastName { get; init; }\\n\\n    public Class1(string firstName, string lastName)\\n    {\\n        FirstName = firstName;\\n        LastName = lastName;\\n    }\\n\\n    public void Deconstruct(out string FirstName, out string LastName)\\n    {\\n        FirstName = this.FirstName;\\n        LastName = this.LastName;\\n    }\\n}\\n\\npublic class DiscoverModel\\n{\\n    public User1 LookupUser { get; set; }\\n    public int IncidentsFound { get; set; }\\n    public List<string> Incidents { get; set; }\\n}\\n\\n\\n//***************************\\n// DO NOT DO ANY OF THE BELOW\\n//***************************\\npublic record Record3\\n{\\n    public string FirstName { get; set; } // The set makes this record mutable (BAD!)\\n    public string LastName { get; set; } // The set makes this record mutable (BAD!)\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/CSharpVersion/tree/main/c%23%209.0/RecordDemoApp\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"94e82003-495d-520b-a1fc-30fb1249c6c2","fields":{"slug":"/reactivex/HotAndColdObservables/"},"frontmatter":{"title":"Hot And Cold Observables"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hot And Cold Observables\",\n  \"date\": \"2021-01-09 09\",\n  \"tag\": \"ReactiveX, tutorial, C#, HotAndColdObservables, publish(), refcount(), replay(), ConnectableObservable\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"we will look at how to describe and handle two styles of observable sequences:  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cold : Sequences that are passive and start producing notifications on request (when subscribed to)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC218\\uB3D9\\uC801\\uC774\\uACE0 \\uC694\\uCCAD\\uC2DC \\uC54C\\uB9BC \\uC0DD\\uC131\\uC744 \\uC2DC\\uC791\\uD558\\uB294 \\uC2DC\\uD000\\uC2A4(\\uAD6C\\uB3C5\\uC2DC)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hot : Sequences that are active and produce notifications regardless of subscriptions  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC5D0 \\uAD00\\uACC4\\uC5C6\\uC774 \\uD65C\\uC131\\uD654\\uB418\\uACE0 \\uC54C\\uB9BC\\uC744 \\uC0DD\\uC131\\uD558\\uB294 \\uC2DC\\uD000\\uC2A4\")))))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Examples of hot observables that could publish regardless of whether there are any subscribers would be:  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mouse movements  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"timer events  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"broadcasts like ESB channels or UDP network packets.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"price ticks from a trading exchange  \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Some examples of cold observables would be:  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"asynchronous request (e.g. when using Observable.FromAsyncPattern)  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"whenever Observable.Create is used  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"subscriptions to queues  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"on-demand sequences  \")))), mdx(\"h1\", null), mdx(\"h4\", null, \"publish()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uC5F0\\uC0B0\\uC790\\uB294 \\uBCF4\\uD1B5\\uC758 Observable\\uC744 ConnectableObservable\\uB85C \\uBCC0\\uD658\\uD574 \\uC900\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"h4\", null, \"ConnectableObservable\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ConnectableObservable\\uC740 Subscriber\\uAC00 \\uC788\\uC5B4\\uB3C4 connect()\\uB97C \\uD638\\uCD9C\\uD558\\uAE30 \\uC804\\uAE4C\\uC9C0\\uB294 \\uC544\\uC774\\uD15C\\uC744 \\uBC29\\uCD9C\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4. connect()\\uB97C \\uD638\\uCD9C\\uD558\\uACE0 \\uB098\\uC11C\\uC57C \\uC544\\uC774\\uD15C\\uC744 \\uBC29\\uCD9C\\uD558\\uAE30 \\uC2DC\\uC791\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"h4\", null, \"refcount()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"refcount() \\uB294 ConnectableObservable\\uC5D0 Connect\\uC640 Disconnect\\uB97C \\uC790\\uB3D9\\uC73C\\uB85C \\uB2F4\\uB2F9\\uD558\\uACE0, ConnectableObservable\\uC744 \\uBCF4\\uD1B5\\uC758 Observable\\uCC98\\uB7FC \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uAC8C \\uD574\\uC900\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"make a Connectable Observable behave like an ordinary Observable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC2DC\\uB9D0\\uD574 Subscription count\\uB97C \\uACC4\\uC18D \\uC138\\uACE0 \\uC788\\uB2E4\\uAC00 Subscription\\uC758 \\uAC1C\\uC218\\uAC00 0 -> 1 \\uAC1C\\uAC00 \\uB418\\uB294 \\uC2DC\\uC810\\uC5D0 connect()\\uB97C \\uC218\\uD589\\uD558\\uACE0 Subscription\\uC774 0\\uC774 \\uB418\\uBA74 disconnect()\\uB97C \\uC218\\uD589\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"h4\", null, \"replay()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"replay() \\uC5F0\\uC0B0\\uC790\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC774\\uC804 \\uBC29\\uCD9C\\uC744 \\uC720\\uC9C0 \\uD55C \\uB2E4\\uC74C \\uC0C8 Observer\\uAC00 \\uC2A4\\uCF54\\uD504\\uC5D0 \\uC62C \\uB54C \\uB2E4\\uC2DC \\uBC29\\uCD9C \\uD560 \\uC218 \\uC788\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ConnectableObservable\\uC744 \\uBC18\\uD658\\uD558\\uBBC0\\uB85C \\uBC29\\uCD9C\\uC744 \\uBA40\\uD2F0 \\uCE90\\uC2A4\\uD2B8\\uD558\\uACE0 \\uC774\\uC804 \\uD56D\\uBAA9\\uB3C4 \\uBC29\\uCD9C\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable\\uC774 \\uD56D\\uBAA9\\uC744 \\uBC29\\uCD9C\\uD558\\uAE30 \\uC2DC\\uC791\\uD55C \\uD6C4\\uC5D0 \\uAD6C\\uB3C5\\uD558\\uB354\\uB77C\\uB3C4 \\uBAA8\\uB4E0 \\uAD00\\uCC30\\uC790\\uAC00 \\uBC29\\uCD9C \\uB41C \\uD56D\\uBAA9\\uC758 \\uB3D9\\uC77C\\uD55C \\uC2DC\\uD000\\uC2A4\\uB97C \\uBCFC \\uC218 \\uC788\\uB3C4\\uB85D\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uACB0 \\uAC00\\uB2A5\\uD55C Observable\\uB85C \\uBCC0\\uD658\\uD558\\uAE30 \\uC804\\uC5D0 Replay \\uC5F0\\uC0B0\\uC790\\uB97C Observable\\uC5D0 \\uC801\\uC6A9\\uD558\\uBA74 \\uACB0\\uACFC\\uC801\\uC73C\\uB85C \\uC5F0\\uACB0 \\uAC00\\uB2A5\\uD55C Observable\\uC740 \\uD56D\\uC0C1 \\uB3D9\\uC77C\\uD55C \\uC644\\uC804\\uD55C \\uC2DC\\uD000\\uC2A4\\uB97C \\uBBF8\\uB798\\uC758 \\uAD00\\uCC30\\uC790\\uC5D0\\uAC8C \\uBC29\\uCD9C\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"replay(1).refCount() keeps latest value in memory even after everyone unsubscribes  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/ReactiveX/tree/main/HotAndColdObservables.Console4net5\"\n  }), \"source\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#Replay\"\n  }), \"\\uCC38\\uACE0 \\uC0AC\\uC774\\uD2B8\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}