{"componentChunkName":"component---src-templates-archive-post-js","path":"/dynamicData/DynamicData-InspectCollection/","result":{"data":{"mdx":{"id":"f41f9613-b364-5320-8480-493556cea593","excerpt":"1. Inspect Collection 소스의 항목이 추가 되거나 제거 될 때 전체 컬렉션을 검사하는 방법을 보여준다.   2. Inspect Collection With PropertyChanges  형식 매개변수  TObject…","frontmatter":{"title":"Dynamic Data - Inspect Collection","date":"January 12, 2021","tag":"DynamicData, Collection, ToCollection(), Select(), AutoRefresh(), CombineLatest(), MergeMany(), StartWith(), Publish(), WhenAnyPropertyChanged(), WhenPropertyChanged(), Filter(), StartWithEmpty(), IConnectableObservable, IConnectableCache, Connect()"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Inspect Collection\",\n  \"date\": \"2021-01-12 02\",\n  \"tag\": \"DynamicData, Collection, ToCollection(), Select(), AutoRefresh(), CombineLatest(), MergeMany(), StartWith(), Publish(), WhenAnyPropertyChanged(), WhenPropertyChanged(), Filter(), StartWithEmpty(), IConnectableObservable, IConnectableCache, Connect()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Inspect Collection\"), mdx(\"p\", null, \"\\uC18C\\uC2A4\\uC758 \\uD56D\\uBAA9\\uC774 \\uCD94\\uAC00 \\uB418\\uAC70\\uB098 \\uC81C\\uAC70 \\uB420 \\uB54C \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uAC80\\uC0AC\\uD558\\uB294 \\uBC29\\uBC95\\uC744 \\uBCF4\\uC5EC\\uC900\\uB2E4.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.ToCollection();  \\n// change set\\uC744 \\uC644\\uC804\\uD55C \\uD615\\uC2DD\\uC758 \\uCEEC\\uB809\\uC158\\uC73C\\uB85C \\uBCC0\\uD658\\uD55C\\uB2E4.\\n\\nIObservable<IReadOnlyCollection<TObject>> \\n    IObservable<IChangeSet<TObject, TKey>>.ToCollection<TObject, TKey>();  \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Observable.Select();  \\n// Projects each element of an observable sequence into a new form.\\n\\nIObservable<TResult> \\n    IObservable<IReadOnlyCollection<TObject>>.Select();\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"this.cleanUp = source\\n    .Connect()\\n    .ToCollection()  // \\uC18C\\uC2A4\\uAC00 \\uBCC0\\uACBD \\uB420 \\uB54C\\uB9C8\\uB2E4 \\uC0C8 \\uCEEC\\uB809\\uC158\\uC774 \\uC0DD\\uC131\\uB41C\\uB2E4.\\n    .Select(items =>\\n    {\\n        return new\\n        {\\n            DistinctCount = items.Select(x => x.Value).Distinct().Count(),\\n            Count = items.Count\\n        };\\n    })\\n    .Subscribe(x =>\\n    {\\n        DistinctCount = x.DistinctCount;\\n        Count = x.Count;\\n    });\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"`IReadOnlyCollection<out T>`  // Represents a strongly-typed, \\n                              // read-only collection of elements.\\n \\npublic interface IReadOnlyCollection<out T> : IEnumerable<T>, IEnumerable\\n{\\n    // \\uC694\\uC57D:\\n    //     Gets the number of elements in the collection.\\n    //\\n    // \\uBC18\\uD658 \\uAC12:\\n    //     The number of elements in the collection.\\n    int Count { get; }\\n}\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"2. Inspect Collection With PropertyChanges\"), mdx(\"p\", null, \" \\uD615\\uC2DD \\uB9E4\\uAC1C\\uBCC0\\uC218 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TObject\\uC758 \\uC18D\\uC131\\uC774 \\uBCC0\\uACBD \\uB420 \\uB54C\"), \" \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uAC80\\uC0AC\\uD558\\uB294 \\uBC29\\uBC95\\uC744 \\uBCF4\\uC5EC\\uC900\\uB2E4.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.AutoRefresh();\\n// Automatically refresh downstream operators when properties change.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    IObservable<IChangeSet<TObject, TKey>>.AutoRefresh<TObject, TKey, TProperty>()\\n    \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"this.cleanUp = source\\n    .Connect()\\n    .AutoRefresh(vm => vm.IsActive)  // vm\\uC740 TObject, TObject.Property\\uAC00 \\uBCC0\\uACBD \\uB420 \\uB54C\\n    .ToCollection()  // \\uC18C\\uC2A4\\uC758 \\uD56D\\uBAA9\\uC778 TObject\\uAC00 \\uCD94\\uAC00\\uB418\\uAC70\\uB098 \\uC0AD\\uC81C \\uB420 \\uB54C\\n    .Select(items =>\\n    {\\n        return new\\n        {\\n            // produce a new result \\n            // when the collection itself changes, \\n            // or when IsActive changes(any result can be returned)\\n            AllActive = items.All(i => i.IsActive),\\n            AllInActive = items.All(i => !i.IsActive),\\n            AnyActive = items.Any(i => i.IsActive),\\n            Count = items.Count,\\n        };\\n    })\\n    .Subscribe(x =>\\n    {\\n        AllActive = x.AllActive;\\n        AllInActive = x.AllInActive;\\n        AnyActive = x.AnyActive;\\n        Count = x.Count;\\n    });\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Inspect Collection With Observable\"), mdx(\"p\", null, \"\\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uAC80\\uC0AC\\uD558\\uACE0 \\uAD00\\uCC30 \\uAC00\\uB2A5\\uD55C \\uC0C1\\uD0DC\\uB97C \\uB300\\uC870\\uD558\\uB294 \\uBC29\\uBC95\\uC744 \\uBCF4\\uC5EC\\uC900\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.Transform();  \\n// \\uC9C0\\uC815\\uB41C \\uBCC0\\uD658 \\uD568\\uC218\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uAC01 \\uC5C5\\uB370\\uC774\\uD2B8 \\uD56D\\uBAA9\\uC744 \\uC0C8 \\uC591\\uC2DD\\uC5D0 \\uD22C\\uC601\\uD55C\\uB2E4.\\n\\nIObservable<IChangeSet<TDestination, TKey>> \\n    IObservable<IChangeSet<TObject, TKey>>.Transform<TDestination, TSource, TKey>();\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Observable.Publish();  \\n// Returns a connectable observable sequence \\n// that shares a single subscription to the underlying sequence.\\n// \\uC774 \\uC5F0\\uC0B0\\uC790\\uB294 \\uC77C\\uBC18 System.Reactive.Subjects.Subject`1\\uC744 \\n// \\uC0AC\\uC6A9\\uD558\\uB294 \\uBA40\\uD2F0 \\uCE90\\uC2A4\\uD2B8\\uC758 \\uC804\\uBB38\\uD654\\uC774\\uB2E4.\\n\\nIConnectableObservable<IChangeSet<TDestination, TKey>> \\n    IObservable<IChangeSet<TDestination, TKey>>.Publish<TSource>();\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.MergeMany();  \\n//  \\uC2A4\\uD2B8\\uB9BC\\uC758 \\uAC01 \\uD56D\\uBAA9\\uC5D0\\uC11C \\uC120\\uD0DD\\uB41C Observable\\uC744 \\uB3D9\\uC801\\uC73C\\uB85C \\uBCD1\\uD569\\uD55C\\uB2E4.\\n//  \\uB354 \\uC774\\uC0C1 \\uC2A4\\uD2B8\\uB9BC\\uC758 \\uC77C\\uBD80\\uAC00 \\uC544\\uB2D0 \\uB54C \\uD56D\\uBAA9\\uC744 \\uBCD1\\uD569 \\uD574\\uC81C\\uD55C\\uB2E4.\\n\\nIObservable<bool> \\n    IObservable<IChangeSet<TObject, TKey>>.MergeMany<TObject, TKey, TDestination>();\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Observable.StartWith();  \\n// Prepends a sequence of values to an observable sequence.\\n\\nIObservable<TSource> \\n    StartWith<TSource>(this IObservable<TSource> source, params TSource[] values);\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Observable.CombineLatest();  \\n// Merges two observable sequences into one observable sequence \\n// by using the selector function \\n// whenever one of the observable sequences produces an element.\\n\\nIObservable<TResult> CombineLatest<TSource1, TSource2, TResult>\\n    (this IObservable<TSource1> first, \\n          IObservable<TSource2> second, \\n          Func<TSource1, TSource2, TResult> resultSelector);\\n\\n          // resultSelector: \\uC18C\\uC2A4 \\uC911 \\uD558\\uB098\\uAC00 \\uC694\\uC18C\\uB97C \\uC0DD\\uC131 \\uD560 \\uB54C\\uB9C8\\uB2E4 \\uD638\\uCD9C\\uD558\\uB294 function.\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uCEEC\\uB809\\uC158\\uC758 \\uAC01 \\uD56D\\uBAA9\\uC5D0 \\uB300\\uD55C IsActive observable \\uC54C\\uB9BC\\uC758 \\uC0C1\\uD0DC\\uB97C \\uCEA1\\uCC98\\nvar observableWithState = source\\n    .Connect()\\n    .Transform(obj => new ObservableState(obj))\\n    .Publish();\\n\\n// \\uB0B4\\uBD80 observables\\uC758 \\uD56D\\uBAA9\\uC774 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC744 \\uB54C, \\n// observable\\uC744 \\uC2E4\\uD589(\\uD65C\\uC131\\uD654)\\uD558\\uAE30 \\uC704\\uD55C \\uAE30\\uB2A5\\nvar activeChanged = observableWithState\\n    .MergeMany(state => state.IsActive)  // IObservable<bool> IsActive\\n    // \\uD56D\\uBAA9\\uC774 \\uAE30\\uBCF8 \\uBAA9\\uB85D\\uC5D0 \\uCD94\\uAC00 \\uB420 \\uB54C observable\\uC744 \\uC790\\uB3D9\\uC73C\\uB85C \\uC5F0\\uACB0\\uD558\\uACE0 \\n    // \\uD56D\\uBAA9\\uC774 \\uC81C\\uAC70\\uB418\\uBA74 \\uC5F0\\uACB0\\uC744 \\uD574\\uC81C\\n    .Select(_ => Unit.Default)  // To Unit\\n    // \\uBE48 \\uAC12\\uC744 \\uAC00\\uC9C4 \\uD56D\\uBAA9\\uC744 \\uBC29\\uCD9C\\uD558\\uAE30 \\uC704\\uD55C \\uC791\\uC5C5.\\n    // acitveChanged\\uB294 observable\\uC758 \\uD65C\\uC131\\uD654, \\uBE44\\uD65C\\uC131\\uB97C \\uB098\\uD0C0\\uB0B4\\uB294 \\uAE30\\uB2A5\\uB9CC \\uD544\\uC694\\uD558\\uAE30 \\uB54C\\uBB38.\\n    .StartWith(Unit.Default);  \\n    // collection\\uC774 \\uB85C\\uB4DC \\uB420 \\uB54C \\uCD5C\\uC2E0 yields\\uB97C \\uACB0\\uD569\\uD558\\uAE30 \\uC704\\uD574 unit\\uC73C\\uB85C \\uC2DC\\uC791.\\n\\n// \\uAE30\\uBCF8 observable \\uBAA9\\uB85D\\uC774 \\uBCC0\\uACBD \\uB420 \\uB54C(\\uCD94\\uAC00, \\uC81C\\uAC70 \\uBC0F \\uAD50\\uCCB4) \\n// \\uC804\\uCCB4 \\uCEEC\\uB809\\uC158\\uC744 \\uACF5\\uAC1C(reveal)\\uD55C\\uB2E4.\\nvar collectionChanged = observableWithState.ToCollection();\\n\\n// \\uCD5C\\uC2E0 \\uCEEC\\uB809\\uC158\\uACFC observable \\uC54C\\uB9BC\\uC744 \\uACB0\\uD569\\uD558\\uACE0 \\uBAA8\\uB4E0 \\uD56D\\uBAA9\\uC774 \\uD65C\\uC131 \\uC0C1\\uD0DC\\uC778\\uC9C0 \\uC5EC\\uBD80\\uB97C \\n// \\uB098\\uD0C0\\uB0B4\\uB294 \\uACB0\\uACFC\\uB97C \\uC0DD\\uC131\\uD55C\\uB2E4.\\nvar areAllActive = collectionChanged\\n    .CombineLatest(activeChanged, (items, _) =>\\n    {\\n        // collectionChanged, activeChanged \\uC911 \\uD558\\uB098\\uAC00 \\uC694\\uC18C\\uB97C \\uC0DD\\uC131 \\uD560 \\uB54C\\uB9C8\\uB2E4 \\n        // \\uD638\\uCD9C\\uD558\\uB294 function.\\n\\n        return items.Any() &&\\n        items.All(state => \\n        {\\n          state.LatestValue.HasValue && state.LatestValue == true;\\n        });\\n    });\\n\\nthis.cleanUp = new CompositeDisposable\\n(\\n    areAllActive.Subscribe(allActive => AllActive = allActive),\\n    observableWithState.Connect()\\n);\\n\\n#\\n\\nvar initialItems = Generate(6);\\n\\nsourceCache.AddOrUpdate(initialItems);\\nSystem.Console.WriteLine(sut.AllActive); // false\\n\\n// should remain false because\\ninitialItems.ElementAt(1).SetIsActive(true);\\nSystem.Console.WriteLine(sut.AllActive); // false\\n\\n// set all items to true\\nforeach (var item in initialItems)\\n{\\n    item.SetIsActive(true);\\n}\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Connect();  \\n\\n#\\n// \\uAE30\\uBCF8 \\uC2DC\\uD000\\uC2A4\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC77C \\uAD6C\\uB3C5\\uC744 \\uACF5\\uC720\\uD558\\uAE30 \\uC704\\uD574\\n// IObservable<IChangeSet<Trade, long>>.Publish()\\n// return type : IConnectableObservable<IChangeSet<Trade, long>>\\n\\npublic interface IConnectableObservable<out T> : IObservable<T>\\n{\\n    // \\uC694\\uC57D:\\n    //     Connects the observable wrapper to its source. \\n    //     All subscribed observers will receive values \\n    //     from the underlying observable sequence \\n    //     as long as the connection is established.\\n    IDisposable Connect();    \\n}\\n\\n#\\n// \\uC77D\\uAE30\\uC804\\uC6A9\\uC73C\\uB85C \\uD30C\\uC0DD \\uCEEC\\uB809\\uC158\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uB178\\uCD9C\\uD558\\uAE30 \\uC704\\uD574\\n// IConnectableObservable<IChangeSet<Trade, long>>.AsObservableCache()\\n// return type : IConnectableCache<Trade, long>\\n\\npublic interface IConnectableCache<TObject, TKey> where TKey : notnull\\n{\\n    // \\uC694\\uC57D:\\n    //     Returns a filtered stream of cache changes \\n    //     preceded with the initial filtered tate.\\n    \\n    // \\uB9E4\\uAC1C \\uBCC0\\uC218:\\n    //   predicate:\\n    //     The result will be filtered using the specified predicate.\\n    \\n    // \\uBC18\\uD658 \\uAC12:\\n    //     An observable that emits the change set.\\n    IObservable<IChangeSet<TObject, TKey>> \\n        Connect(Func<TObject, bool>? predicate = null);\\n}\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"4. Monitor SelectedItems\"), mdx(\"p\", null, \"Both methods produce the same result.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7EC\\uB098, UsingEntireCollection()\\uC740 \\uC120\\uD0DD\\uB41C \\uD56D\\uBAA9\\uACFC \\uC120\\uD0DD\\uB418\\uC9C0 \\uC54A\\uC740 \\uD56D\\uBAA9\\uC758 \\uAC12\\uC744 \\uC0DD\\uC131 \\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.WhenPropertyChanged();  \\n// \\uCEEC\\uB809\\uC158\\uC758 \\uAC01 \\uD56D\\uBAA9\\uC744 \\uBCF4\\uACE0 \\uBCC0\\uACBD\\uB41C \\uD56D\\uBAA9\\uC774 \\uC788\\uC73C\\uBA74 \\uC54C\\uB9B0\\uB2E4.\\n\\nIObservable<PropertyValue<TObject, TValue>> \\n    WhenPropertyChanged<TObject, TKey, TValue>(\\n        this IObservable<IChangeSet<TObject, TKey>> source, \\n        Expression<Func<TObject, TValue>> propertyAccessor, \\n        bool notifyOnInitialValue = true)\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.Filter();  // Filters the specified source.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    IObservable<IChangeSet<TObject, TKey>>.Filter<TObject, TKey>(\\n        this IObservable<IChangeSet<TObject, TKey>> source, \\n        Func<TObject, bool> filter)\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.StartWithEmpty();  \\n// Prepends an empty change set to the source.\\n\\nIObservable<IReadOnlyCollection<T>> \\n    StartWithEmpty<T>(this IObservable<IReadOnlyCollection<T>> source);\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"private IDisposable UseFilterOnProperty()\\n{\\n    var selectedItems = this.source\\n        .Connect()\\n        .AutoRefresh(si => si.IsSelected)\\n        .Filter(si => si.IsSelected)\\n        .ToCollection()\\n        .StartWithEmpty()\\n        .Publish();\\n\\n    return new CompositeDisposable\\n    (\\n        selectedItems\\n        .Select(items => items.Any(si => si.IsSelected))\\n        .Subscribe(result => HasSelection = result),\\n\\n        selectedItems\\n        .Select(items =>\\n        {\\n            var count = items.Count(si => si.IsSelected);\\n            if (count == 0) return \\\"Nothing Selected\\\";\\n            return count == 1 \\n                ? $\\\"{count} item selected\\\" : $\\\"{count} items selected\\\";\\n        })\\n        .Subscribe(result => SelectedMessage = result),\\n\\n        selectedItems.Connect()\\n    );\\n}\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"private IDisposable UseEntireCollection()\\n{\\n    // \\uAE30\\uBCF8 \\uBAA9\\uB85D\\uC774 \\uBCC0\\uACBD\\uB418\\uAC70\\uB098 IsSelected\\uAC00 \\uBCC0\\uACBD \\uB420 \\uB54C \\uAD00\\uCC30 \\uAC00\\uB2A5 \\uD56D\\uBAA9\\uC744 \\uC0DD\\uC131\\n    var shared = this.source.Connect().Publish();\\n\\n    var selectedChanged = shared\\n        .WhenPropertyChanged(si => si.IsSelected)\\n        .Select(_ => Unit.Default)\\n        .StartWith(Unit.Default);\\n\\n    var collectionChanged = shared\\n        .ToCollection()\\n        .CombineLatest(selectedChanged, (items, _) => items)\\n        .Publish();\\n\\n    return new CompositeDisposable\\n    (\\n        collectionChanged\\n        .Select(items => items.Any(si => si.IsSelected))\\n        .Subscribe(result => HasSelection = result),\\n\\n        collectionChanged\\n        .Select(items =>\\n        {\\n            var count = items.Count(si => si.IsSelected);\\n            if (count == 0) return \\\"Noting Selected\\\";\\n            return count == 1\\n            ? $\\\"{count} item selected\\\" : $\\\"{count} items selected\\\";\\n        })\\n        .Subscribe(result => SelectedMessage = result),\\n        shared.Connect(),\\n\\n        collectionChanged.Connect()\\n    );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/dynamicData/DynamicData-InspectCollection/","previous":{"id":"192f8548-67e9-512b-840b-e2d8fa1df87d","fields":{"slug":"/dynamicData/DynamicData-Creation/"},"frontmatter":{"title":"Dynamic Data - Change Set Creation"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Change Set Creation\",\n  \"date\": \"2021-01-12 01\",\n  \"tag\": \"DynamicData, SourceList, SourceCache, ObservableChangeSet, Task, Reloadable, Switch(), EditDiff(), RefCount(), Retry()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. FromObservable\"), mdx(\"p\", null, \"2\\uAC1C\\uC758 observables\\uB97C \\uBC1B\\uC544 \\uD558\\uB098\\uC758 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IObservable<IChangeSet<T, TKey>>\"), \"\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uBC18\\uD658\\uD55C\\uB2E4.  \"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// BehaviorSubject : \\uAC00\\uC7A5 \\uB9C8\\uC9C0\\uB9C9\\uC758 \\uAC12(\\uB370\\uC774\\uD130 \\uC18C\\uC2A4)\\uC744 \\uCE90\\uC2F1\\uD574\\uC11C \\uBCF4\\uC5EC\\uC8FC\\uB294 subject.\\n// \\uB9CC\\uC57D \\uB9C8\\uC9C0\\uB9C9\\uC758 1\\uAC1C\\uC758 \\uC774\\uBCA4\\uD2B8\\uB97C \\uBC30\\uCD9C\\uD558\\uACE0 \\uC2F6\\uB2E4\\uBA74 BehaviorSubject\\uB97C \\uC0AC\\uC6A9.\\nvar initial = new BehaviorSubject<IEnumerable<DataClass>>(Generator.Generate(5));\\nvar subscriptions = new Subject<DataClass>();\\n\\n#\\n\\nreturn ObservableChangeSet.Create<DataClass, long>(cache =>\\n{\\n    // in an enterprise app, \\n    // would have to account for the gap between load and subscribe\\n    var initialSubscriber = initialLoad\\n        .Take(1)\\n        .Subscribe(cache.AddOrUpdate);\\n\\n    var subscriber = subscriptions\\n        .Subscribe(cache.AddOrUpdate);\\n\\n    return new CompositeDisposable(initialSubscriber, subscriber);\\n}, DataClass => DataClass.Id);\\n\\n#\\n\\nsubscriptions.OnNext(newItem); // count: 6\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"2. FromTask\"), mdx(\"p\", null, \"Create an observable change set from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"return ObservableChangeSet.Create<DataClass, long>(async cache =>\\n{\\n    var items = await LoadFromTask();\\n    cache.AddOrUpdate(items);\\n    return () => { };\\n}, DataClass => DataClass.Id); \\n\\n#\\n\\npublic static Task<IEnumerable<DataClass>> LoadFromTask()\\n{\\n    return Task.FromResult(Generator.Generate(6));\\n}\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Reloadable\"), mdx(\"p\", null, \"DynamicData\\uC758 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Switch()\"), \" \\uC5F0\\uC0B0\\uC790\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uBC18\\uBCF5\\uC801\\uC73C\\uB85C data\\uB97C \\uB2E4\\uC2DC \\uB85C\\uB4DC\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Switch()  // \\uC774\\uC804 data\\uB97C \\uC9C0\\uC6B0\\uACE0 \\uC0C8\\uB85C\\uC774 \\uB85C\\uB4DC\\uB41C data\\uB97C \\uCD94\\uAC00\\uD558\\uB294 \\uAE30\\uB2A5\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    Switch<TObject, TKey>(this IObservable<IObservableCache<TObject, TKey>> sources);\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var loader = new Subject<Unit>();\\nint loadCount = 0;\\n\\n#\\n\\npublic static IObservable<IChangeSet<DataClass, long>>\\n    Reloadable(IObservable<Unit> loadObservable)\\n{\\n    return loadObservable\\n        .StartWith(Unit.Default)\\n        .Select(_ => FromTask())\\n        .Switch();\\n}\\n\\n#\\n\\nChangeSetCreation\\n    .Reloadable(loader)\\n    .Do(Change => loadCount++)\\n    .AsObservableCache()\\n\\nloader.OnNext(Unit.Default);\\n\\n// the count will be 3 rather than 2 \\n// because a .Clear() is first called (\\uC774\\uC804 \\uB370\\uC774\\uD130\\uB97C \\uBAA8\\uB4DC \\uC9C0\\uC6B0\\uACE0)\\n// when an observable change set is switched\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"4. Reloadable With EditDiff\"), mdx(\"p\", null, \"\\uB178\\uC774\\uC988\\uB97C \\uD06C\\uAC8C \\uC904\\uC77C \\uC218 \\uC788\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uBD88\\uD544\\uC694\\uD55C \\uC5C5\\uB370\\uC774\\uD2B8\\uB97C \\uC608\\uBC29\"), \"\\uD558\\uAE30 \\uC704\\uD574\\n\\uC774\\uC804 \\uB85C\\uB4DC\\uC640\\uC758 diff set\\uB97C \\uACC4\\uC0B0\\uD558\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISourceCache<TObject, TKey>.EditDiff()\"), \"\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC\\n\\uB2E4\\uC2DC \\uB85C\\uB4DC\\uD558\\uACE0 \\uBAA9\\uB85D\\uC744 \\uC720\\uC9C0\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var reloader = new Subject<Unit>();\\nint loadCount = 0;\\nIChangeSet<DataClass, long> lastChangeSet = null;\\n\\nTask<IEnumerable<DataClass>> Loader()\\n{\\n    loadCount++;\\n    return Task.FromResult(loadCount == 1\\n        ? Generator.Generate(6)\\n        : Generator.Generate(11));\\n}\\n\\n#\\n\\nreturn ObservableChangeSet.Create<DataClass, long>(cache =>\\n{\\n    return loadObservable\\n        .StartWith(Unit.Default)  // ensure inital load\\n        .SelectMany(_ => loader()) // SelectMany : From one, select 0 or more\\n        .Subscribe(items => \\n        {\\n          cache.EditDiff(items, EqualityComparer<DataClass>.Default)\\n        });\\n}, dataClass => dataClass.Id);\\n\\n#\\n\\nChangeSetCreation\\n    .ReloadableWithEditDiff(reloader, Loader)\\n    .Do(changes => lastChangeSet = changes)\\n    .AsObservableCache()\\n\\nreloader.OnNext(Unit.Default);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"5. FromTask With RefCount\"), mdx(\"p\", null, \"\\uAD6C\\uB3C5\\uC774 \\uD558\\uB098 \\uC774\\uC0C1 \\uC788\\uB294 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\uB418\\uB294 \\uC2DC\\uD000\\uC2A4\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uAD6C\\uB3C5\\uC774 0\\uC774\\uBA74 \\uC790\\uC2E0\\uC744 \\uD574\\uC9C0\\uD558\\uACE0 \\uB2E4\\uC2DC \\uC0C8\\uB85C\\uC6B4 \\uAD6C\\uB3C5\\uC774 \\uC624\\uBA74 \\uCC98\\uC74C\\uBD80\\uD130 \\uC790\\uB3D9\\uC73C\\uB85C \\uC2DC\\uC791\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"RefCount()  // Cache equivalent to Publish().RefCount(). \\n            // The source is cached so long as there is at least 1 subscriber.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    RefCount<TObject, TKey>(this IObservable<IChangeSet<TObject, TKey>> source);\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public static IObservable<IChangeSet<DataClass, long>>\\n    FromTaskWithRefCount(Func<Task<IEnumerable<DataClass>>> loader)\\n{\\n    // RefCount\\uB294 \\uD45C\\uC900 rx Publish().RefCount() \\uC791\\uC5C5\\uC758 dd \\uC624\\uBC84\\uB85C\\uB4DC\\uC774\\uB2E4.\\n    // dd\\uAC00 \\uC790\\uB3D9\\uC73C\\uB85C \\uCC98\\uB9AC\\uD558\\uBBC0\\uB85C Publish()\\uB97C \\uC0AC\\uC6A9\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n    return FromTask(loader).RefCount();            \\n}\\n\\npublic static IObservable<IChangeSet<DataClass, long>> \\n    FromTask(Func<Task<IEnumerable<DataClass>>> loader)\\n{\\n    return ObservableChangeSet.Create<DataClass, long>(async cache =>\\n    {\\n        var items = await loader();\\n        cache.AddOrUpdate(items);\\n        return () => { };\\n    }, dataClass => dataClass.Id);\\n}\\n\\n#\\n\\nint loadCount = 0;\\nTask<IEnumerable<DataClass>> Loader()\\n{\\n    loadCount++;\\n    return Task.FromResult(Generator.Generate(6));\\n}\\n\\nvar refcountSource = ChangeSetCreation.FromTaskWithRefCount(Loader);\\n\\nusing (var sut1 = refcountSource.AsObservableCache())\\nusing (var sut2 = refcountSource.AsObservableCache())\\n{\\n    Console.WriteLine(sut1.Count);\\n    Console.WriteLine(sut2.Count);\\n    // \\uAD6C\\uB3C5\\uC774 \\uD558\\uB098\\uC774\\uC0C1 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\n}\\nConsole.WriteLine(loadCount); // \\uADF8\\uB798\\uC11C loadCount\\uB294 1\\n\\n// \\uAD6C\\uB3C5 0 \\uC0C1\\uD0DC\\n\\nusing (var sut1 = refcountSource.AsObservableCache())\\nusing (var sut2 = refcountSource.AsObservableCache())\\nusing (var sut3 = refcountSource.AsObservableCache())\\nusing (var sut4 = refcountSource.AsObservableCache())\\nusing (var sut5 = refcountSource.AsObservableCache())\\n{\\n    // \\uB2E4\\uC2DC \\uC0C8\\uB85C\\uC6B4 \\uAD6C\\uB3C5\\uC73C\\uB85C \\uCC98\\uC74C\\uBD80\\uD130 \\uC790\\uB3D9\\uC73C\\uB85C \\uC2DC\\uC791.\\n    Console.WriteLine(sut1.Count);\\n    Console.WriteLine(sut2.Count);\\n    Console.WriteLine(sut3.Count);\\n    Console.WriteLine(sut4.Count);\\n    Console.WriteLine(sut5.Count);\\n    // \\uAD6C\\uB3C5\\uC774 \\uD558\\uB098\\uC774\\uC0C1 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\n}\\nConsole.WriteLine(loadCount); // \\uADF8\\uB798\\uC11C loadCount 2\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"6. WithRetry\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Retry()\"), \" : In an enterprise app, would probably use a backoff retry strategy\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"int loadCount = 0;\\nint failedCount = 0;\\n\\nTask<IEnumerable<DataClass>> Loader()\\n{\\n    loadCount++;\\n\\n    if (loadCount < 3)\\n    {\\n        failedCount++;\\n        throw new Exception(\\\"Failed\\\");\\n    }\\n    return Task.FromResult(Generator.Generate(6));\\n}\\n\\n#\\n\\nChangeSetCreation\\n    .FromTask(Loader)\\n    .Retry(3)\\n    .AsObservableCache()\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"5560aba8-303d-541a-9c2d-ad7e5bc11e97","fields":{"slug":"/dynamicData/DynamicData-AutoRefresh/"},"frontmatter":{"title":"Dynamic Data - AutoRefresh"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - AutoRefresh\",\n  \"date\": \"2021-01-12 03\",\n  \"tag\": \"DynamicData, AutoRefresh(), Count(), AutoRefresh For PropertyChanges\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. AutoRefresh For PropertyChanges\"), mdx(\"p\", null, \"observable cache\\uB294 \\uBCC0\\uACBD \\uAC00\\uB2A5\\uD55C \\uC18D\\uC131 \\uAC1C\\uB150\\uC774 \\uC5C6\\uB2E4. It only knows about adds, updates and removes.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7EC\\uB098 \\uC0C8\\uB85C \\uACE0\\uCE68\\uC758 \\uAC1C\\uB150\\uC774 \\uC788\\uB2E4. \\uC774\\uB294 \\uACE0\\uC720, \\uC815\\uB82C, \\uD544\\uD130\\uB9C1 \\uBC0F \\uADF8\\uB8F9\\uD654(distinct, sort, filter and grouping)\\uC640\\n\\uAC19\\uC740 downstream operators\\uC5D0 \\uC7AC\\uD3C9\\uAC00\\uB97C \\uC9C0\\uC2DC\\uD558\\uB294 \\uC218\\uB3D9 \\uBC29\\uBC95\\uC774\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public IObservable<int> DistinctCount { get; }\\n\\npublic AutoRefreshForPropertyChanges(IObservableCache<MutableThing, int> dataSource)\\n{\\n    /*\\n     * \\uAC15\\uC81C\\uB85C \\uC0C8\\uB85C\\uACE0\\uCE68\\uD560 \\uB54C, \\uC218\\uB3D9\\uC73C\\uB85C \\uD2B8\\uB9AC\\uAC70\\uD574\\uC57C\\uD55C\\uB2E4.\\n     * In this case property changes are monitored\\n     * and the data source sends a refresh signal to all downstream operators.\\n     */\\n    DistinctCount = dataSource\\n        .Connect()\\n        .AutoRefresh(t => t.Value)\\n        .Count();\\n}\\n\\n#\\n\\nusing (var cache = new SourceCache<MutableThing, int>(m => m.Id))\\n{\\n    int count = 0;\\n    var sut = new AutoRefreshForPropertyChanges(cache);\\n    sut.DistinctCount.Subscribe(x => count = x);\\n\\n    cache.AddOrUpdate(items);\\n    Console.WriteLine(count);  // 4\\n\\n    // check remove works\\n    cache.RemoveKey(4);\\n    Console.WriteLine(count);   // 2\\n\\n    // check add works\\n    cache.AddOrUpdate(new MutableThing(10, \\\"z\\\"));\\n    Console.WriteLine(count);  // 3\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.AutoRefresh();\\n// Automatically refresh downstream operators when properties change.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    IObservable<IChangeSet<TObject, TKey>>.AutoRefresh<TObject, TKey, TProperty>()\\n    \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Observable.Count();\\n// observable sequence\\uC758 \\uCD1D \\uC694\\uC18C \\uC218\\uB97C \\uB098\\uD0C0\\uB0B4\\uB294 System.Int32\\uB97C \\uD3EC\\uD568\\uD558\\uB294 \\n// observable sequence\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\\n\\nIObservable<int>\\n    IObservable<IChangeSet<TObject, TKey>>.Count<IChangeSet<TObject, TKey>>();\\n    \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}