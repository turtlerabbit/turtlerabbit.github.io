{"componentChunkName":"component---src-templates-archive-post-js","path":"/dynamicData/DynamicData-Switch/","result":{"data":{"mdx":{"id":"defeafcb-224e-5ca4-9cd1-657d0705e244","excerpt":"1. Switch 다른 데이터 소스 간 전환 데이터의 전환은  IObservable<IChangeSet<T>>  or  IObservable<IObservableList<T>> 에서 작동한다.   The same concept applies to the  ObservableCache .","frontmatter":{"title":"Dynamic Data - Switch","date":"January 12, 2021","tag":"DynamicData, Switch()"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Switch\",\n  \"date\": \"2021-01-12 05\",\n  \"tag\": \"DynamicData, Switch()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Switch\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uB978 \\uB370\\uC774\\uD130 \\uC18C\\uC2A4 \\uAC04 \\uC804\\uD658\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB370\\uC774\\uD130\\uC758 \\uC804\\uD658\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IObservable<IChangeSet<T>>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IObservable<IObservableList<T>>\"), \"\\uC5D0\\uC11C \\uC791\\uB3D9\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The same concept applies to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ObservableCache\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public IObservableList<int> DataSource { get; }\\n\\npublic SwitchDataSource(IObservableList<int> sourceA, IObservableList<int> sourceB)\\n{\\n    DataSource = this\\n        .WhenValueChanged(@this => @this.Option)\\n        .Select(opt => opt == SwitchDataSoruceOption.SourceA ? sourceA : sourceB)\\n        .Switch()  // this is dynamic data overload of Switch()\\n        .AsObservableList();\\n\\n    this.cleanUp = DataSource;\\n}\\n\\n#\\n\\npublic class SourceList<T> : ISourceList<T>, IObservableList<T>, IDisposable\\npublic class SourceCache<TObject, TKey> : ISourceCache<TObject, TKey>, \\n    IObservableCache<TObject, TKey>, IConnectableCache<TObject, TKey>, IDisposable \\n    where TKey : notnull\\n\\n#\\n\\nusing (var listA = new SourceList<int>())\\nusing (var listB = new SourceList<int>())\\nusing (var sut = new SwitchDataSource.SwitchDataSource(listA, listB))\\n{\\n    var oddNumbers = Enumerable\\n        .Range(1, 10000)\\n        .Where(i => i % 2 == 1).ToArray();\\n    var evenNumbers = Enumerable\\n        .Range(1, 10000)\\n        .Where(i => i % 2 == 2).ToArray();\\n\\n    listA.AddRange(oddNumbers);\\n    listB.AddRange(evenNumbers);\\n\\n    sut.Option = SwitchDataSource.SwitchDataSoruceOption.SourceB;\\n    foreach (var item in sut.DataSource.Items)\\n    {\\n        Console.WriteLine(item);  // evenNumbers\\n    }\\n\\n    sut.Option = SwitchDataSource.SwitchDataSoruceOption.SourceA;\\n    foreach (var item in sut.DataSource.Items)\\n    {\\n        Console.WriteLine(item);  // oddNumbers\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/dynamicData/DynamicData-Switch/","previous":{"id":"3c686883-d3d7-5c77-b5c3-818fbfb23eb1","fields":{"slug":"/dynamicData/DynamicData-Aggregation/"},"frontmatter":{"title":"Dynamic Data - Aggregation"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Aggregation\",\n  \"date\": \"2021-01-12 04\",\n  \"tag\": \"DynamicData, Aggregations, StartWithEmpty()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Aggregation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Available aggregations : Max, Min, Avg, StdDev, Count, Sum.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For custom aggregations use : source.Connect().ToCollection().Select(items=>\\u2026);\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public Aggregations(IObservableList<int> source)\\n{\\n    var shared = source\\n        .Connect()\\n        // \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C dd\\uB294 change set\\uC774 \\uBE44\\uC5B4\\uC788\\uC744 \\uB54C \\uC989, \\n        // \\uC18C\\uC2A4\\uC5D0 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC744 \\uB54C \\uAD6C\\uB3C5\\uC2DC \\uC54C\\uB9AC\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n        // \\uC774\\uB294 \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uB4DC \\uB420\\uB54C\\uAE4C\\uC9C0 \\uACB0\\uACFC\\uAC00 \\uACC4\\uC0B0\\uB418\\uC9C0 \\uC54A\\uC74C\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4.\\n        // \\uADF8\\uB7EC\\uB098 \\uB370\\uC774\\uD130 \\uC18C\\uC2A4\\uAC00 \\uBE44\\uC5B4 \\uC788\\uC5B4\\uB3C4 \\uACB0\\uACFC\\uAC00 \\uD544\\uC694\\uD558\\uBA74 StartWithEmpty()\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\\n        .StartWithEmpty()\\n        // use standard rx Publish(), Connect() to share published changesets\\n        .Publish();\\n\\n    this.cleanUp = new CompositeDisposable\\n    (\\n        shared.Maximum(i => i).Subscribe(max => Max = max),\\n        shared.Minimum(i => i).Subscribe(min => Min = min),\\n        shared.Avg(i => i).Subscribe(avg => Avg = avg),\\n\\n        shared.Connect()\\n    );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"872c82d8-5a60-5c25-a33d-866d3f66ef68","fields":{"slug":"/dynamicData/DynamicData-Transform/"},"frontmatter":{"title":"Dynamic Data - Transform"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Transform\",\n  \"date\": \"2021-01-12 06\",\n  \"tag\": \"DynamicData, TransformMany(), AutoRefreshOnObservable, ToObservableChangeSet\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Flatten Observable Collection\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC911\\uCCA9 \\uB41C \\uAD00\\uCC30 \\uAC00\\uB2A5 \\uCEEC\\uB809\\uC158\\uC744 \\uAE30\\uBC18\\uC73C\\uB85C flat cache\\uB97C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBD80\\uBAA8\\uAC00 \\uCD94\\uAC00 \\uB420 \\uB54C\\uB9C8\\uB2E4 \\uC0C8\\uB85C\\uC6B4 \\uBCC0\\uACBD \\uC9D1\\uD569\\uC774 \\uC0DD\\uC131\\uB418\\uBBC0\\uB85C Batch() \\uC801\\uC6A9\\uC744 \\uAD8C\\uC7A5\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC54C\\uB9BC\\uC744 \\uC904\\uC774\\uAE30 \\uC704\\uD574 TransformMany() \\uC774\\uD6C4(\\uD2B9\\uD788 \\uCD08\\uAE30\\uB85C\\uB4DC\\uC2DC)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public IObservableCache<NestedChild, string> Children { get; }\\n\\npublic FlattenNestedObservableCollection(\\n    IObservableCache<ClassWithNestedObservableCollection, int> source)\\n{\\n    Children = source\\n        .Connect()\\n        .TransformMany(parent => parent.Children, c => c.Name)\\n            // c.Name\\uC758 \\uC720\\uC77C\\uD55C \\uAC12\\uB4E4\\uB85C parent.Children\\uB97C flat \\uD55C\\uB2E4.\\n        .AsObservableCache();\\n}\\n\\n#\\n\\nvar children = new[]\\n{\\n    new NestedChild(\\\"A\\\", \\\"ValueA\\\"),\\n    new NestedChild(\\\"B\\\", \\\"ValueB\\\"),\\n    new NestedChild(\\\"C\\\", \\\"ValueC\\\"),\\n    new NestedChild(\\\"D\\\", \\\"ValueD\\\"),\\n    new NestedChild(\\\"E\\\", \\\"ValueE\\\"),\\n    new NestedChild(\\\"F\\\", \\\"ValueF\\\")\\n};\\n\\nvar parents = new[]\\n{\\n    new ClassWithNestedObservableCollection(1, new[] { children[0], children[1] }),\\n    new ClassWithNestedObservableCollection(2, new[] { children[2], children[3] }),\\n    new ClassWithNestedObservableCollection(3, new[] { children[4] })\\n};\\n\\nusing (var source = new SourceCache<ClassWithNestedObservableCollection, int>(x => x.Id))\\nusing (var sut = new FlattenNestedObservableCollection(source))\\n{\\n    source.AddOrUpdate(parents);\\n\\n    Console.WriteLine(sut.Children.Count);  // 5\\n    foreach (var item in sut.Children.Items)\\n    {\\n        // parents.SelectMany(p => p.Children.Take(5))\\n        Console.WriteLine(item.Value);\\n    }\\n\\n    // add a child to the observable collection\\n    parents[2].Children.Add(children[5]);\\n    Console.WriteLine(sut.Children.Count);  // 6\\n    Console.WriteLine(sut.Children.Items);  // parents.SelectMany(p => p.Children)\\n\\n    // remove a parent and check children have moved\\n    source.RemoveKey(1);\\n    Console.WriteLine(sut.Children.Count);  // 4\\n    Console.WriteLine(sut.Children.Items);  // parents.SelectMany(p => p.Children)\\n\\n    // add a parent and check items have been added back in\\n    source.AddOrUpdate(parents[0]);\\n    Console.WriteLine(sut.Children.Count);  // 6\\n    Console.WriteLine(sut.Children.Items);  // parents.SelectMany(p => p.Children)\\n}\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"2. Flatten Observable Collection With Projection From ObservableCache\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public int Id { get; }\\npublic ObservableCollection<NestedChild> Children { get; }\\n\\npublic ClassWithNestedObservableCollection(int id, IEnumerable<NestedChild> animals)\\n{\\n    Id = id;\\n    Children = new ObservableCollection<NestedChild>(animals);\\n}\\n\\n#\\n\\nvar children = new[]\\n{\\n    new NestedChild(\\\"A\\\", \\\"ValueA\\\"),\\n    new NestedChild(\\\"B\\\", \\\"ValueB\\\"),\\n    new NestedChild(\\\"C\\\", \\\"ValueC\\\"),\\n    new NestedChild(\\\"D\\\", \\\"ValueD\\\"),\\n    new NestedChild(\\\"E\\\", \\\"ValueE\\\"),\\n    new NestedChild(\\\"F\\\", \\\"ValueF\\\")\\n};\\n\\nvar parents = new[]\\n{\\n    new ClassWithNestedObservableCollection(1, new[] { children[0], children[1] }),\\n    new ClassWithNestedObservableCollection(2, new[] { children[2], children[3] }),\\n    new ClassWithNestedObservableCollection(3, new[] { children[4] })\\n};\\n\\nusing (var source = new SourceCache<ClassWithNestedObservableCollection, int>(x => x.Id))\\nusing (var sut = source\\n        .Connect()\\n        .AutoRefreshOnObservable(self => self.Children.ToObservableChangeSet())\\n            // The refresh is triggered when the observable receives a notification.\\n        .TransformMany(\\n            parent => parent.Children.Select(c => new ProjectedNestedChild(parent, c)), \\n            c => c.Child.Name)\\n                // parent.Children\\uC774 ProjectedNestedChild\\uC73C\\uB85C new form\\uB41C \\uAC83\\uC744 \\n                // c.Child.Name\\uC744 \\uAE30\\uC900\\uC73C\\uB85C flat ObservableCache\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\n        .AsObservableCache())\\n{\\n    source.AddOrUpdate(parents);\\n\\n    Console.WriteLine(sut.Count);  // 5\\n    foreach (var item in sut.Items)\\n        {\\n            // parents.SelectMany(\\n            //    p => p.children.Take(5).Select(c => new ProjectedNestedChild(p, c)));\\n            Console.WriteLine(item.Child.Value);\\n        }\\n\\n    // add a child to the observable collection\\n    parents[2].Children.Add(children[5]);\\n\\n    Console.WriteLine(sut.Count);  // 6\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(p => p.children.Select(c => new ProjectedNestedChild(p, c)));\\n\\n    // remove a parent and check children have moved\\n    source.RemoveKey(1);\\n    Console.WriteLine(sut.Count);  // 4\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(\\n    //    p => p.children.skip(1).Select(c => new ProjectedNestedChild(p, c)));\\n\\n    // add a parent and check items have been added back in\\n    source.AddOrUpdate(parents[0]);\\n\\n    Console.WriteLine(sut.Count);  // 6\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(p => p.children.Select(c => new ProjectedNestedChild(p, c)));\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"AutoRefreshOnObservable()\\n// Automatically refresh downstream operator. \\n// The refresh is triggered when the observable receives a notification.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    AutoRefreshOnObservable<TObject, TKey, TAny>(\\n        this IObservable<IChangeSet<TObject, TKey>> source, \\n        Func<TObject, IObservable<TAny>> reevaluator, \\n        TimeSpan? changeSetBuffer = null, \\n        IScheduler? scheduler = null) where TKey : notnull;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// 4. Creating Observable Change Sets : IObservable<IChangeSet<TObject,TKey>>\\n\\nToObservableChangeSet()  \\n// Convert an observable collection into an observable change set.\\n\\n// 4.2 from an Rx Observable.\\n//     form an Observable Collection.\\n//     from an Binding List.\\nIObservable<IChangeSet<TObject,TKey>> \\n    IObservable<IEnumerable<T>>.ToObservableChangeSet(t=> t.key);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Flatten Observable Collection With Projection From ObservableList\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class ProjectNestedChildEqualityComparer : IEqualityComparer<ProjectedNestedChild>\\n{\\n    public bool Equals(ProjectedNestedChild x, ProjectedNestedChild y)\\n    {\\n        if (x == null || y == null)\\n        {\\n            return false;\\n        }\\n\\n        return x.Child.Name == y.Child.Name;\\n    }\\n\\n    public int GetHashCode([DisallowNull] ProjectedNestedChild obj)\\n    {\\n        return obj.Child.Name.GetHashCode();\\n    }\\n}\\n\\n#\\n\\nusing (var source = new SourceList<ClassWithNestedObservableCollection>())\\nusing (var sut = source\\n        .Connect()\\n        .AutoRefreshOnObservable(self => self.Children.ToObservableChangeSet())\\n        .TransformMany(\\n            parent => parent.Children.Select(c => new ProjectedNestedChild(parent, c)), \\n            new ProjectNestedChildEqualityComparer())\\n            // IEqualityComparer<ProjectedNestedChild>\\uB97C \\n            // \\uC774\\uC6A9\\uD574 flat ObservableList\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\n        .AsObservableList())\\n{\\n    source.AddRange(parents);\\n\\n    Console.WriteLine(sut.Count);  // 5\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(\\n    //    p => p.Children.Take(5).Select(c => new ProjectedNestedChild(p, c)))\\n\\n    // add a child to the observable collection\\n    parents[2].Children.Add(children[5]);\\n    Console.WriteLine(sut.Count);  // 6\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(p => p.Children.Select(c => new ProjectedNestedChild(p, c)))\\n\\n    // remove a parent and check children have moved\\n    source.Remove(parents[0]);\\n    Console.WriteLine(sut.Count);  // 4\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(\\n    //    p => p.Children.Skip(1).Select(c => new ProjectedNestedChild(p, c)))\\n\\n    // add a parent and check items have been added back in\\n    source.Add(parents[0]);\\n\\n    Console.WriteLine(sut.Count);  // 6\\n    Console.WriteLine(sut.Items);\\n    // parents.SelectMany(p => p.Children.Select(c => new ProjectedNestedChild(p, c)))\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}