{"componentChunkName":"component---src-templates-archive-post-js","path":"/dynamicData/DynamicData-Aggregation/","result":{"data":{"mdx":{"id":"3c686883-d3d7-5c77-b5c3-818fbfb23eb1","excerpt":"1. Aggregation Available aggregations : Max, Min, Avg, StdDev, Count, Sum.   For custom aggregations use : source.Connect().ToCollection().Select(items=>...);","frontmatter":{"title":"Dynamic Data - Aggregation","date":"January 12, 2021","tag":"DynamicData, Aggregations, StartWithEmpty()"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Aggregation\",\n  \"date\": \"2021-01-12 04\",\n  \"tag\": \"DynamicData, Aggregations, StartWithEmpty()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Aggregation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Available aggregations : Max, Min, Avg, StdDev, Count, Sum.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For custom aggregations use : source.Connect().ToCollection().Select(items=>\\u2026);\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public Aggregations(IObservableList<int> source)\\n{\\n    var shared = source\\n        .Connect()\\n        // \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C dd\\uB294 change set\\uC774 \\uBE44\\uC5B4\\uC788\\uC744 \\uB54C \\uC989, \\n        // \\uC18C\\uC2A4\\uC5D0 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC744 \\uB54C \\uAD6C\\uB3C5\\uC2DC \\uC54C\\uB9AC\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n        // \\uC774\\uB294 \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uB4DC \\uB420\\uB54C\\uAE4C\\uC9C0 \\uACB0\\uACFC\\uAC00 \\uACC4\\uC0B0\\uB418\\uC9C0 \\uC54A\\uC74C\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4.\\n        // \\uADF8\\uB7EC\\uB098 \\uB370\\uC774\\uD130 \\uC18C\\uC2A4\\uAC00 \\uBE44\\uC5B4 \\uC788\\uC5B4\\uB3C4 \\uACB0\\uACFC\\uAC00 \\uD544\\uC694\\uD558\\uBA74 StartWithEmpty()\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\\n        .StartWithEmpty()\\n        // use standard rx Publish(), Connect() to share published changesets\\n        .Publish();\\n\\n    this.cleanUp = new CompositeDisposable\\n    (\\n        shared.Maximum(i => i).Subscribe(max => Max = max),\\n        shared.Minimum(i => i).Subscribe(min => Min = min),\\n        shared.Avg(i => i).Subscribe(avg => Avg = avg),\\n\\n        shared.Connect()\\n    );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/dynamicData/DynamicData-Aggregation/","previous":{"id":"5560aba8-303d-541a-9c2d-ad7e5bc11e97","fields":{"slug":"/dynamicData/DynamicData-AutoRefresh/"},"frontmatter":{"title":"Dynamic Data - AutoRefresh"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - AutoRefresh\",\n  \"date\": \"2021-01-12 03\",\n  \"tag\": \"DynamicData, AutoRefresh(), Count(), AutoRefresh For PropertyChanges\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. AutoRefresh For PropertyChanges\"), mdx(\"p\", null, \"observable cache\\uB294 \\uBCC0\\uACBD \\uAC00\\uB2A5\\uD55C \\uC18D\\uC131 \\uAC1C\\uB150\\uC774 \\uC5C6\\uB2E4. It only knows about adds, updates and removes.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7EC\\uB098 \\uC0C8\\uB85C \\uACE0\\uCE68\\uC758 \\uAC1C\\uB150\\uC774 \\uC788\\uB2E4. \\uC774\\uB294 \\uACE0\\uC720, \\uC815\\uB82C, \\uD544\\uD130\\uB9C1 \\uBC0F \\uADF8\\uB8F9\\uD654(distinct, sort, filter and grouping)\\uC640\\n\\uAC19\\uC740 downstream operators\\uC5D0 \\uC7AC\\uD3C9\\uAC00\\uB97C \\uC9C0\\uC2DC\\uD558\\uB294 \\uC218\\uB3D9 \\uBC29\\uBC95\\uC774\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public IObservable<int> DistinctCount { get; }\\n\\npublic AutoRefreshForPropertyChanges(IObservableCache<MutableThing, int> dataSource)\\n{\\n    /*\\n     * \\uAC15\\uC81C\\uB85C \\uC0C8\\uB85C\\uACE0\\uCE68\\uD560 \\uB54C, \\uC218\\uB3D9\\uC73C\\uB85C \\uD2B8\\uB9AC\\uAC70\\uD574\\uC57C\\uD55C\\uB2E4.\\n     * In this case property changes are monitored\\n     * and the data source sends a refresh signal to all downstream operators.\\n     */\\n    DistinctCount = dataSource\\n        .Connect()\\n        .AutoRefresh(t => t.Value)\\n        .Count();\\n}\\n\\n#\\n\\nusing (var cache = new SourceCache<MutableThing, int>(m => m.Id))\\n{\\n    int count = 0;\\n    var sut = new AutoRefreshForPropertyChanges(cache);\\n    sut.DistinctCount.Subscribe(x => count = x);\\n\\n    cache.AddOrUpdate(items);\\n    Console.WriteLine(count);  // 4\\n\\n    // check remove works\\n    cache.RemoveKey(4);\\n    Console.WriteLine(count);   // 2\\n\\n    // check add works\\n    cache.AddOrUpdate(new MutableThing(10, \\\"z\\\"));\\n    Console.WriteLine(count);  // 3\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"ObservableCacheEx.AutoRefresh();\\n// Automatically refresh downstream operators when properties change.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    IObservable<IChangeSet<TObject, TKey>>.AutoRefresh<TObject, TKey, TProperty>()\\n    \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Observable.Count();\\n// observable sequence\\uC758 \\uCD1D \\uC694\\uC18C \\uC218\\uB97C \\uB098\\uD0C0\\uB0B4\\uB294 System.Int32\\uB97C \\uD3EC\\uD568\\uD558\\uB294 \\n// observable sequence\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\\n\\nIObservable<int>\\n    IObservable<IChangeSet<TObject, TKey>>.Count<IChangeSet<TObject, TKey>>();\\n    \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"defeafcb-224e-5ca4-9cd1-657d0705e244","fields":{"slug":"/dynamicData/DynamicData-Switch/"},"frontmatter":{"title":"Dynamic Data - Switch"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Switch\",\n  \"date\": \"2021-01-12 05\",\n  \"tag\": \"DynamicData, Switch()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Switch\"), mdx(\"p\", null, \"\\uB370\\uC774\\uD130\\uC758 \\uC804\\uD658\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IObservable<IChangeSet<T>>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IObservable<IObservableList<T>>\"), \"\\uC5D0\\uC11C \\uC791\\uB3D9\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The same concept applies to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ObservableCache\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public IObservableList<int> DataSource { get; }\\n\\npublic SwitchDataSource(IObservableList<int> sourceA, IObservableList<int> sourceB)\\n{\\n    DataSource = this\\n        .WhenValueChanged(@this => @this.Option)\\n        .Select(opt => opt == SwitchDataSoruceOption.SourceA ? sourceA : sourceB)\\n        .Switch()  // this is dynamic data overload of Switch()\\n        .AsObservableList();\\n\\n    this.cleanUp = DataSource;\\n}\\n\\n#\\n\\npublic class SourceList<T> : ISourceList<T>, IObservableList<T>, IDisposable\\npublic class SourceCache<TObject, TKey> : ISourceCache<TObject, TKey>, \\n    IObservableCache<TObject, TKey>, IConnectableCache<TObject, TKey>, IDisposable \\n    where TKey : notnull\\n\\n#\\n\\nusing (var listA = new SourceList<int>())\\nusing (var listB = new SourceList<int>())\\nusing (var sut = new SwitchDataSource.SwitchDataSource(listA, listB))\\n{\\n    var oddNumbers = Enumerable\\n        .Range(1, 10000)\\n        .Where(i => i % 2 == 1).ToArray();\\n    var evenNumbers = Enumerable\\n        .Range(1, 10000)\\n        .Where(i => i % 2 == 2).ToArray();\\n\\n    listA.AddRange(oddNumbers);\\n    listB.AddRange(evenNumbers);\\n\\n    sut.Option = SwitchDataSource.SwitchDataSoruceOption.SourceB;\\n    foreach (var item in sut.DataSource.Items)\\n    {\\n        Console.WriteLine(item);  // evenNumbers\\n    }\\n\\n    sut.Option = SwitchDataSource.SwitchDataSoruceOption.SourceA;\\n    foreach (var item in sut.DataSource.Items)\\n    {\\n        Console.WriteLine(item);  // oddNumbers\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}