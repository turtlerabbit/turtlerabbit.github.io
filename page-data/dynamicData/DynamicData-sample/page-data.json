{"componentChunkName":"component---src-templates-archive-post-js","path":"/dynamicData/DynamicData-sample/","result":{"data":{"mdx":{"id":"b2643aa5-650d-53dd-838d-85e83a9cb8ab","excerpt":"@Service layer IEnumerable < T >   public static class Enumerable   IEnumerable < int >  Enumerable.Range(int start, int count)   IEnumerable < TResultâ€¦","frontmatter":{"title":"Dynamic Data - Sample","date":"January 10, 2021","tag":"DynamicData, sample, IEnumerable, ObservableChangeSet, IChangeSet, ISourceCache, IConnectableObservable, IObservableCache"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Sample\",\n  \"date\": \"2021-01-10 03\",\n  \"tag\": \"DynamicData, sample, IEnumerable, ObservableChangeSet, IChangeSet, ISourceCache, IConnectableObservable, IObservableCache\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"@Service layer\"), mdx(\"h1\", null), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IEnumerable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"T\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public static class Enumerable  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IEnumerable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" Enumerable.Range(int start, int count)  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IEnumerable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TResult\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" Select\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TSource, TResult\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"(this IEnumerable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TSource\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" source, Func\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TSource, TResult\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" selector); \")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public IEnumerable<Trade> Generate(int numberToGenerate)\\n{\\n    return Enumerable\\n        .Range(1, numberToGenerate)\\n        .Select(_ => NewTrade())\\n        .ToArray();\\n\\n    Trade NewTrade()\\n    {\\n        ...\\n        return new Trade(id, customer, price);\\n    }\\n}\\n\")), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ObservableChangeSet.Create\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TObject,TKey\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \"();\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Creating Observable Change Sets\\nprivate IObservable<IChangeSet<Trade, long>> GenerateTradesAndMaintainCache()\\n{\\n    return ObservableChangeSet.Create<Trade, long>(cache =>\\n    {\\n        cache.AddOrUpdate(this.tradeGenerator.Generate(5));\\n\\n        return cleanUp;\\n    }, trade => trade.Id);\\n}\\n\")), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"T\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \".Publish();  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uAE30\\uBCF8 \\uC2DC\\uD000\\uC2A4\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC77C \\uAD6C\\uB3C5\\uC744 \\uACF5\\uC720\\uD558\\uB294\"), \"(shares a single subscription) \\uC5F0\\uACB0 \\uAC00\\uB2A5\\uD55C \\uAD00\\uCC30 \\uAC00\\uB2A5 \\uC2DC\\uD000\\uC2A4(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IConnectableObservable<IChangeSet<Trade, int>>\"), \")\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"IConnectableObservable<IChangeSet<Trade, int>> \\n    IObservable<IChangeSet<Trade, int>>.Publish();\\n\")), mdx(\"p\", null, \"publish() \\uC5F0\\uC0B0\\uC790\\uB294 \\uBCF4\\uD1B5\\uC758 Observable\\uC744 ConnectableObservable\\uB85C \\uBCC0\\uD658\\uD574 \\uC900\\uB2E4.\\nConnectableObservable\\uC740 Subscriber\\uAC00 \\uC788\\uC5B4\\uB3C4 connect()\\uB97C \\uD638\\uCD9C\\uD558\\uAE30 \\uC804\\uAE4C\\uC9C0\\uB294 \\uC544\\uC774\\uD15C\\uC744 \\uBC29\\uCD9C\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4. connect()\\uB97C \\uD638\\uCD9C\\uD558\\uACE0 \\uB098\\uC11C\\uC57C \\uC544\\uC774\\uD15C\\uC744 \\uBC29\\uCD9C\\uD558\\uAE30 \\uC2DC\\uC791\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IConnectableObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"T\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \".AsObservableCache();  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Converts the source \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"to a readonly observable cache.\"), \"  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatically refresh downstream operators when properties change.  \")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"IObservableCache<Trade, int> \\n    IConnectableObservable<IChangeSet<Trade, int>>.AsObservableCache();\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IObservableCache\"), \" : \\uBA54\\uBAA8\\uB9AC \\uB370\\uC774\\uD0C0\\uB97C \\uAD00\\uCC30\\uD558\\uACE0 \\uCFFC\\uB9AC\\uD558\\uAE30 \\uC704\\uD55C \\uCE90\\uC26C\\uC774\\uB2E4.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \" public interface IObservableCache<TObject, TKey>\\n    : IConnectableCache<TObject, TKey>, IDisposable where TKey : notnull\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"@ViewModel layer\"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class LiveTrade : IDisposable\\n{\\n    private readonly IDisposable cleanUp;\\n    private readonly ReadOnlyObservableCollection<TradeProxy> data;\\n    public ReadOnlyObservableCollection<TradeProxy> Data => this.data;\\n\\n    public LiveTrade(TradeService tradeService)\\n    {\\n        var loader = tradeService\\n            .All\\n            .Connect()\\n            .Transform(trade => new TradeProxy(trade))\\n            .ObserveOn(Scheduler.CurrentThread)\\n            .Bind(out this.data)\\n            .DisposeMany()\\n            .Subscribe();\\n\\n        this.cleanUp = new CompositeDisposable(loader);\\n    }\\n\\n    public void Dispose()\\n    {\\n        this.cleanUp.Dispose();\\n    }\\n}\\n\")), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IConnectableCache\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"Trade, int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \".Connect() :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Returns a filtered stream of cache changes preceded with the initial filtered state.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value : An observable that emits the change set  \")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \" IObservable<IChangeSet<Trede, int>> IConnectableCache<Trade, int>.Connect();\\n\")), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 6\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"IChangeSet\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"Trede, int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">>\"), \".Transform() :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Projects each update item to a new form using the specified transform function.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value : A transformd update collection.  \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 7\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"IChangeSet\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TradeProxy, int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">>\"), \".ObserveOn() :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wraps the source sequence \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"in order to run its observer callbacks on the specified scheduler\"), \".  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value : The source sequence whose observations happen on the specified scheduler.  \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 8\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"IChangeSet\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TradeProxy, int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">>\"), \".Bind() :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binds the results \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"to the specified readonly observable collection\"), \" using the default update algorithm.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value : An observable which will emit change sets. \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 9\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ReadOnlyObservableCollection\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TradeProxy\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Represents a read-only ObservableCollection\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"T\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \". \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 10\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"IChangeSet\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TradeProxy, int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">>\"), \".DisposeMany() :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Disposes each item when no longer required.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Individual items are disposed when removed or replaced.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All items are disposed when the stream is disposed.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value : A continuation of the original stream.  \")))), mdx(\"h1\", null), mdx(\"ol\", {\n    \"start\": 11\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IDisposable IObservable\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"IChangeSet\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<\"), \"TradeProxy, int\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">>\"), \".Subscribe() :  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subscribes to the observable sequence without specifying any handlers.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This method can be used to evaluate the observable sequence for its side-effects only.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value : IDisposable object used \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"to unsubscribe from the observable sequence\"), \".  \")))), mdx(\"h1\", null), mdx(\"h2\", null, \"\\uC694\\uC57D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// IEnumerable<T>\\nIEnumerable<Trade> Generate(int numberToGenerate)\\n\\n\\n// Creating Observable Change Sets : IObservable<IChangeSet<TObject,TKey>>\\nIObservable<IChangeSet<Trade,long>> \\n    ObservableChangeSet.Create<Trade, long>(ISourceCache<Trade, long> =>\\n    {\\n        ISourceCache<Trade, long>.AddOrUpdate(Generate());\\n    }, trade = > trade.Id);\\n\\n\\n// \\uAE30\\uBCF8 \\uC2DC\\uD000\\uC2A4\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC77C \\uAD6C\\uB3C5\\uC744 \\uACF5\\uC720\\uD558\\uAE30 \\uC704\\uD574\\nIConnectableObservable<IChangeSet<Trade, long>> \\n    IObservable<IChangeSet<Trade, long>>.Publish();\\n\\n\\n// \\uC77D\\uAE30\\uC804\\uC6A9\\uC73C\\uB85C \\uD30C\\uC0DD \\uCEEC\\uB809\\uC158\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uB178\\uCD9C\\uD558\\uAE30 \\uC704\\uD574\\nIObservableCache<Trade, long> \\n    IConnectableObservable<IChangeSet<Trade, long>>.AsObservableCache();\\n\\n\\n// IObservableCache\\uB294 IConnectableCache\\uB97C \\uC0C1\\uC18D\\uBC1B\\uC740 \\uBAA8\\uC2B5\\uC774\\uB2E4.\\npublic interface IObservableCache<TObject, TKey>\\n    : IConnectableCache<TObject, TKey>, IDisposable where TKey : notnull\\n\\n\\n// \\uC77D\\uAE30\\uC804\\uC6A9\\uC73C\\uB85C \\uB178\\uCD9C\\uB41C \\uC678\\uBD80\\uC5D0\\uC11C Connect()\\uD568\\uC73C\\uB85C\\uC368 \\n// change set\\uC744 \\uBC29\\uCD9C\\uD558\\uB294 observable\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\\nIObservable<IChangeSet<Trede, long>> \\n    IConnectableCache<Trade, long>.Connect();\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/DynamicData/tree/main/TradeConsoleApp\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/dynamicData/DynamicData-sample/","previous":{"id":"673e4fc7-6275-5ae4-abf2-6a3c73d180c7","fields":{"slug":"/dynamicData/DynamicData(2)/"},"frontmatter":{"title":"Dynamic Data - Consuming Observable Change Sets"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Consuming Observable Change Sets\",\n  \"date\": \"2021-01-10 02\",\n  \"tag\": \"DynamicData, SourceCache, SourceList, observable-change-sets, ToObservableChangeSet, ObservableChangeSet\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC774\\uC81C observable cache or observable list\\uB97C \\uB9CC\\uB4E4 \\uC218 \\uC788\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB2E4\\uC74C\\uC740 \\uC218\\uD589 \\uD560 \\uC218\\uC788\\uB294 \\uB2E4\\uC591\\uD55C \\uBC94\\uC704\\uB97C \\uC124\\uBA85\\uD558\\uB294 \\uBA87 \\uAC00\\uC9C0 \\uBE60\\uB978 \\uC2E4\\uD589 \\uC608\\uC81C\\uB2E4. \"), mdx(\"h1\", null), mdx(\"h3\", null, \"Create a Derived List or Cache\"), mdx(\"p\", null, \"\\uC774 \\uC608\\uC5D0\\uC11C\\uB294 observable change set\\uC5D0\\uC11C \\uD30C\\uC0DD \\uCEEC\\uB809\\uC158\\uC744 \\uB9CC\\uB4DC\\uB294 \\uBC29\\uBC95\\uC744 \\uBCF4\\uC5EC\\uC900\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Given a SourceList\\nvar myList = new SourceList<People>();\\n\\nvar oldPeople = myList\\n      .Connect()\\n      .Filter(person => person.Age > 65)  // \\uD544\\uD130\\uC5D0 \\uC801\\uC6A9\\uB41C \\uD56D\\uBAA9\\uB9CC\\uC744 \\uD3EC\\uD568\\uD558\\uB294\\n      .AsObservableList();  // \\uC0C8\\uB85C\\uC6B4 observable list\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\n\")), mdx(\"p\", null, \"\\uC774 \\uD328\\uD134\\uC740 \\uAE30\\uC874 \\uCEEC\\uB809\\uC158\\uC744 \\uC218\\uC815 \\uD55C \\uB2E4\\uC74C \\uC218\\uC815 \\uB41C \\uCEEC\\uB809\\uC158\\uC744 \\uC18C\\uBE44\\uC790\\uC5D0\\uAC8C \\uB178\\uCD9C\\uD558\\uB824\\uB294\\n\\uACBD\\uC6B0 \\uB9E4\\uC6B0 \\uC720\\uC6A9\\uD558\\uB2E4.\"), mdx(\"h1\", null), mdx(\"p\", null, \"The same pattern can be used with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SourceCache\"), \" by using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".AsObservableCache()\"), \" to create derived caches.\"), mdx(\"h1\", null), mdx(\"p\", null, \"As an alternative to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".Bind(out collection)\"), \" you can use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".BindToObservableList(out observableList)\"), \" for both SourceList & SourceCache.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uCEEC\\uB809\\uC158\\uC774 \\uC0C8\\uB85C \\uACE0\\uCE68 \\uC54C\\uB9BC\\uC744 \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uAE30 \\uB54C\\uBB38\\uC5D0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".AutoRefresh()\"), \"\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uC18C\\uC2A4\\uC5D0\\uC11C \\uD30C\\uC0DD \\uB41C read-only lists\\uB97C \\uAC00\\uC838 \\uC624\\uB294 \\uB370 \\uC720\\uC6A9\\uD558\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"Observing Properties of Objects in a Collection\"), mdx(\"p\", null, \"\\uCEEC\\uB809\\uC158\\uC774 INotifyPropertyChanged\\uB97C \\uAD6C\\uD604\\uD558\\uB294 \\uAC1C\\uCCB4\\uB85C \\uAD6C\\uC131\\uB41C \\uACBD\\uC6B0 \\uB2E4\\uC74C \\uC5F0\\uC0B0\\uC790\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// WhenValueChanged \\uC5F0\\uC0B0\\uC790\\uB294 \\n// \\uC9C0\\uC815\\uB41C \\uC18D\\uC131 \\uAC12\\uC774 \\uBCC0\\uACBD\\uB41C \\uACBD\\uC6B0 \\uAD00\\uCC30 \\uAC00\\uB2A5\\uD55C \\uAC12\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\\n\\nvar ageChanged = peopleDataSource\\n      .Connect()\\n      .WhenValueChanged(p => p.Age)\\n\\n#\\n\\n// WhenPropertyChanged \\uC5F0\\uC0B0\\uC790\\uB294 \\n// \\uC9C0\\uC815\\uB41C \\uC18D\\uC131\\uC774 \\uBCC0\\uACBD\\uB41C \\uACBD\\uC6B0 \\uBD80\\uBAA8 \\uAC1C\\uCCB4\\uBFD0 \\uC544\\uB2C8\\uB77C \\n// \\uC9C0\\uC815\\uB41C \\uC18D\\uC131\\uC758 \\uAC12\\uC73C\\uB85C \\uAD6C\\uC131\\uB41C \\uAD00\\uCC30 \\uAC00\\uB2A5 \\uD56D\\uBAA9\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\\n\\nvar ageChanged = peopleDataSource\\n      .Connect()\\n      .WhenPropertyChanged(p => p.Age)\\n\\n#\\n\\n// WhenAnyPropertyChanged \\uC5F0\\uC0B0\\uC790\\uB294 \\n// \\uC18D\\uC131\\uC774 \\uBCC0\\uACBD\\uB41C \\uACBD\\uC6B0 \\uAC1C\\uCCB4\\uC758 \\uAD00\\uCC30 \\uAC00\\uB2A5 \\uAC1C\\uCCB4\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\\n\\nvar personChanged = peopleDataSource\\n      .Connect()\\n      .WhenAnyPropertyChanged()\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Observing item changes\"), mdx(\"p\", null, \"\\uBC14\\uC778\\uB529\\uC740 \\uB3D9\\uC801 \\uB370\\uC774\\uD130\\uC758 \\uB9E4\\uC6B0 \\uC791\\uC740 \\uBD80\\uBD84\\uC774\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC704\\uC758 \\uC54C\\uB9BC \\uC18D\\uC131 \\uBCC0\\uACBD \\uC624\\uBC84\\uB85C\\uB4DC\\uB294 \\uBC14\\uC778\\uB529\\uC2DC\\uC758 \\uC608\\uC77C\\uBFD0\\uC774\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC790\\uC2DD Observable\\uC774 \\uC788\\uB294 \\uB3C4\\uBA54\\uC778 \\uAC1C\\uCCB4\\uAC00 \\uC788\\uB294 \\uACBD\\uC6B0 \\uCEEC\\uB809\\uC158 \\uBCC0\\uACBD\\uC5D0 \\uB530\\uB77C\\n\\uD56D\\uBAA9\\uC744 \\uAD6C\\uB3C5 \\uBC0F \\uAD6C\\uB3C5 \\uCDE8\\uC18C\\uD558\\uB294 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MergeMany()\"), \"\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// MergeMany \\uC5F0\\uC0B0\\uC790\\n\\nvar myoperation = somedynamicdatasource\\n      .Connect()\\n      .MergeMany(trade => trade.SomeObservable());\\n        // \\uCEEC\\uB809\\uC158\\uC774 \\uBCC0\\uACBD\\uB418\\uBA74 SomeObservable\\uC774 \\uC5F0\\uACB0 \\uBC0F \\uC5F0\\uACB0 \\uD574\\uC81C\\uB41C\\uB2E4.\\n\\n\")), mdx(\"h3\", null, \"Filtering\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Filter the observable change set by using the Filter operator\\n\\nvar myPeople = new SourceList<People>();\\nvar myPeopleObservable = myPeople.Connect();\\n\\nvar myFilteredObservable = myPeopleObservable.Filter(person => person.Age > 50);\\n\\n#\\n\\nIObservable<Func<Person,bool>> observablePredicate=...;\\nvar myFilteredObservable = myPeopleObservable.Filter(observablePredicate);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Sorting\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Sort the observable change set by using the Sort operator\\n\\nvar myPeople = new SourceList<People>();\\nvar myPeopleObservable = myPeople.Connect();\\n\\nvar mySortedObservable = myPeopleObservable\\n      .Sort(SortExpressionComparer\\n      .Ascending(p => p.Age); \\n\\n#\\n\\nIObservable<IComparer<Person>> observableComparer=...;\\nvar mySortedObservable = myPeopleObservable.Sort(observableComparer);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Grouping\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// GroupOn \\uC5F0\\uC0B0\\uC790\\uB294 group selector\\uC5D0 \\uB530\\uB77C \\uC9C0\\uC815\\uB41C \\uADF8\\uB8F9\\uC744 \\uC0AC\\uC804 \\uCE90\\uC2DC\\uD55C\\uB2E4.\\nvar myOperation = personChangeSet.GroupOn(person => person.Status)\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Transformation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// The Transform operator allows you to map objects from \\n// the observable change set to another object\\n\\nvar myPeople = new SourceList<People>();\\nvar myPeopleObservable = myPeople.Connect();\\n\\nvar myTransformedObservable = \\n        myPeopleObservable.Transform(person => new PersonProxy(person));\\n\\n#\\n\\n// The TransformToTree operator allows you to create a fully formed reactive tree \\n// (only available for observable cache)\\n\\nvar myPeople = new SourceCache<Person, string>(p => p.Name);\\nvar myTransformedObservable = myPeople\\n        .Connect()\\n        .TransformToTree(person => person.BossId);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Aggregation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// The Count, Max, Min, Avg, and StdDev operators allow you \\n// to perform aggregate functions on observable change sets\\n\\nvar myPeople = new SourceList<People>();\\nvar myPeopleObservable = myPeople.Connect();\\n\\nvar countObservable =    myPeopleObservable.Count();\\nvar maxObservable =      myPeopleObservable.Max(p => p.Age);\\nvar minObservable =      myPeopleObservable.Min(p => p.Age);\\nvar stdDevObservable =   myPeopleObservable.StdDev(p => p.Age);\\nvar avgObservable =      myPeopleObservable.Avg(p => p.Age);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Logical Operators\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// The And, Or, Xor and Except operators allow you \\n// to perform logical operations on observable change sets\\n\\nvar peopleA = new SourceCache<Person,string>(p => p.Name);\\nvar peopleB = new SourceCache<Person,string>(p => p.Name);\\n\\nvar observableA = peopleA.Connect();\\nvar observableB = peopleB.Connect();\\n\\nvar inBoth = observableA.And(observableB);\\nvar inEither= observableA.Or(observableB);\\nvar inOnlyOne= observableA.Xor(observableB);\\nvar inAandNotinB = observableA.Except(observableB);\\n\\n#\\n\\n// A recent and very powerful feature is dynamic logical operators.\\n\\nvar list1 = new SourceList<int>();\\nvar list2 = new SourceList<int>();\\nvar list3  = new SourceList<int>();\\n    \\nvar combined = new SourceList<ISourceList<int>>();\\n\\n//child lists can be added or removed any time\\ncombined.Add(list1);\\ncombined.Add(list2);\\ncombined.Add(list3);\\n\\n//The operators look after themselves \\nvar inAll = combined.And();\\nvar inAny = combined.Or();\\nvar inOnlyOne= combined.Xor();\\nvar inFirstAndNotAnyOther = combined.Except();\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Disposal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// The DisposeMany operator\\uB294 \\n// observable stream\\uC5D0\\uC11C \\uC81C\\uAC70 \\uB420 \\uB54C \\uAC1C\\uCCB4\\uAC00 \\uC0AD\\uC81C\\uB418\\uB3C4\\uB85D \\uD55C\\uB2E4.\\n\\nvar myPeople = new SourceList<People>();\\nvar myPeopleObservable = myPeople.Connect();\\n\\nvar myTransformedObservable = myPeopleObservable\\n      .Transform(person => new DisposablePersonProxy(person))\\n      .DisposeMany(); // \\uBCF4\\uD1B5 transform function\\uC774 \\uC77C\\uD68C\\uC6A9 \\uAC1C\\uCCB4\\uB97C \\uB9CC\\uB4E4 \\uB54C \\uC0AC\\uC6A9\\uB41C\\uB2E4.\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Distinct Values\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// DistinctValues \\uC5F0\\uC0B0\\uC790\\uB294 \\uAE30\\uBCF8 \\uCEEC\\uB809\\uC158\\uC5D0\\uC11C \\uACE0\\uC720 \\uD55C \\uAC12\\uC744 \\uC120\\uD0DD\\uD55C\\uB2E4.\\n\\nvar myPeople = new SourceList<People>();\\nvar myPeopleObservable = myPeople.Connect();\\n\\nvar myDistinctObservable = \\n      myPeopleObservable.DistinctValues(person => person.Age);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"Virtualisation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// index \\uBC0F segment size\\uBCC4\\uB85C \\uC81C\\uD55C \\uD560 \\uB370\\uC774\\uD130 \\uC2DC\\uAC01\\uD654\\n\\nIObservable<IVirtualRequest> request; //request stream\\nvar virtualisedStream = someDynamicDataSource.Virtualise(request)\\n\\n#\\n\\n// Visualise data to restrict by index and page size\\n\\nIObservable<IPageRequest> request; //request stream\\nvar pagedStream = someDynamicDataSource.Page(request)\\n\\n#\\n// \\uC704 \\uC911 \\uD558\\uB098\\uC5D0\\uC11C \\uC694\\uCCAD \\uC2A4\\uD2B8\\uB9BC\\uC774 \\uBCC0\\uACBD\\uB418\\uBA74 \\uACB0\\uACFC\\uAC00 \\uC7AC\\uD3C9\\uAC00\\uB41C\\uB2E4.\\n\\nvar topStream = someDynamicDataSource.Top(10) // 'n'\\uD56D\\uBAA9\\uACFC \\uC77C\\uCE58\\uD558\\uB294 \\uD56D\\uBAA9 \\uBC18\\uD658\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"192f8548-67e9-512b-840b-e2d8fa1df87d","fields":{"slug":"/dynamicData/DynamicData-Creation/"},"frontmatter":{"title":"Dynamic Data - Change Set Creation"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic Data - Change Set Creation\",\n  \"date\": \"2021-01-12 01\",\n  \"tag\": \"DynamicData, SourceList, SourceCache, ObservableChangeSet, Task, Reloadable, Switch(), EditDiff(), RefCount(), Retry()\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"h3\", null, \"1. FromObservable\"), mdx(\"p\", null, \"2\\uAC1C\\uC758 observables\\uB97C \\uBC1B\\uC544 \\uD558\\uB098\\uC758 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IObservable<IChangeSet<T, TKey>>\"), \"\\uC744 \\uB9CC\\uB4E4\\uC5B4 \\uBC18\\uD658\\uD55C\\uB2E4.  \"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// BehaviorSubject : \\uAC00\\uC7A5 \\uB9C8\\uC9C0\\uB9C9\\uC758 \\uAC12(\\uB370\\uC774\\uD130 \\uC18C\\uC2A4)\\uC744 \\uCE90\\uC2F1\\uD574\\uC11C \\uBCF4\\uC5EC\\uC8FC\\uB294 subject.\\n// \\uB9CC\\uC57D \\uB9C8\\uC9C0\\uB9C9\\uC758 1\\uAC1C\\uC758 \\uC774\\uBCA4\\uD2B8\\uB97C \\uBC30\\uCD9C\\uD558\\uACE0 \\uC2F6\\uB2E4\\uBA74 BehaviorSubject\\uB97C \\uC0AC\\uC6A9.\\nvar initial = new BehaviorSubject<IEnumerable<DataClass>>(Generator.Generate(5));\\nvar subscriptions = new Subject<DataClass>();\\n\\n#\\n\\nreturn ObservableChangeSet.Create<DataClass, long>(cache =>\\n{\\n    // in an enterprise app, \\n    // would have to account for the gap between load and subscribe\\n    var initialSubscriber = initialLoad\\n        .Take(1)\\n        .Subscribe(cache.AddOrUpdate);\\n\\n    var subscriber = subscriptions\\n        .Subscribe(cache.AddOrUpdate);\\n\\n    return new CompositeDisposable(initialSubscriber, subscriber);\\n}, DataClass => DataClass.Id);\\n\\n#\\n\\nsubscriptions.OnNext(newItem); // count: 6\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"2. FromTask\"), mdx(\"p\", null, \"Create an observable change set from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"return ObservableChangeSet.Create<DataClass, long>(async cache =>\\n{\\n    var items = await LoadFromTask();\\n    cache.AddOrUpdate(items);\\n    return () => { };\\n}, DataClass => DataClass.Id); \\n\\n#\\n\\npublic static Task<IEnumerable<DataClass>> LoadFromTask()\\n{\\n    return Task.FromResult(Generator.Generate(6));\\n}\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Reloadable\"), mdx(\"p\", null, \"DynamicData\\uC758 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Switch()\"), \" \\uC5F0\\uC0B0\\uC790\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uBC18\\uBCF5\\uC801\\uC73C\\uB85C data\\uB97C \\uB2E4\\uC2DC \\uB85C\\uB4DC\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Switch()  // \\uC774\\uC804 data\\uB97C \\uC9C0\\uC6B0\\uACE0 \\uC0C8\\uB85C\\uC774 \\uB85C\\uB4DC\\uB41C data\\uB97C \\uCD94\\uAC00\\uD558\\uB294 \\uAE30\\uB2A5\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    Switch<TObject, TKey>(this IObservable<IObservableCache<TObject, TKey>> sources);\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var loader = new Subject<Unit>();\\nint loadCount = 0;\\n\\n#\\n\\npublic static IObservable<IChangeSet<DataClass, long>>\\n    Reloadable(IObservable<Unit> loadObservable)\\n{\\n    return loadObservable\\n        .StartWith(Unit.Default)\\n        .Select(_ => FromTask())\\n        .Switch();\\n}\\n\\n#\\n\\nChangeSetCreation\\n    .Reloadable(loader)\\n    .Do(Change => loadCount++)\\n    .AsObservableCache()\\n\\nloader.OnNext(Unit.Default);\\n\\n// the count will be 3 rather than 2 \\n// because a .Clear() is first called (\\uC774\\uC804 \\uB370\\uC774\\uD130\\uB97C \\uBAA8\\uB4DC \\uC9C0\\uC6B0\\uACE0)\\n// when an observable change set is switched\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"4. Reloadable With EditDiff\"), mdx(\"p\", null, \"\\uB178\\uC774\\uC988\\uB97C \\uD06C\\uAC8C \\uC904\\uC77C \\uC218 \\uC788\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\uBD88\\uD544\\uC694\\uD55C \\uC5C5\\uB370\\uC774\\uD2B8\\uB97C \\uC608\\uBC29\"), \"\\uD558\\uAE30 \\uC704\\uD574\\n\\uC774\\uC804 \\uB85C\\uB4DC\\uC640\\uC758 diff set\\uB97C \\uACC4\\uC0B0\\uD558\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISourceCache<TObject, TKey>.EditDiff()\"), \"\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC\\n\\uB2E4\\uC2DC \\uB85C\\uB4DC\\uD558\\uACE0 \\uBAA9\\uB85D\\uC744 \\uC720\\uC9C0\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var reloader = new Subject<Unit>();\\nint loadCount = 0;\\nIChangeSet<DataClass, long> lastChangeSet = null;\\n\\nTask<IEnumerable<DataClass>> Loader()\\n{\\n    loadCount++;\\n    return Task.FromResult(loadCount == 1\\n        ? Generator.Generate(6)\\n        : Generator.Generate(11));\\n}\\n\\n#\\n\\nreturn ObservableChangeSet.Create<DataClass, long>(cache =>\\n{\\n    return loadObservable\\n        .StartWith(Unit.Default)  // ensure inital load\\n        .SelectMany(_ => loader()) // SelectMany : From one, select 0 or more\\n        .Subscribe(items => \\n        {\\n          cache.EditDiff(items, EqualityComparer<DataClass>.Default)\\n        });\\n}, dataClass => dataClass.Id);\\n\\n#\\n\\nChangeSetCreation\\n    .ReloadableWithEditDiff(reloader, Loader)\\n    .Do(changes => lastChangeSet = changes)\\n    .AsObservableCache()\\n\\nreloader.OnNext(Unit.Default);\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"5. FromTask With RefCount\"), mdx(\"p\", null, \"\\uAD6C\\uB3C5\\uC774 \\uD558\\uB098 \\uC774\\uC0C1 \\uC788\\uB294 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\uB418\\uB294 \\uC2DC\\uD000\\uC2A4\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uAD6C\\uB3C5\\uC774 0\\uC774\\uBA74 \\uC790\\uC2E0\\uC744 \\uD574\\uC9C0\\uD558\\uACE0 \\uB2E4\\uC2DC \\uC0C8\\uB85C\\uC6B4 \\uAD6C\\uB3C5\\uC774 \\uC624\\uBA74 \\uCC98\\uC74C\\uBD80\\uD130 \\uC790\\uB3D9\\uC73C\\uB85C \\uC2DC\\uC791\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"RefCount()  // Cache equivalent to Publish().RefCount(). \\n            // The source is cached so long as there is at least 1 subscriber.\\n\\nIObservable<IChangeSet<TObject, TKey>> \\n    RefCount<TObject, TKey>(this IObservable<IChangeSet<TObject, TKey>> source);\\n\")), mdx(\"h1\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public static IObservable<IChangeSet<DataClass, long>>\\n    FromTaskWithRefCount(Func<Task<IEnumerable<DataClass>>> loader)\\n{\\n    // RefCount\\uB294 \\uD45C\\uC900 rx Publish().RefCount() \\uC791\\uC5C5\\uC758 dd \\uC624\\uBC84\\uB85C\\uB4DC\\uC774\\uB2E4.\\n    // dd\\uAC00 \\uC790\\uB3D9\\uC73C\\uB85C \\uCC98\\uB9AC\\uD558\\uBBC0\\uB85C Publish()\\uB97C \\uC0AC\\uC6A9\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n    return FromTask(loader).RefCount();            \\n}\\n\\npublic static IObservable<IChangeSet<DataClass, long>> \\n    FromTask(Func<Task<IEnumerable<DataClass>>> loader)\\n{\\n    return ObservableChangeSet.Create<DataClass, long>(async cache =>\\n    {\\n        var items = await loader();\\n        cache.AddOrUpdate(items);\\n        return () => { };\\n    }, dataClass => dataClass.Id);\\n}\\n\\n#\\n\\nint loadCount = 0;\\nTask<IEnumerable<DataClass>> Loader()\\n{\\n    loadCount++;\\n    return Task.FromResult(Generator.Generate(6));\\n}\\n\\nvar refcountSource = ChangeSetCreation.FromTaskWithRefCount(Loader);\\n\\nusing (var sut1 = refcountSource.AsObservableCache())\\nusing (var sut2 = refcountSource.AsObservableCache())\\n{\\n    Console.WriteLine(sut1.Count);\\n    Console.WriteLine(sut2.Count);\\n    // \\uAD6C\\uB3C5\\uC774 \\uD558\\uB098\\uC774\\uC0C1 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\n}\\nConsole.WriteLine(loadCount); // \\uADF8\\uB798\\uC11C loadCount\\uB294 1\\n\\n// \\uAD6C\\uB3C5 0 \\uC0C1\\uD0DC\\n\\nusing (var sut1 = refcountSource.AsObservableCache())\\nusing (var sut2 = refcountSource.AsObservableCache())\\nusing (var sut3 = refcountSource.AsObservableCache())\\nusing (var sut4 = refcountSource.AsObservableCache())\\nusing (var sut5 = refcountSource.AsObservableCache())\\n{\\n    // \\uB2E4\\uC2DC \\uC0C8\\uB85C\\uC6B4 \\uAD6C\\uB3C5\\uC73C\\uB85C \\uCC98\\uC74C\\uBD80\\uD130 \\uC790\\uB3D9\\uC73C\\uB85C \\uC2DC\\uC791.\\n    Console.WriteLine(sut1.Count);\\n    Console.WriteLine(sut2.Count);\\n    Console.WriteLine(sut3.Count);\\n    Console.WriteLine(sut4.Count);\\n    Console.WriteLine(sut5.Count);\\n    // \\uAD6C\\uB3C5\\uC774 \\uD558\\uB098\\uC774\\uC0C1 \\uD55C \\uC18C\\uC2A4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0\\n}\\nConsole.WriteLine(loadCount); // \\uADF8\\uB798\\uC11C loadCount 2\\n\")), mdx(\"h1\", null), mdx(\"h3\", null, \"6. WithRetry\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Retry()\"), \" : In an enterprise app, would probably use a backoff retry strategy\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"int loadCount = 0;\\nint failedCount = 0;\\n\\nTask<IEnumerable<DataClass>> Loader()\\n{\\n    loadCount++;\\n\\n    if (loadCount < 3)\\n    {\\n        failedCount++;\\n        throw new Exception(\\\"Failed\\\");\\n    }\\n    return Task.FromResult(Generator.Generate(6));\\n}\\n\\n#\\n\\nChangeSetCreation\\n    .FromTask(Loader)\\n    .Retry(3)\\n    .AsObservableCache()\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}