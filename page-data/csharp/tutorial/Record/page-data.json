{"componentChunkName":"component---src-templates-archive-post-js","path":"/csharp/tutorial/Record/","result":{"data":{"mdx":{"id":"9b5bcf95-cd7c-5493-a305-d07f0452fe56","excerpt":"source","frontmatter":{"title":"C# 9.0 Record","date":"January 09, 2021","tag":"csharp, tutorial, C#, 9.0, Record"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C# 9.0 Record\",\n  \"date\": \"2021-01-09 06\",\n  \"tag\": \"csharp, tutorial, C#, 9.0, Record\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"using System;\\nusing System.Collections.Generic;\\n\\n/// <summary>\\n/// Benefits of Records:\\n///  - Simple to set up\\n///  - Thread-safe\\n///  - Easy/safe to share\\n///  \\n/// When to Use Records:\\n///  - Capturing external data that doesn't change - weatherService, SWAPI.dev\\n///  - API calls\\n///  - Processing data\\n///  - Read-only data\\n///  \\n/// When not to use Records:\\n///  - When you need to change the data (Entity Framework)\\n/// \\n/// </summary>\\n\\nstatic void Main(string[] args)\\n{\\n    Record1 r1a = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Record1 r1b = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Record1 r1c = new(\\\"Sue\\\", \\\"Storm\\\");\\n\\n    Class1 c1a = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Class1 c1b = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Class1 c1c = new(\\\"Sue\\\", \\\"Storm\\\");\\n\\n    Console.WriteLine(\\\"Record Type:\\\");\\n    Console.WriteLine($\\\"To String: { r1a }\\\");\\n\\n    Console.WriteLine($\\\"Are the two objects equal: { Equals(r1a, r1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects reference equal: { ReferenceEquals(r1a, r1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects ==: { r1a == r1b }\\\");\\n    Console.WriteLine($\\\"Are the two objects !=: { r1a != r1b }\\\");\\n\\n    Console.WriteLine($\\\"Hash code of object A: { r1a.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object B: { r1b.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object C: { r1c.GetHashCode() }\\\");\\n\\n\\n    Console.WriteLine();\\n    Console.WriteLine(\\\"********************************\\\");\\n    Console.WriteLine();\\n\\n\\n    Console.WriteLine(\\\"Class Type:\\\");\\n    Console.WriteLine($\\\"To String: { c1a }\\\");\\n\\n    Console.WriteLine($\\\"Are the two objects equal: { Equals(c1a, c1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects reference equal: { ReferenceEquals(c1a, c1b) }\\\");\\n    Console.WriteLine($\\\"Are the two objects ==: { c1a == c1b }\\\");\\n    Console.WriteLine($\\\"Are the two objects !=: { c1a != c1b }\\\");\\n\\n    Console.WriteLine($\\\"Hash code of object A: { c1a.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object B: { c1b.GetHashCode() }\\\");\\n    Console.WriteLine($\\\"Hash code of object C: { c1c.GetHashCode() }\\\");\\n\\n\\n    Console.WriteLine();\\n\\n    var (fn, ln) = r1a;\\n    Console.WriteLine($\\\"The value of fn is { fn } and the value of ln is { ln }\\\");\\n\\n    Record1 r1d = r1a with\\n    {\\n        FirstName = \\\"Jon\\\"\\n    };\\n    Console.WriteLine($\\\"Jon's record: { r1d }\\\");\\n\\n    Console.WriteLine();\\n    Record2 r2a = new(\\\"Tim\\\", \\\"Corey\\\");\\n    Console.WriteLine($\\\"R2a Value: { r2a }\\\");\\n    Console.WriteLine($\\\"R2a fn: { r2a.FirstName } ln: { r2a.LastName }\\\");\\n    Console.WriteLine(r2a.SayHello());\\n}\\n\\n// a Record is just a fancy class\\n// Immutable - The values cannot be changes\\npublic record Record1(string FirstName, string LastName);\\npublic record User1(int Id, string FirstName, string LastName) : Record1(FirstName, LastName);\\n\\npublic record Record2(string FirstName, string LastName)\\n{\\n    private string firstName = FirstName;\\n    public string FirstName\\n    {\\n        get { return this.firstName.Substring(0, 1); }\\n        init { }\\n    }\\n\\n    //internal string FirstName { get; init; } = FirstName;\\n\\n    public string FullName { get => $\\\"{ FirstName } { LastName }\\\"; }\\n\\n    public string SayHello()\\n    {\\n        return $\\\"Hello { FirstName }\\\";\\n    }\\n}\\n\\npublic class Class1\\n{\\n    public string FirstName { get; init; }\\n    public string LastName { get; init; }\\n\\n    public Class1(string firstName, string lastName)\\n    {\\n        FirstName = firstName;\\n        LastName = lastName;\\n    }\\n\\n    public void Deconstruct(out string FirstName, out string LastName)\\n    {\\n        FirstName = this.FirstName;\\n        LastName = this.LastName;\\n    }\\n}\\n\\npublic class DiscoverModel\\n{\\n    public User1 LookupUser { get; set; }\\n    public int IncidentsFound { get; set; }\\n    public List<string> Incidents { get; set; }\\n}\\n\\n\\n//***************************\\n// DO NOT DO ANY OF THE BELOW\\n//***************************\\npublic record Record3\\n{\\n    public string FirstName { get; set; } // The set makes this record mutable (BAD!)\\n    public string LastName { get; set; } // The set makes this record mutable (BAD!)\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/CSharpVersion/tree/main/c%23%209.0/RecordDemoApp\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/csharp/tutorial/Record/","previous":{"id":"5c9b5947-8e9d-5d4b-9c96-5cbe6bbce042","fields":{"slug":"/csharp/tutorial/csharp-nine/"},"frontmatter":{"title":"C# 9.0"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C# 9.0\",\n  \"date\": \"2021-01-09 05\",\n  \"tag\": \"csharp, C#, tutorial, 9.0,\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//System.Console.WriteLine(\\\"Hello World!\\\"); // cw tap tap\\n#region  1.Top Level \\uAD6C\\uBB38\\n//using static System.Console;\\n//WriteLine(\\\"Hello World!\\\");\\n\\n// \\uD0D1\\uB808\\uBCA8 \\uC2A4\\uD14C\\uC774\\uD2B8\\uBA3C\\uD2B8 \\uAD6C\\uBB38\\uC5D0 \\uC758\\uD574\\uC11C \\uD074\\uB798\\uC2A4\\uC640 \\uBA54\\uC778 \\uBA54\\uC11C\\uB4DC\\uAC00 \\uC5C6\\uC774 \\n// \\uD558\\uB098\\uC758 \\uD504\\uB85C\\uC81D\\uD2B8\\uC5D0 \\uD558\\uB098\\uC758 cs\\uD30C\\uC77C\\uC774\\uB2E4. \\uADF8\\uB7EC\\uBA74\\n// \\uC774\\uC790\\uCCB4\\uB97C \\uD558\\uB098\\uC758 \\uBA54\\uC778\\uBA54\\uC11C\\uB4DC\\uC758 \\uC601\\uC5ED\\uCC98\\uB7FC \\uB9C8\\uCE58 \\uC790\\uBC14\\uC2A4\\uD06C\\uB9BD\\uD2B8\\uB098 \\uD30C\\uC774\\uC36C\\uCC98\\uB7FC\\n// \\uD604\\uC7AC \\uD30C\\uC77C\\uC774 \\uADF8\\uB300\\uB85C \\uC2E4\\uD589\\uB41C\\uB2E4.\\n// \\uC5EC\\uB7EC\\uAC1C\\uC758 cs \\uD30C\\uC77C\\uC774 \\uC788\\uC744 \\uACBD\\uC6B0 \\uC5B4\\uB290\\uAC83\\uC774 \\uC2DC\\uC791\\uAC1C\\uCCB4\\uC778\\uC9C0\\uB97C \\uC815\\uD574\\uC8FC\\uB294\\uAC8C \\uC88B\\uB2E4.\\n// \\uBA54\\uC778\\uB9E4\\uC11C\\uB4DC\\uB97C \\uB450\\uB294\\uAC8C \\uC88B\\uB2E4.\\n// \\uD0D1\\uB808\\uBCA8 \\uC2A4\\uD14C\\uC774\\uD2B8\\uBA3C\\uD2B8\\uC758 \\uBAA9\\uC801\\uC740 \\uD559\\uC2B5\\uD560\\uB54C \\uAC00\\uC7A5 \\uD6A8\\uACFC\\uAC00 \\uC88B\\uB2E4.\\n#endregion \\n\\n\\nusing System.Threading.Tasks;\\nSystem.Console.WriteLine($\\\"Hello {args[0]}, Happy Codding!!!\\\"); // 10.\\uC18D\\uC131 -> \\uB514\\uBC84\\uADF8\\nawait Task.Delay(1000); // 11.\\uBE44\\uB3D9\\uAE30(await) \\uC2E4\\uD589\\n// 12.\\uD130\\uBBF8\\uB110 \\uAE30\\uBC18 \\uCC98\\uB9AC  => dotnet run -- \\\"c# 9.0\\\"\\n\\nvar sponsor = new Sponsor { Id = 1, DisplayName = \\\"Red\\\" }; // 2.Sponsor \\uAC1C\\uCCB4 \\uD558\\uB098 \\uB9CC\\uB4EC.\\n// 6.\\uBCF4\\uD1B5 \\uD55C\\uBC88 \\uCD08\\uAE30\\uD654\\uD558\\uBA74 \\uB370\\uC774\\uD130\\uB294 Imutable\\uD558\\uB294\\uAC8C \\uC88B\\uB2E4.\\n//sponsor.DisplayName = \\\"RedPlus\\\"; // 7.mutable(\\uBCC0\\uACBD\\uAC00\\uB2A5\\uD558\\uB2E4) => 9.init => imutable\\n\\n#region 2. c# 7.0 8.0\\uC758 inline function\\uC73C\\uB85C \\uB098\\uD0C0\\uB0C4\\n// 5. DisplayDate \\uBA54\\uC11C\\uB4DC\\uC5D0 sponsor \\uAC1C\\uCCB4\\uB97C \\uB123\\uC5B4\\uC900\\uB2E4.\\nDisplayDate(sponsor);\\n\\n// 4. 3\\uBC88\\uC758 \\uCD9C\\uB825\\uAE30\\uB2A5\\uC744 \\uBA54\\uC11C\\uB4DC\\uB85C \\uB9CC\\uB4E0\\uB2E4.\\nstatic void DisplayDate(Sponsor sponsor) =>\\n    System.Console.WriteLine($\\\"{sponsor.Id} - {sponsor.DisplayName}\\\");\\n\\n// 3.Sponsor \\uAC1C\\uCCB4\\uC758 Id\\uC640 DisplayName\\uC744 \\uD654\\uBA74\\uC5D0 \\uCD9C\\uB825\\uD568.\\n//System.Console.WriteLine($\\\"{sponsor.Id} - {sponsor.DisplayName}\\\");\\n#endregion\\n\\n\\nvar subscribe_ex = new Subscriber_ex { Title = \\\"Visual\\\", Duration = 2 }; //14. subscribe \\uAC1C\\uCCB4 \\uB9CC\\uB4EC.\\nSystem.Console.WriteLine(subscribe_ex);\\n\\nvar subscriber = new Subscriber(\\\"visual\\\", 2, true);\\nvar vip = subscriber with { Title = \\\"VIP\\\" }; // 16.imutable => with => mutable\\nSystem.Console.WriteLine(vip);\\n\\nvar (title, duration, isAvariable) = subscriber; // \\n// 17.\\uB808\\uCF54\\uB4DC\\uC5D0\\uC11C\\uB294 \\uAC00\\uB2A5\\uD558\\uC9C0\\uB9CC \\n//\\uD2B9\\uC815\\uD55C \\uD074\\uB798\\uC2A4\\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD560\\uB824\\uBA74 Deconstruct()\\uB97C \\uB0B4\\uBD80\\uC801\\uC73C\\uB85C \\uAD6C\\uD604\\uD574\\uC11C\\n//\\uC5B4\\uB5A4 \\uAC12\\uC744 \\uD29C\\uD50C\\uD0C0\\uC785\\uC73C\\uB85C \\uBC18\\uD55C\\uD560\\uAC83\\uC774\\uB0D0\\uB97C \\uC9C1\\uC811 \\uAD6C\\uD604\\uD574\\uC918\\uC57C\\uD55C\\uB2E4.\\nSystem.Console.WriteLine($\\\"{title} - {duration} - {isAvariable}\\\"); // \\uAD6C\\uC870\\uD30C\\uAD34\\uD560\\uB2F9\\uC744 \\uD560\\uC218 \\uC788\\uB2E4.\\n\\n\\n#region 5. Pattern Matching 8.0 + 9.0\\n//Subscriber membership = new Visual(\\\"VIP\\\", 1, true); //[C] // membership\\uC5D0\\uB294 Subscriber\\uC640 Visual\\uC774 \\uB2F4\\uACA8\\uC838 \\uC788\\uB2E4 (\\uCD1D 6\\uAC1C)\\n//Subscriber membership = new Studio(\\\"Sponsor\\\", 2, true); //[B]\\nSubscriber membership = new Code(\\\"Chamption\\\", 2, true); //[A]\\n\\n//19. c# 8.0\\uC5D0\\uC11C \\uC18C\\uAC1C\\uB41C switch \\uD45C\\uD604\\uC2DD\\nvar membershipDescription = membership switch // \\uB9F4\\uBC84\\uC27D\\uC774 \\uC2A4\\uC704\\uCE58 \\uD45C\\uD604\\uC2DD\\uC5D0 \\uC758\\uD574\\uC11C _\\uC758 \\uACB0\\uACFC\\uAC12\\uC744 \\uBC1B\\uB294\\uB2E4.\\n{\\n    // Pattern => Expression\\n    //Code and (var t, var d, var i) => $\\\"{t} - {d} - {i}\\\",\\n    (\\\"Chamption\\\", var d, var i) => $\\\"Champion - {d} - {i}\\\",\\n\\n    //[A] Champion(Code)\\n    Code c when c.Duration > 1 => $\\\"{c.Title} Membership > 1\\\",\\n    Code c => $\\\"{c.Title} Membership\\\",\\n\\n    //[B] Sponsor(studio)\\n    (Code and (_, > 1, true)) or (Studio and { Duration: 2 }) => \\\"Multi\\\", //[6] Parenthesized Pattern\\n    Studio and (_, > 1, _) => \\\"Sponsor Membership > 1\\\", //[5] Relational Pattern\\n    Studio => \\\"Sponsor Membership\\\", //[2] Type Pattern\\n\\n    //[C] VIP(Visual)\\n    Visual and { Title: \\\"VIP\\\" } => \\\"VIP Membership\\\", // [3] Property Pattern\\n    Visual and (_, 1, true) => \\\"Welcom VIP\\\", // [3] Positional Pattern\\n    not Visual => \\\"No Problem\\\", // [2] Type Pattern + not\\n    _ => \\\"No Membership\\\" // [1] Discard == switch \\uBB38\\uC758 Default Case\\n};\\nSystem.Console.WriteLine(membershipDescription);\\n#endregion\\n\\n\\n#region 3.Init Accessors : \\uBCC0\\uACBD\\uD560 \\uC218 \\uC5C6\\uB294 \\uC18D\\uC131\\uC73C\\uB85C \\uB9CC\\uB4E0\\uB2E4.\\nclass Sponsor\\n{ \\n    //public int Id { get; set; }\\n    //public string DisplayName { get; set; }\\n    public int Id { get; init; }\\n    public string DisplayName { get; init; } // 8.init \\uC811\\uADFC\\uC790\\uB85C \\uCD08\\uAE30\\uD654\\uC804\\uC6A9 \\uC138\\uD130\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\n} // 1.Sponsor \\uAD6C\\uC870\\uCCB4 \\uD558\\uB098 \\uB9CC\\uB4EC.\\n#endregion\\n\\n\\n#region 4.Records\\nrecord Subscriber_ex\\n{\\n    public string Title { get; init; }\\n    public int Duration { get; init; }\\n} // 13. Subscribe record \\uD558\\uB098 \\uB9CC\\uB4EC. \\uC774\\uB7F0 \\uD615\\uD0DC\\uB294 \\uC0AC\\uC6A9 \\uD558\\uC9C0 \\uB9D0\\uC790.\\n\\nrecord Subscriber(string Title, int Duration, bool IsAvariable); // 15. Syntax Sugar : \\uBB38 \\uB300\\uC2E0 \\uC2DD(\\uAC04\\uD3B8\\uD654)\\nrecord Visual(string Title, int Duration, bool IsAvariable) \\n    : Subscriber(Title, Duration, IsAvariable); // 18. \\uB808\\uCF54\\uB4DC \\uC0C1\\uC18D\\nrecord Studio : Subscriber\\n{\\n    public Studio(string Title, int Duration, bool IsAvariable) :\\n        base(Title, Duration, IsAvariable)\\n    { \\n    }\\n} // 18. \\uB808\\uCF54\\uB4DC \\uC0C1\\uC18D\\nrecord Code : Subscriber\\n{\\n    public Code(string Title, int Duration, bool IsAvariable) :\\n        base(Title, Duration, IsAvariable)\\n    {\\n    }\\n} // 18. \\uB808\\uCF54\\uB4DC \\uC0C1\\uC18D\\n#endregion\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/CSharpVersion\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"5b55f91b-dc05-5145-a834-5b917388c8ef","fields":{"slug":"/reactivex/IObservable/"},"frontmatter":{"title":"IObservable<T>"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IObservable<T>\",\n  \"date\": \"2021-01-09 08\",\n  \"tag\": \"ReactiveX, tutorial, C#, IObservable, IDisposable, Observer, Subscribe, CreationOfObservables\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IObservable<out T>\\n{\\n    IDisposable Subscribe(IObserver<T> observer);\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable Subscribe(IObserver<T> observer)\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subscribe = observer(\\uAD00\\uCC30\\uC790)\\uAC00 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uB3C4\\uB85D observable\\uC744 \\uC5F0\\uACB0\\uC2DC\\uD0A8\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD00\\uCC30\\uC790(observer)\\uC758 \\uC758\\uBBF8\\uB294 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uC744 \\uAC1C\\uCCB4\\uB85C \\uC774\\uD574.   \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uD55C\\uB2E4(subscribe)\\uC758 \\uC758\\uBBF8\\uB294 observable\\uACFC observer\\uC744 \\uC5F0\\uACB0\\uC2DC\\uD0A8\\uB2E4\\uB85C \\uC774\\uD574.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uC5F0\\uACB0\\uC2DC\\uD0A4\\uACE0 \\uC54C\\uB9BC\\uC744 \\uBC1B\\uC744 \\uAC1C\\uCCB4\\uB97C \\uD22C\\uC785.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable subscriber = Observable.Subscribe(observer)\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uC54C\\uB9BC \\uC218\\uC2E0\\uC744 \\uC911\\uC9C0 \\uD560 \\uC218 \\uC788\\uB3C4\\uB85D\\uD558\\uB294 \\uC778\\uD130\\uD398\\uC774\\uC2A4\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uC774\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uD558\\uACE0 \\uC788\\uB294 \\uD589\\uC704\\uC790\\uB85C \\uC774\\uD574.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAD6C\\uB3C5\\uC790\\uB294 observable sequence\\uB97C \\uAD6C\\uB3C5\\uD588\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscriber.Dispose()\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"observable\\uACFC observer\\uACFC \\uC5F0\\uACB0 \\uD574\\uC81C  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790(subscriber)\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uD574\\uC81C\\uD55C\\uB2E4\\uB85C \\uC774\\uD574.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static IObservable<Tsource> Create<TSource>(Func<IObserver<TSource>, IDisposable> subscribe) { }\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5(subscription)\\uC774 \\uC0DD\\uC131 \\uB420 \\uB54C\\uB9C8\\uB2E4 \\uC2E4\\uD589\\uB420 \\uB378\\uB9AC\\uAC8C\\uC774\\uD2B8(= Subscribe method)\\uB97C \\uC9C0\\uC815\\uD560 \\uC218 \\uC788\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Observable.Create()\\uB294 \\uAD6C\\uB3C5(subscription)\\uC744 \\uC0DD\\uC131\\uD55C\\uB2E4.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAD6C\\uB3C5(subscription)\\uC740 custom Subscribe()\\uB97C \\uB2F4\\uC740 \\uC0C8\\uB85C\\uC6B4 observable sequence\\uB97C \\uC0DD\\uC131\\uD55C \\uAC83\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposable subscriber = Observable.Subscribe(Console.WriteLine);\"), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uB3C5\\uC790\\uB294 \\uC0DD\\uC131\\uD55C observable sequence\\uB97C \\uAD6C\\uB3C5\\uD588\\uB2E4.  \")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/ReactiveX/tree/main/Observable.Create.Console4net5\"\n  }), \"source\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#CreationOfObservables\"\n  }), \"\\uCC38\\uACE0 \\uC0AC\\uC774\\uD2B8\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}