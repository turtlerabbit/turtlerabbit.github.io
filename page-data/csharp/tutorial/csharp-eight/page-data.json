{"componentChunkName":"component---src-templates-archive-post-js","path":"/csharp/tutorial/csharp-eight/","result":{"data":{"mdx":{"id":"43a3ec40-e2cf-5984-ae68-c751fb2957fa","excerpt":"source","frontmatter":{"title":"C# 8.0","date":"January 09, 2021","tag":"csharp, C#, tutorial, 8.0,"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C# 8.0\",\n  \"date\": \"2021-01-09 04\",\n  \"tag\": \"csharp, C#, tutorial, 8.0,\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uC778\\uD130\\uD398\\uC774\\uC2A4: \\uD074\\uB798\\uC2A4\\uC5D0\\uC11C \\uAD6C\\uD604\\uD574\\uC57C \\uD558\\uB294 \\uAD00\\uB828 \\uAE30\\uB2A5 \\uADF8\\uB8F9\\uC5D0 \\uB300\\uD55C \\uC815\\uC758\\uAC00 \\uD3EC\\uD568\\uB41C \\uAC1C\\uB150\\npublic interface IEmployee\\n{\\n  public string Name { get; }\\n  public decimal Salary { get; }\\n  //[!] C# 8.0 Default interface members : \\uAD6C\\uD604\\uCCB4\\uB97C \\uB123\\uC5B4\\uB450\\uB2E4.\\n  public string Id { get => $\\\"{Name}[{this.GetHashCode()}]\\\"; }\\n\\n\\n}\\n\\n// \\uD074\\uB798\\uC2A4\\npublic class Person\\n{\\n#nullable disable\\n  public string Name { get; set; }\\n#nullable enable\\n  public Person(string name) => Name = name;\\n\\n  //[!]\\n  public string? FirstName { get; set; }\\n  public string? MiddleName { get; set; }\\n  public string?  LastName { get; set; }\\n\\n  public Person(string first, string last)\\n  {\\n      FirstName = first;\\n      MiddleName = null;\\n      LastName = last;\\n  }\\n\\n  public Person(string first, string middle, string last)\\n  {\\n      FirstName = first;\\n      MiddleName = middle;\\n      LastName = last;\\n  }\\n\\n}\\n\\n// \\uCD94\\uC0C1 \\uD074\\uB798\\uC2A4\\npublic abstract class Employee : Person, IEmployee\\n{\\n  public Employee(string name, decimal salary) : base(name) => Salary = salary;\\n  public decimal Salary { get; protected set; }\\n}\\n\\n\\n// \\uCD94\\uC0C1 \\uD074\\uB798\\uC2A4\\uB97C \\uC0C1\\uC18D\\uBC1B\\uB294 \\uD074\\uB798\\uC2A4\\npublic class Professor : Employee\\n{\\n  public string Topic { get; }\\n  public Professor(string name, decimal salary, string topic) : base(name, salary) => Topic = topic;\\n\\n  // TODO: Deconstruct() Method => C# 7.0 \\uC0AC\\uC6A9\\uC790 \\uC815\\uC758 \\uD0C0\\uC785 \\uBD84\\uD574\\n  // \\uB0B4\\uAC00 \\uB9CC\\uB4E4\\uC5B4\\uB193\\uC740 \\uD074\\uB798\\uC2A4 Name \\uC18D\\uC131\\uACFC Topic \\uC18D\\uC131\\uC744 \\uBC16\\uAC19\\uC73C\\uB85C \\uB118\\uAE38\\uB824\\uACE0 \\uD560\\uB54C\\n  public void Deconstruct(out string name, out string topic) => (name, topic) = (Name, Topic);\\n\\n  //[?] Indices and ranges\\n  //public string Id => $\\\"{Name}[{Topic[0..3]}]\\\";\\n  public string Id => $\\\"{Name}[{Topic[..3]}]~[{Topic[^1..^0]}]\\\"; // ^ \\uB05D\\uC5D0\\uC11C \\uC2DC\\uC791\\n}\\n\\npublic class Administrator : Employee\\n{\\n  public string Department { get; }\\n  public Administrator(string name, decimal salary, string department) : base(name, salary) => Department = department;\\n}\\n\\npublic static class Service\\n{\\n#nullable disable\\n  static Person[] people = null;\\n#nullable enable\\n\\n  static Service()\\n  {\\n      //[?] Null Coalescing Assignment Operator: ??=  =>  people\\uC774 null\\uC774\\uBA74 \\uAC12\\uC744 \\uB300\\uC785\\uD558\\uB77C.\\n      people ??= new Person[]\\n  {\\n      new Professor(\\\"Blackpink\\\", 1_000, \\\"Computer Sicence\\\"),\\n      new Administrator(\\\"Jisoo\\\", 2_000, \\\"ABC\\\"),\\n      new Professor(\\\"Risa\\\", 1_000, \\\"Computer Sicence\\\"),\\n  };\\n  }\\n\\n  public static IEnumerable<IEmployee> GetEmployees()\\n  {\\n      foreach (var person in people)\\n      {\\n          if (person is IEmployee employee)\\n          {\\n              yield return employee;\\n          }\\n      }\\n  }\\n\\n  //[?] c# 8.0 \\uBE44\\uB3D9\\uAE30 \\uC2A4\\uD2B8\\uB9BC(Asynchronous streams)\\n  public static async IAsyncEnumerable<IEmployee> GetEmployeesAsync()\\n  {\\n      foreach (var person in people)\\n      {\\n          await Task.Delay(1000);\\n          if (person is IEmployee employee) yield return employee;\\n      }\\n  }\\n}\\n\\nclass Program\\n{\\n  static async Task Main(string[] args)\\n  {\\n      //[?] C# 8.0 - static Local Function\\n      static void Print(string message) => Console.WriteLine(message);\\n\\n      //[A] \\uB3D9\\uAE30\\uD654\\n      foreach (var employee in Service.GetEmployees())\\n      {\\n          Print($\\\"Name: {employee.Name}\\\");\\n      }\\n\\n      Print(\\\"=========================\\\");\\n\\n      foreach (var employee in Service.GetEmployees())\\n      {\\n          //[?] Pattern Matching: C# 7.0 Type Pattern\\n          if (employee is Administrator administrator && administrator.Department is \\\"ABC\\\")\\n          {\\n              Console.WriteLine($\\\"Administrator: {administrator.Name}\\\");\\n          }\\n      }\\n\\n      Console.WriteLine(\\\"=========================\\\");\\n\\n      //[B] \\uBE44\\uB3D9\\uAE30\\n      await foreach (var employee in Service.GetEmployeesAsync())\\n      {\\n          //[?] Pattern Matching: C# 8.0 Property Pattern, Var Pattern\\n          //if (employee is Professor professor && professor.Topic is \\\"Computer Sicence\\\")\\n          if (employee is Professor { Topic: \\\"Computer Sicence\\\", Name: var name } professor)\\n          {\\n              Console.WriteLine($\\\"Professor: {name} ({professor.Id})\\\");\\n          }\\n      }\\n\\n      await foreach (var employee in Service.GetEmployeesAsync())\\n      {\\n          //[?] Pattern Matching: C# 8.0 Location Pattern : Deconstruct() \\uAD6C\\uD604\\n          if (employee is Professor(var name, \\\"Computer Sicence\\\") professor)\\n          {\\n              Console.WriteLine($\\\"Professor: {name} ({professor.Id})\\\");\\n          }\\n      }\\n\\n      //[?] C# 8.0 - Nullable Reference Type\\n      var red = new Person(\\\"\\uC9C0\\uC218\\\", \\\"\\uAE40\\\");\\n      var length = GetMiddleNameLength(red);\\n      Console.WriteLine(length); // 0\\n\\n      //[?] Switch Expression: \\uD2B9\\uC815\\uD55C \\uAC1C\\uCCB4\\uC5D0 \\uB300\\uD574\\uC11C \\uD328\\uD134\\uC744 \\uC27D\\uAC8C \\uCC3E\\uC544 \\uC62C \\uC218 \\uC788\\uB2E4.\\n      Console.WriteLine(\\\"=========================\\\");\\n\\n      await foreach (var employee in Service.GetEmployeesAsync())\\n      {\\n          Console.WriteLine(GetDetails(employee));\\n      }\\n      \\n      static string GetDetails(IEmployee person)\\n      {\\n          return person switch\\n          {\\n              Professor p when p.Salary > 1_000 => $\\\"{p.Name} - {p.Topic} - Big Company\\\",\\n              Professor p => $\\\"{p.Name} - {p.Topic}\\\",\\n              Administrator administrator => $\\\"{administrator.Name} - {administrator.Department}\\\",\\n              _ => $\\\"Who are you?\\\"\\n          };\\n      }\\n  }\\n\\n  static int GetMiddleNameLength(Person? person)\\n  {\\n      //[?] is somthing\\n      if (person?.MiddleName is { } middle)\\n      {\\n          return middle.Length;\\n      }\\n      return 0; // is null\\n  }\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/CSharpVersion\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/csharp/tutorial/csharp-eight/","previous":{"id":"2405b9e8-aa1e-5c85-adc8-a06323655ef7","fields":{"slug":"/csharp/tutorial/csharp-seven/"},"frontmatter":{"title":"C# 7.0"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C# 7.0\",\n  \"date\": \"2021-01-09 03\",\n  \"tag\": \"csharp, C#, tutorial, 7.0,\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"static void Main(string[] args)\\n{\\n    //Digit Separator \\uC22B\\uC790 \\uAD6C\\uBD84\\uC790: \\uCF54\\uB4DC\\uC0C1\\uC5D0\\uC11C \\uC790\\uB9BF\\uC218 \\uAD6C\\uBD84 \\uD3B8\\uC758\\n    int num = 1_000_000;\\n    Console.WriteLine(num);\\n\\n    // Binary Literal: 0b, 0B\\n    //int[] numbers = { 1, 2, 4, 8 }; // 10\\uC9C4\\uC218\\n    int[] numbers = { 0b01, 0b10, 0b0100, 0b0000_1000 }; // 2\\uC9C4\\uC218\\n\\n    foreach (var n in numbers)\\n    {\\n        Console.WriteLine(n);\\n    }\\n\\n    Console.WriteLine();\\n\\n    // Tuple\\n    var t = Tally();\\n    Console.WriteLine($\\\"{t.Item1}, {t.Item2}, {t.Item3}\\\");\\n\\n    Console.WriteLine();\\n\\n    var s = Tally2(numbers);\\n    Console.WriteLine($\\\"{s.Sum}, {s.Count}\\\");\\n\\n    // Tuple Deconstruction (\\uD574\\uCCB4, \\uBD84\\uD574)\\n    var (sum, count) = Tally2(numbers);\\n    Console.WriteLine($\\\"\\uD569\\uACC4: {sum}, \\uCE74\\uC6B4\\uD2B8: {count}\\\");\\n\\n    Console.WriteLine();\\n\\n    // if + is \\uC5F0\\uC0B0\\uC790\\n    PrintStars(null);\\n    PrintStars(\\\"5\\\");\\n    PrintStars(5);\\n\\n    Console.WriteLine();\\n\\n    // switch, when\\n    PrintShape(new Circle());\\n    PrintShape(new Rectangle{Length = 200, Height = 100});\\n    PrintShape(new Rectangle { Length = 100, Height = 100 });\\n\\n}\\n\\n// Tuple Return \\uD29C\\uD50C \\uBC18\\uD658\\uAC12\\nstatic (int, int, int) Tally()\\n{\\n    // Tuple : \\uD558\\uB098\\uC758 \\uC774\\uB984\\uC73C\\uB85C \\uD55C\\uAC1C \\uC774\\uC0C1\\uC758 \\uC5B4\\uB5A4 \\uAC12(\\uBCC0\\uC218)\\uB4E4\\uC744 \\n    // \\uBB36\\uC5B4(\\uAD04\\uD638\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C) \\uB193\\uC740 \\uADF8\\uB987\\uC774\\uB2E4.\\n    // Tuple Literal\\n    var r = (12, 34, 56);\\n    //Console.WriteLine($\\\"{r.Item1}, {r.Item2}, {r.Item3}\\\");\\n\\n    return r;\\n}\\n\\nstatic (int Sum, int Count) Tally2(int[] values)\\n{\\n    var r = (s:0, c:0);\\n    foreach (var v in values)\\n    {\\n        //r = (r.s + v, r.c + 1); // \\uB9E4\\uBC88 \\uACC4\\uC0B0\\uC744 \\uD558\\uACE0 \\uB9E4\\uBC88 \\uD560\\uB2F9\\uC774 \\uB41C\\uB2E4.\\n        r.s += v; r.c++; // \\uC9C1\\uC811 \\uC218\\uC815\\n\\n        // \\uB85C\\uCEEC \\uD568\\uC218(Local Function) : \\uD2B9\\uC815\\uD55C \\uBA54\\uC11C\\uB4DC \\uC548\\uC5D0 \\uBA54\\uC11C\\uB4DC\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\n        Add(v, 1);\\n    }\\n    return r;\\n\\n    // \\uB85C\\uCEEC \\uD568\\uC218(Local Function)\\n    void Add(int s, int c)\\n    {\\n        r.s += s;\\n        r.c += c;\\n    }\\n}\\n\\n// \\uD328\\uD134 \\uB9E4\\uCE6D: if + is \\uC5F0\\uC0B0\\uC790\\nstatic void PrintStars(object o)\\n{\\n    if (o is null)\\n    {\\n        return;\\n    }\\n    if (o is string)\\n    {\\n        return;\\n    }\\n    if (!(o is int number)) // o\\uAC00 int\\uBA74 number \\uBCC0\\uC218 \\uC120\\uC5B8\\uACFC \\uB3D9\\uC2DC\\uC5D0 \\uCE90\\uC2A4\\uD305\\uD574\\uC11C \\uAC12\\uC744 \\uB123\\uC5B4\\uB450\\uACE0 \\uC544\\uB2C8\\uBA74 return;\\n    {\\n        return;\\n    }\\n    //Console.WriteLine(new String('*', (int)o));\\n    Console.WriteLine(new String('*', number));\\n}\\n\\n// \\uD328\\uD134 \\uB9E4\\uCE6D: switch, when\\nstatic void PrintShape(object shape)\\n{\\n    switch (shape)\\n    {\\n        case Rectangle s when (s.Length == s.Height):\\n            Console.WriteLine($\\\"\\uC815\\uC0AC\\uAC01\\uD615: {s.Length} x {s.Height}\\\");\\n            break;\\n        case Rectangle r:  // Rectangle\\uBA74 r\\uBCC0\\uC218\\uC5D0 \\uB2F4\\uB294\\uB2E4.\\n            Console.WriteLine($\\\"\\uC9C1\\uC0AC\\uAC01\\uD615: {r.Length} x {r.Height}\\\");\\n            break;\\n        case Circle c:  // Circle\\uBA74 c\\uBCC0\\uC218\\uC5D0 \\uB2F4\\uB294\\uB2E4.\\n            Console.WriteLine($\\\"\\uC6D0: \\uBC18\\uC9C0\\uB984({c.Radius})\\\");\\n            break;\\n        case null:\\n            throw new ArgumentNullException(nameof(shape));\\n        default:\\n            Console.WriteLine(\\\"<\\uAE30\\uD0C0 \\uB3C4\\uD615>\\\");\\n            break;\\n    }\\n}\\n\\nclass Circle\\n{\\n    public int Radius { get; set; } = 10;\\n}\\n\\nclass Rectangle\\n{\\n    public int Length { get; set; }\\n    public int Height { get; set; }\\n}\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/CSharpVersion\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"5c9b5947-8e9d-5d4b-9c96-5cbe6bbce042","fields":{"slug":"/csharp/tutorial/csharp-nine/"},"frontmatter":{"title":"C# 9.0"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C# 9.0\",\n  \"date\": \"2021-01-09 05\",\n  \"tag\": \"csharp, C#, tutorial, 9.0,\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//System.Console.WriteLine(\\\"Hello World!\\\"); // cw tap tap\\n#region  1.Top Level \\uAD6C\\uBB38\\n//using static System.Console;\\n//WriteLine(\\\"Hello World!\\\");\\n\\n// \\uD0D1\\uB808\\uBCA8 \\uC2A4\\uD14C\\uC774\\uD2B8\\uBA3C\\uD2B8 \\uAD6C\\uBB38\\uC5D0 \\uC758\\uD574\\uC11C \\uD074\\uB798\\uC2A4\\uC640 \\uBA54\\uC778 \\uBA54\\uC11C\\uB4DC\\uAC00 \\uC5C6\\uC774 \\n// \\uD558\\uB098\\uC758 \\uD504\\uB85C\\uC81D\\uD2B8\\uC5D0 \\uD558\\uB098\\uC758 cs\\uD30C\\uC77C\\uC774\\uB2E4. \\uADF8\\uB7EC\\uBA74\\n// \\uC774\\uC790\\uCCB4\\uB97C \\uD558\\uB098\\uC758 \\uBA54\\uC778\\uBA54\\uC11C\\uB4DC\\uC758 \\uC601\\uC5ED\\uCC98\\uB7FC \\uB9C8\\uCE58 \\uC790\\uBC14\\uC2A4\\uD06C\\uB9BD\\uD2B8\\uB098 \\uD30C\\uC774\\uC36C\\uCC98\\uB7FC\\n// \\uD604\\uC7AC \\uD30C\\uC77C\\uC774 \\uADF8\\uB300\\uB85C \\uC2E4\\uD589\\uB41C\\uB2E4.\\n// \\uC5EC\\uB7EC\\uAC1C\\uC758 cs \\uD30C\\uC77C\\uC774 \\uC788\\uC744 \\uACBD\\uC6B0 \\uC5B4\\uB290\\uAC83\\uC774 \\uC2DC\\uC791\\uAC1C\\uCCB4\\uC778\\uC9C0\\uB97C \\uC815\\uD574\\uC8FC\\uB294\\uAC8C \\uC88B\\uB2E4.\\n// \\uBA54\\uC778\\uB9E4\\uC11C\\uB4DC\\uB97C \\uB450\\uB294\\uAC8C \\uC88B\\uB2E4.\\n// \\uD0D1\\uB808\\uBCA8 \\uC2A4\\uD14C\\uC774\\uD2B8\\uBA3C\\uD2B8\\uC758 \\uBAA9\\uC801\\uC740 \\uD559\\uC2B5\\uD560\\uB54C \\uAC00\\uC7A5 \\uD6A8\\uACFC\\uAC00 \\uC88B\\uB2E4.\\n#endregion \\n\\n\\nusing System.Threading.Tasks;\\nSystem.Console.WriteLine($\\\"Hello {args[0]}, Happy Codding!!!\\\"); // 10.\\uC18D\\uC131 -> \\uB514\\uBC84\\uADF8\\nawait Task.Delay(1000); // 11.\\uBE44\\uB3D9\\uAE30(await) \\uC2E4\\uD589\\n// 12.\\uD130\\uBBF8\\uB110 \\uAE30\\uBC18 \\uCC98\\uB9AC  => dotnet run -- \\\"c# 9.0\\\"\\n\\nvar sponsor = new Sponsor { Id = 1, DisplayName = \\\"Red\\\" }; // 2.Sponsor \\uAC1C\\uCCB4 \\uD558\\uB098 \\uB9CC\\uB4EC.\\n// 6.\\uBCF4\\uD1B5 \\uD55C\\uBC88 \\uCD08\\uAE30\\uD654\\uD558\\uBA74 \\uB370\\uC774\\uD130\\uB294 Imutable\\uD558\\uB294\\uAC8C \\uC88B\\uB2E4.\\n//sponsor.DisplayName = \\\"RedPlus\\\"; // 7.mutable(\\uBCC0\\uACBD\\uAC00\\uB2A5\\uD558\\uB2E4) => 9.init => imutable\\n\\n#region 2. c# 7.0 8.0\\uC758 inline function\\uC73C\\uB85C \\uB098\\uD0C0\\uB0C4\\n// 5. DisplayDate \\uBA54\\uC11C\\uB4DC\\uC5D0 sponsor \\uAC1C\\uCCB4\\uB97C \\uB123\\uC5B4\\uC900\\uB2E4.\\nDisplayDate(sponsor);\\n\\n// 4. 3\\uBC88\\uC758 \\uCD9C\\uB825\\uAE30\\uB2A5\\uC744 \\uBA54\\uC11C\\uB4DC\\uB85C \\uB9CC\\uB4E0\\uB2E4.\\nstatic void DisplayDate(Sponsor sponsor) =>\\n    System.Console.WriteLine($\\\"{sponsor.Id} - {sponsor.DisplayName}\\\");\\n\\n// 3.Sponsor \\uAC1C\\uCCB4\\uC758 Id\\uC640 DisplayName\\uC744 \\uD654\\uBA74\\uC5D0 \\uCD9C\\uB825\\uD568.\\n//System.Console.WriteLine($\\\"{sponsor.Id} - {sponsor.DisplayName}\\\");\\n#endregion\\n\\n\\nvar subscribe_ex = new Subscriber_ex { Title = \\\"Visual\\\", Duration = 2 }; //14. subscribe \\uAC1C\\uCCB4 \\uB9CC\\uB4EC.\\nSystem.Console.WriteLine(subscribe_ex);\\n\\nvar subscriber = new Subscriber(\\\"visual\\\", 2, true);\\nvar vip = subscriber with { Title = \\\"VIP\\\" }; // 16.imutable => with => mutable\\nSystem.Console.WriteLine(vip);\\n\\nvar (title, duration, isAvariable) = subscriber; // \\n// 17.\\uB808\\uCF54\\uB4DC\\uC5D0\\uC11C\\uB294 \\uAC00\\uB2A5\\uD558\\uC9C0\\uB9CC \\n//\\uD2B9\\uC815\\uD55C \\uD074\\uB798\\uC2A4\\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD560\\uB824\\uBA74 Deconstruct()\\uB97C \\uB0B4\\uBD80\\uC801\\uC73C\\uB85C \\uAD6C\\uD604\\uD574\\uC11C\\n//\\uC5B4\\uB5A4 \\uAC12\\uC744 \\uD29C\\uD50C\\uD0C0\\uC785\\uC73C\\uB85C \\uBC18\\uD55C\\uD560\\uAC83\\uC774\\uB0D0\\uB97C \\uC9C1\\uC811 \\uAD6C\\uD604\\uD574\\uC918\\uC57C\\uD55C\\uB2E4.\\nSystem.Console.WriteLine($\\\"{title} - {duration} - {isAvariable}\\\"); // \\uAD6C\\uC870\\uD30C\\uAD34\\uD560\\uB2F9\\uC744 \\uD560\\uC218 \\uC788\\uB2E4.\\n\\n\\n#region 5. Pattern Matching 8.0 + 9.0\\n//Subscriber membership = new Visual(\\\"VIP\\\", 1, true); //[C] // membership\\uC5D0\\uB294 Subscriber\\uC640 Visual\\uC774 \\uB2F4\\uACA8\\uC838 \\uC788\\uB2E4 (\\uCD1D 6\\uAC1C)\\n//Subscriber membership = new Studio(\\\"Sponsor\\\", 2, true); //[B]\\nSubscriber membership = new Code(\\\"Chamption\\\", 2, true); //[A]\\n\\n//19. c# 8.0\\uC5D0\\uC11C \\uC18C\\uAC1C\\uB41C switch \\uD45C\\uD604\\uC2DD\\nvar membershipDescription = membership switch // \\uB9F4\\uBC84\\uC27D\\uC774 \\uC2A4\\uC704\\uCE58 \\uD45C\\uD604\\uC2DD\\uC5D0 \\uC758\\uD574\\uC11C _\\uC758 \\uACB0\\uACFC\\uAC12\\uC744 \\uBC1B\\uB294\\uB2E4.\\n{\\n    // Pattern => Expression\\n    //Code and (var t, var d, var i) => $\\\"{t} - {d} - {i}\\\",\\n    (\\\"Chamption\\\", var d, var i) => $\\\"Champion - {d} - {i}\\\",\\n\\n    //[A] Champion(Code)\\n    Code c when c.Duration > 1 => $\\\"{c.Title} Membership > 1\\\",\\n    Code c => $\\\"{c.Title} Membership\\\",\\n\\n    //[B] Sponsor(studio)\\n    (Code and (_, > 1, true)) or (Studio and { Duration: 2 }) => \\\"Multi\\\", //[6] Parenthesized Pattern\\n    Studio and (_, > 1, _) => \\\"Sponsor Membership > 1\\\", //[5] Relational Pattern\\n    Studio => \\\"Sponsor Membership\\\", //[2] Type Pattern\\n\\n    //[C] VIP(Visual)\\n    Visual and { Title: \\\"VIP\\\" } => \\\"VIP Membership\\\", // [3] Property Pattern\\n    Visual and (_, 1, true) => \\\"Welcom VIP\\\", // [3] Positional Pattern\\n    not Visual => \\\"No Problem\\\", // [2] Type Pattern + not\\n    _ => \\\"No Membership\\\" // [1] Discard == switch \\uBB38\\uC758 Default Case\\n};\\nSystem.Console.WriteLine(membershipDescription);\\n#endregion\\n\\n\\n#region 3.Init Accessors : \\uBCC0\\uACBD\\uD560 \\uC218 \\uC5C6\\uB294 \\uC18D\\uC131\\uC73C\\uB85C \\uB9CC\\uB4E0\\uB2E4.\\nclass Sponsor\\n{ \\n    //public int Id { get; set; }\\n    //public string DisplayName { get; set; }\\n    public int Id { get; init; }\\n    public string DisplayName { get; init; } // 8.init \\uC811\\uADFC\\uC790\\uB85C \\uCD08\\uAE30\\uD654\\uC804\\uC6A9 \\uC138\\uD130\\uB97C \\uB9CC\\uB4E0\\uB2E4.\\n} // 1.Sponsor \\uAD6C\\uC870\\uCCB4 \\uD558\\uB098 \\uB9CC\\uB4EC.\\n#endregion\\n\\n\\n#region 4.Records\\nrecord Subscriber_ex\\n{\\n    public string Title { get; init; }\\n    public int Duration { get; init; }\\n} // 13. Subscribe record \\uD558\\uB098 \\uB9CC\\uB4EC. \\uC774\\uB7F0 \\uD615\\uD0DC\\uB294 \\uC0AC\\uC6A9 \\uD558\\uC9C0 \\uB9D0\\uC790.\\n\\nrecord Subscriber(string Title, int Duration, bool IsAvariable); // 15. Syntax Sugar : \\uBB38 \\uB300\\uC2E0 \\uC2DD(\\uAC04\\uD3B8\\uD654)\\nrecord Visual(string Title, int Duration, bool IsAvariable) \\n    : Subscriber(Title, Duration, IsAvariable); // 18. \\uB808\\uCF54\\uB4DC \\uC0C1\\uC18D\\nrecord Studio : Subscriber\\n{\\n    public Studio(string Title, int Duration, bool IsAvariable) :\\n        base(Title, Duration, IsAvariable)\\n    { \\n    }\\n} // 18. \\uB808\\uCF54\\uB4DC \\uC0C1\\uC18D\\nrecord Code : Subscriber\\n{\\n    public Code(string Title, int Duration, bool IsAvariable) :\\n        base(Title, Duration, IsAvariable)\\n    {\\n    }\\n} // 18. \\uB808\\uCF54\\uB4DC \\uC0C1\\uC18D\\n#endregion\\n\")), mdx(\"h1\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ledpink/CSharpVersion\"\n  }), \"source\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}