{"componentChunkName":"component---src-templates-archive-post-js","path":"/fullStackWPF/User-Authentication-Login-Registration-Service-12/","result":{"data":{"mdx":{"id":"8055bc63-a257-5da4-9d97-ba56e571aa32","excerpt":"SimpleTrader에 대한 인증 서비스를 설정한다. 이 서비스를 통해 사용자는 계정을 등록하고 계정에 로그인 할 수 있다. 또한 인증 서비스에서 이메일 및 사용자 이름으로 계정을 효율적으로 가져올 수 있도록 계정에 대한 IDataService를 IAccountService…","frontmatter":{"title":"FULL STACK WFP 12 - User Authentication (Login/Registration) Service","date":"May 12, 2021","tag":"WPF, FullStack, Login, Registration, User Authentication"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 12 - User Authentication (Login/Registration) Service\",\n  \"date\": \"2021-05-12 12\",\n  \"tag\": \"WPF, FullStack, Login, Registration, User Authentication\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"SimpleTrader\\uC5D0 \\uB300\\uD55C \\uC778\\uC99D \\uC11C\\uBE44\\uC2A4\\uB97C \\uC124\\uC815\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC774 \\uC11C\\uBE44\\uC2A4\\uB97C \\uD1B5\\uD574 \\uC0AC\\uC6A9\\uC790\\uB294 \\uACC4\\uC815\\uC744 \\uB4F1\\uB85D\\uD558\\uACE0 \\uACC4\\uC815\\uC5D0 \\uB85C\\uADF8\\uC778 \\uD560 \\uC218 \\uC788\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C \\uC778\\uC99D \\uC11C\\uBE44\\uC2A4\\uC5D0\\uC11C \\uC774\\uBA54\\uC77C \\uBC0F \\uC0AC\\uC6A9\\uC790 \\uC774\\uB984\\uC73C\\uB85C \\uACC4\\uC815\\uC744 \\uD6A8\\uC728\\uC801\\uC73C\\uB85C \\uAC00\\uC838\\uC62C \\uC218 \\uC788\\uB3C4\\uB85D \\uACC4\\uC815\\uC5D0 \\uB300\\uD55C IDataService\\uB97C IAccountService\\uB85C \\uD655\\uC7A5\\uD55C\\uB2E4. \"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. setup an authentication service for SimpleTrader.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / User.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class User : DomainObject\\n{\\n    public string Email { get; set; }\\n    public string Username { get; set; }\\n    public string PasswordHash { get; set; }  // \\uC218\\uC815\\n    public DateTime DatedJoined { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Package Manager Console\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Password => PasswordHash\\n\\nPM> add-migration password_hash\\nPM> update-datebase\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / AuthenticationServices / IAuthenticationService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public enum RegistrationResult\\n{\\n    Success,\\n    PasswordsDoNotMatch,\\n    EmailAlreadyExists,\\n    UsernameAlreadyExists\\n}\\n\\npublic interface IAuthenticationService\\n{        \\n    Task<RegistrationResult> Register(string email, \\n                string username, string password, string confirmPasswrod);\\n    Task<Account> Login(string username, string password);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / AuthenticationServices / AuthenticationService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AuthenticationService : IAuthenticationService\\n{\\n    private readonly IAccountService _accountService;\\n\\n    // using Microsoft.AspNet.Identity;\\n    private readonly IPasswordHasher _passwordHasher;\\n\\n    public AuthenticationService(IAccountService accountService, \\n                IPasswordHasher passwordHasher)\\n    {\\n        _accountService = accountService;\\n        _passwordHasher = passwordHasher;\\n    }\\n\\n    public async Task<Account> Login(string username, string password)\\n    {\\n        // 1. Get the user's account from the database\\n        // 2. Hash the password provided in the method\\n        // 3. Campare the hashed provided password to the database hasehd password\\n\\n        Account storedAccount = await _accountService.GetByUsername(username);\\n\\n        PasswordVerificationResult passwordResult = _passwordHasher\\n            .VerifyHashedPassword(storedAccount.AccountHolder.PasswordHash, password);\\n\\n        if (passwordResult != PasswordVerificationResult.Success)\\n        {\\n            throw new InvalidPasswordException(username, password);\\n        }\\n\\n        return storedAccount;\\n    }\\n\\n    public async Task<RegistrationResult> Register(string email, \\n                string username, string password, string confirmPasswrod)\\n    {\\n        RegistrationResult result = RegistrationResult.Success;\\n\\n        if (password != confirmPasswrod)\\n        {\\n            result = RegistrationResult.PasswordsDoNotMatch;\\n        }\\n\\n        Account emailAccount = await _accountService.GetByEmail(email);\\n        if (emailAccount != null)\\n        {\\n            result = RegistrationResult.EmailAlreadyExists;\\n        }\\n\\n        Account usernameAccount = await _accountService.GetByUsername(username);\\n        if (usernameAccount != null)\\n        {\\n            result = RegistrationResult.UsernameAlreadyExists;\\n        }\\n\\n        if (result == RegistrationResult.Success)\\n        {\\n            string hashedPassword = _passwordHasher.HashPassword(password);\\n\\n            User user = new User()\\n            {\\n                Email = email,\\n                Username = username,\\n                PasswordHash = hashedPassword,\\n                DatedJoined = DateTime.Now\\n            };\\n\\n            Account account = new Account()\\n            {\\n                AccountHolder = user\\n            };\\n\\n            await _accountService.Create(account);\\n        }\\n       \\n        return result;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services /\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IAccountService : IDataService<Account>\\n{\\n    Task<Account> GetByUsername(string username);\\n    Task<Account> GetByEmail(string email);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\nservices.AddSingleton<SimpleTraderDbContextFactory>();\\nservices.AddSingleton<IAuthenticationService, AuthenticationService>();   // \\uCD94\\uAC00\\nservices.AddSingleton<IDataService<Account>, AccountDataService>();\\nservices.AddSingleton<IAccountService, AccountDataService>();      // \\uCD94\\uAC00\\nservices.AddSingleton<IStockPriceService, StockPriceService>();\\nservices.AddSingleton<IBuyStockService, BuyStockService>();\\nservices.AddSingleton<IMajorIndexService, MajorIndexService>();\\n\\nservices.AddSingleton<IPasswordHasher, PasswordHasher>();   // \\uCD94\\uAC00\\n...\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Exceptions / InvalidPasswordException.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class InvalidPasswordException : Exception\\n{\\n    public string Username { get; set; }\\n    public string Password { get; set; }\\n\\n    public InvalidPasswordException(string username, string password)\\n    {\\n        Username = username;\\n        Password = password;\\n    }\\n\\n    public InvalidPasswordException(string message, \\n            string username, string password) : base(message)\\n    {\\n        Username = username;\\n        Password = password;\\n    }\\n\\n    public InvalidPasswordException(string message, \\n            Exception innerException, string username, string password) : \\n                base(message, innerException)\\n    {\\n        Username = username;\\n        Password = password;\\n    }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/fullStackWPF/User-Authentication-Login-Registration-Service-12/","previous":{"id":"3a19a179-f5b7-5fbf-a5b5-2b1982c395d5","fields":{"slug":"/fullStackWPF/Dynamic-Views-and-Custom-Element-Styles-11/"},"frontmatter":{"title":"FULL STACK WFP 11 - Dynamic Views and Custom Element Styles"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 11 - Dynamic Views and Custom Element Styles\",\n  \"date\": \"2021-05-12 11\",\n  \"tag\": \"WPF, FullStack, Dynamic Views, Custom Element Styles\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uC8FC\\uC2DD \\uB9E4\\uC785\\uC5D0 \\uC0AC\\uC6A9\\uB418\\uB294 BuyView\\uC758 \\uAE30\\uB2A5, \\uC2A4\\uD0C0\\uC77C, \\uB808\\uC774\\uC544\\uC6C3\\uC744 \\uAC1C\\uC120\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uBDF0\\uC758 \\uAE30\\uB2A5\\uC744 \\uAC1C\\uC120\\uD558\\uAE30 \\uC704\\uD574 BuyViewModel\\uC5D0\\uC11C \\uC77C\\uBD80 \\uC18D\\uC131 \\uBC14\\uC778\\uB529\\uC744 \\uC218\\uC815\\uD558\\uACE0 BuyView\\uC5D0\\uC11C DataTrigger\\uB97C \\uB9CC\\uB4E4\\uC5B4 \\uC8FC\\uC2DD\\uC774 \\uAC80\\uC0C9 \\uB420 \\uB54C\\uAE4C\\uC9C0 \\uAC80\\uC0C9\\uACB0\\uACFC\\uD328\\uB110\\uC744 \\uC228\\uAE34\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C TextBox \\uBC0F Button \\uCEE8\\uD2B8\\uB864\\uC5D0 \\uB300\\uD55C \\uC0AC\\uC6A9\\uC790 \\uC9C0\\uC815 \\uC694\\uC18C \\uC2A4\\uD0C0\\uC77C\\uC744 \\uCD94\\uAC00\\uD558\\uC5EC View\\uC758 \\uC2A4\\uD0C0\\uC77C\\uC744 \\uAC1C\\uC120\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C8\\uC9C0\\uB9C9\\uC73C\\uB85C \\uAC01 \\uD558\\uC704 \\uD328\\uB110\\uC758 \\uD06C\\uAE30\\uB97C \\uAC1C\\uC120\\uD558\\uAE30 \\uC704\\uD574 \\uD328\\uB110 \\uB808\\uC774\\uC544\\uC6C3\\uC744 WrapPanel\\uC5D0\\uC11C \\u2019*\\u2019 \\uB108\\uBE44\\uAC00 \\uC788\\uB294 \\uADF8\\uB9AC\\uB4DC\\uB85C \\uBCC0\\uD658\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Improve the functionality, style, and layout of the BuyView, which is used to purchase stocks.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid Margin=\\\"20\\\">\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Width=\\\"100\\\" Text=\\\"{Binding Symbol, \\n                                    UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Margin=\\\"5 0 0 0\\\" Content=\\\"Search\\\" \\n                Command=\\\"{Binding SearchSymbolCommand}\\\" />\\n    </WrapPanel>\\n\\n    <Grid Margin=\\\"0 20 0 0\\\" Grid.Row=\\\"1\\\" MaxWidth=\\\"500\\\">\\n        <Grid.Style>\\n            <Style TargetType=\\\"Grid\\\">\\n                <Style.Triggers>\\n                    <DataTrigger Binding=\\\"{Binding SearchResultSymbol}\\\" Value=\\\"\\\">\\n                        <Setter Property=\\\"Visibility\\\" Value=\\\"Collapsed\\\" />\\n                    </DataTrigger>\\n                </Style.Triggers>\\n            </Style>\\n        </Grid.Style>\\n        <Grid.ColumnDefinitions>\\n            <ColumnDefinition Width=\\\"*\\\" />\\n            <ColumnDefinition Width=\\\"2*\\\" />\\n        </Grid.ColumnDefinitions>\\n        \\n        <Border Grid.Column=\\\"0\\\" BorderBrush=\\\"Gray\\\" BorderThickness=\\\"1\\\" \\n                Padding=\\\"20\\\" CornerRadius=\\\"3 0 0 3\\\">\\n            <StackPanel>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Text=\\\"{Binding SearchResultSymbol}\\\"/>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" Margin=\\\"0 10 0 0\\\" \\n                            Text=\\\"{Binding StockPrice, StringFormat={}{0:C}}\\\" />\\n            </StackPanel>\\n        </Border>\\n        <Border Grid.Column=\\\"1\\\" BorderBrush=\\\"Gray\\\" BorderThickness=\\\"0 1 1 1\\\" \\n                Padding=\\\"20\\\" CornerRadius=\\\"0 3 3 0\\\">\\n            <StackPanel HorizontalAlignment=\\\"Center\\\">\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Shares To buy:\\\" />\\n                    <TextBox Width=\\\"50\\\" Text=\\\"{Binding SharesToBuy, \\n                                               UpdateSourceTrigger=PropertyChanged}\\\" />\\n                </WrapPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Price per share:\\\" />\\n                    <TextBlock Width=\\\"50\\\" Text=\\\"{Binding StockPrice, \\n                                                    StringFormat={}{0:C}}\\\" />\\n                </WrapPanel >\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" FontSize=\\\"32\\\" Margin=\\\"0 10\\\" \\n                            Text=\\\"{Binding TotalPrice, StringFormat={}{0:C}}\\\" />\\n                <Button Margin=\\\"0 10\\\" Padding=\\\"20 5\\\" FontSize=\\\"24\\\" Content=\\\"Buy\\\" \\n                            Command=\\\"{Binding BuyStockCommand}\\\" />\\n            </StackPanel>\\n        </Border>\\n    </Grid>\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Public class public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    private string _searchResultSymbol = string.Empty;\\n    public string SearchResultSymbol\\n    {\\n        get { return _searchResultSymbol; }\\n        set \\n        { \\n            _searchResultSymbol = value; \\n            OnPropertyChanged(nameof(SearchResultSymbol)); \\n        }\\n    }\\n\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set \\n        { \\n            _stockPrice = value; \\n            OnPropertyChanged(nameof(StockPrice));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    private int _sharesToBuy;\\n    public int SharesToBuy\\n    {\\n        get { return _sharesToBuy; }\\n        set \\n        { \\n            _sharesToBuy = value; \\n            OnPropertyChanged(nameof(SharesToBuy));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    public double TotalPrice\\n    {\\n        get { return SharesToBuy * StockPrice; }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n    public ICommand BuyStockCommand { get; set; }\\n\\n    public BuyViewModel(IStockPriceService stockPriceService,\\n        IBuyStockService buyStockService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n        BuyStockCommand = new BuyStockCommand(this, buyStockService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / SearchSymbolCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            double stockPrice = await _stockPriceService.GetPrice(_viewModel.Symbol);\\n            _viewModel.SearchResultSymbol = _viewModel.Symbol.ToUpper();\\n            _viewModel.StockPrice = stockPrice;\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Styles / Common.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<!--Text Boxes-->\\n<Style TargetType=\\\"TextBox\\\">\\n    <Setter Property=\\\"VerticalContentAlignment\\\" Value=\\\"Center\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"TextBox\\\">\\n                <Border BorderThickness=\\\"1\\\" BorderBrush=\\\"Gray\\\" CornerRadius=\\\"3\\\">\\n                    <ScrollViewer x:Name=\\\"PART_ContentHost\\\" />\\n                </Border>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n</Style>\\n\\n<!-- Button -->\\n<Style TargetType=\\\"Button\\\">\\n    <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary2}\\\" />\\n    <Setter Property=\\\"Foreground\\\" Value=\\\"White\\\" />\\n    <Setter Property=\\\"Cursor\\\" Value=\\\"Hand\\\" />\\n    <Setter Property=\\\"Padding\\\" Value=\\\"10 5\\\" />\\n    <Setter Property=\\\"HorizontalAlignment\\\" Value=\\\"Center\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"Button\\\">\\n                <Border CornerRadius=\\\"3\\\" \\n                        Background=\\\"{TemplateBinding Background}\\\"\\n                        Padding=\\\"{TemplateBinding Padding}\\\"\\n                        Margin=\\\"{TemplateBinding Margin}\\\">\\n                    <!--We can use ContentPresenter on Buttons and not TextBoxes \\n                        because Buttons are derived from ContentControl-->\\n                    <ContentPresenter />\\n                </Border>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n    <Style.Triggers>\\n        <Trigger Property=\\\"IsMouseOver\\\" Value=\\\"True\\\">\\n            <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary1}\\\" />\\n        </Trigger>\\n    </Style.Triggers>\\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / MainWindow.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n    \\n    <controls:NavigationBar Grid.Row=\\\"0\\\" DataContext=\\\"{Binding Navigator}\\\" />\\n    <ScrollViewer Grid.Row=\\\"1\\\" VerticalScrollBarVisibility=\\\"Auto\\\" \\n                  HorizontalScrollBarVisibility=\\\"Disabled\\\">\\n        <ContentControl Content=\\\"{Binding Navigator.CurrentViewModel}\\\" />\\n    </ScrollViewer>\\n</Grid>\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"65e005f9-6b40-5195-b858-b1a33fd9839f","fields":{"slug":"/fullStackWPF/Unit-Testing-the-Authentication-Service-with-NUnit-and-Moq-13/"},"frontmatter":{"title":"FULL STACK WFP 13 - Unit Testing the Authentication Service (with NUnit and Moq)"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 13 - Unit Testing the Authentication Service (with NUnit and Moq)\",\n  \"date\": \"2021-05-12 13\",\n  \"tag\": \"WPF, FullStack, Unit Test, NUnit, Moq\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"SimpleTrader \\uB3C4\\uBA54\\uC778 \\uACC4\\uCE35\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC704 \\uD14C\\uC2A4\\uD2B8 \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uB9CC\\uB4E4\\uACE0 \\uC778\\uC99D \\uC11C\\uBE44\\uC2A4\\uC5D0 \\uB300\\uD55C \\uB2E8\\uC704 \\uD14C\\uC2A4\\uD2B8 \\uC791\\uC131\\uC744 \\uC2DC\\uC791\\uD55C\\uB2E4.\\nNUnit\\uC744 \\uD14C\\uC2A4\\uD2B8 \\uD504\\uB808\\uC784 \\uC6CC\\uD06C\\uB85C \\uC0AC\\uC6A9\\uD558\\uACE0 Moq\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC778\\uC99D \\uC11C\\uBE44\\uC2A4 \\uC885\\uC18D\\uC131\\uC744 \\uD14C\\uC2A4\\uD2B8\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Begin writing unit tests for the authentication service.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SimpleTrader.Domain.Tests / Services / AuthenticationServices / AuthenticationServiceTests.cs\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AuthenticationServiceTests\\n{\\n    // public void [MethodName]_[Scenario]_[Result]\\n    // 1. Arrange\\n    // 2. Act\\n    // 3. Assert        \\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}