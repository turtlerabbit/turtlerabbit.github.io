{"componentChunkName":"component---src-templates-archive-post-js","path":"/fullStackWPF/API-Service-Calls-and-Async-ViewModel-Loading-04/","result":{"data":{"mdx":{"id":"1a524bcd-f9ca-5caf-a043-495bfaf29483","excerpt":"주요 주가 지수에 대한 정보를 로드하는 서비스를 만들어 service layer를 확장한다. 이 서비스는 HttpClient를 사용하여 FinancialModelingPrep API에서 JSON 데이터를 검색하고 Json.NET을 사용하여 JSON을 개체로 역직렬화한다. 그런 다음, I…","frontmatter":{"title":"FULL STACK WFP 04 - API Service Calls and Async ViewModel Loading","date":"May 12, 2021","tag":"WPF, FullStack, Navigation, API Service Calls, Async ViewModel Loading"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 04 - API Service Calls and Async ViewModel Loading\",\n  \"date\": \"2021-05-12 04\",\n  \"tag\": \"WPF, FullStack, Navigation, API Service Calls, Async ViewModel Loading\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uC8FC\\uC694 \\uC8FC\\uAC00 \\uC9C0\\uC218\\uC5D0 \\uB300\\uD55C \\uC815\\uBCF4\\uB97C \\uB85C\\uB4DC\\uD558\\uB294 \\uC11C\\uBE44\\uC2A4\\uB97C \\uB9CC\\uB4E4\\uC5B4 service layer\\uB97C \\uD655\\uC7A5\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC774 \\uC11C\\uBE44\\uC2A4\\uB294 HttpClient\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC FinancialModelingPrep API\\uC5D0\\uC11C JSON \\uB370\\uC774\\uD130\\uB97C \\uAC80\\uC0C9\\uD558\\uACE0\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Json.NET\\uC744 \\uC0AC\\uC6A9\\uD558\\uC5EC JSON\\uC744 \\uAC1C\\uCCB4\\uB85C \\uC5ED\\uC9C1\\uB82C\\uD654\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7F0 \\uB2E4\\uC74C, I use the service in a ViewModel to load major stock index information.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Extend our service layer by creating a service to load information about major stock indexes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / IMajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IMajorIndexService\\n{\\n    Task<MajorIndex> GetMajorIndex(MajorIndexType indexType);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / MajorIndex.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndex\\n{\\n    public double Price { get; set; }\\n    public double Changes { get; set; }\\n    public MajorIndexType Type { get; set; }\\n}\\n\\npublic enum MajorIndexType\\n{\\n    DowJones,\\n    Nasdaq,\\n    SP500\\n}\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. Use an HttpClient\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add a new project : Class Library - SimpleTrader.FinancialModelingPrepAPI\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / MajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// NuGet - Newtonsoft.Json \\uC124\\uCE58 : JsonConvert.DeserializeObject();\\n\\npublic class MajorIndexService : IMajorIndexService\\n{\\n    public async Task<MajorIndex> GetMajorIndex(MajorIndexType indexType)\\n    {\\n        string apikey = \\\"?apikey=de2b\\\";\\n        string uri = \\\"https://finte.com/api/\\\" + GetUriSuffix(indexType) + apikey;\\n\\n        using(HttpClient client = new HttpClient())\\n        {\\n            HttpResponseMessage response = await client.GetAsync(uri);\\n            string jsonResponse = await response.Content.ReadAsStringAsync();\\n\\n            MajorIndex majorIndex = \\n                    JsonConvert.DeserializeObject<MajorIndex>(jsonResponse);\\n\\n            return majorIndex;\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Testing - SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    new MajorIndexService()\\n        .GetMajorIndex(Domain.Models.MajorIndexType.DowJones)\\n        .ContinueWith((task) =>\\n        {\\n            // Since we named the MajorIndex properties the same \\n            // as the fields of the JSON API object,\\n            // the properties are automatically populated when we deserialize.\\n            MajorIndex index = task.Result;\\n        });\\n    \\n    ....\\n}        \\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / MajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndexService : IMajorIndexService\\n{\\n    public async Task<MajorIndex> GetMajorIndex(MajorIndexType indexType)\\n    {\\n        string apikey = \\\"?apikey=de2b\\\";\\n        string uri = \\\"https://finte.com/api/\\\" + GetUriSuffix(indexType) + apikey;\\n\\n        using(HttpClient client = new HttpClient())\\n        {\\n            HttpResponseMessage response = await client.GetAsync(uri);\\n            string jsonResponse = await response.Content.ReadAsStringAsync();\\n\\n            MajorIndex majorIndex = \\n                    JsonConvert.DeserializeObject<MajorIndex>(jsonResponse);\\n            majorIndex.Type = indexType;\\n            //majorIndex.Price = 23.00;\\n            //majorIndex.Changes = 2.0;\\n\\n            return majorIndex;\\n        }\\n    }\\n\\n    private string GetUriSuffix(MajorIndexType indexType)\\n    {\\n        switch (indexType)\\n        {\\n            case MajorIndexType.DowJones:\\n                return \\\"%5EDJI\\\";\\n            case MajorIndexType.Nasdaq:\\n                return \\\"%5EIXIC\\\";\\n            case MajorIndexType.SP500:\\n                return \\\"%5EGSPC\\\";\\n            default:\\n                return \\\"%5EDJI\\\";\\n        }\\n    }\\n}\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Async ViewModel Loading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / MajorIndexViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndexViewModel\\n{\\n    private readonly IMajorIndexService _majorIndexService;\\n    public MajorIndex DowJones { get; set; }\\n    public MajorIndex Nasdaq { get; set; }\\n    public MajorIndex SP500 { get; set; }\\n\\n    public MajorIndexViewModel(IMajorIndexService majorIndexService)\\n    {\\n        _majorIndexService = majorIndexService;\\n    }\\n\\n    // whthout having a MajorIndexViewModel\\n    public static MajorIndexViewModel \\n                    LoadMajorIndexViewModel(IMajorIndexService majorIndexService)\\n    {\\n        MajorIndexViewModel majorIndexViewModel = \\n                    new MajorIndexViewModel(majorIndexService);\\n        majorIndexViewModel.LoadMajorIndexs();\\n        return majorIndexViewModel;\\n    }\\n\\n    private async Task LoadMajorIndexs()\\n    {\\n        DowJones = await _majorIndexService.GetMajorIndex(MajorIndexType.DowJones);\\n        Nasdaq = await _majorIndexService.GetMajorIndex(MajorIndexType.Nasdaq);\\n        SP500 = await _majorIndexService.GetMajorIndex(MajorIndexType.SP500);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / MajorIndexViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"....\\n\\n// Task\\uB97C \\uAE30\\uB2E4\\uB9AC\\uAE30 \\uBCF4\\uB2E4 \\uC2E4\\uD589\\uC744 \\uACC4\\uC18D \\uADF8\\uB798\\uC11C void\\nprivate void LoadMajorIndexs()\\n    {\\n        _majorIndexService\\n            .GetMajorIndex(MajorIndexType.DowJones)\\n            // ContinueWith\\uB294 \\uC791\\uC5C5\\uC758 \\uACB0\\uACFC\\uB97C \\uCF5C\\uBC31\\uD558\\uBBC0\\uB85C \\uC5EC\\uAE30\\uC5D0 \\uC791\\uC740 \\uD568\\uC218\\uB97C \\uC804\\uB2EC.\\n            .ContinueWith(task =>  \\n            {\\n                if (task.Exception == null)\\n                {\\n                    DowJones = task.Result;\\n                }\\n            });\\n\\n        _majorIndexService\\n            .GetMajorIndex(MajorIndexType.Nasdaq)\\n            .ContinueWith(task =>\\n            {\\n                if (task.Exception == null)\\n                {\\n                    Nasdaq = task.Result;\\n                }\\n            });\\n\\n        _majorIndexService\\n            .GetMajorIndex(MajorIndexType.SP500)\\n            .ContinueWith(task =>\\n            {\\n                if (task.Exception == null)\\n                {\\n                    SP500 = task.Result;\\n                }\\n            });\\n    }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / HomeViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class HomeViewModel : ViewModelBase\\n{\\n    public MajorIndexViewModel MajorIndexViewModel { get; set; }\\n\\n    public HomeViewModel(MajorIndexViewModel majorIndexViewModel)\\n    {\\n        MajorIndexViewModel = majorIndexViewModel;\\n    }        \\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / UpdateCurrentViewModelCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"case ViewType.Home:\\n    _navigator.CurrentViewModel = \\n        new HomeViewModel(MajorIndexViewModel\\n                .LoadMajorIndexViewModel(new MajorIndexService()));\\n    break;\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/fullStackWPF/API-Service-Calls-and-Async-ViewModel-Loading-04/","previous":{"id":"0ae16d5d-9dae-54a3-bdf7-3ed3cc6da2e4","fields":{"slug":"/fullStackWPF/WPF-in-dotNET-and-MVVM-Navigation-03/"},"frontmatter":{"title":"FULL STACK WFP 03 - WPF in .NET and MVVM Navigation"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 03 - WPF in .NET and MVVM Navigation\",\n  \"date\": \"2021-05-12 03\",\n  \"tag\": \"WPF, FullStack, Navigation, MVVM\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"Simple Trader front-end\\uB97C \\uC704\\uD55C WPF project\\uB97C \\uC124\\uC815\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"MVVM \\uBC29\\uC2DD\\uC73C\\uB85C \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC124\\uC815\\uD558\\uACE0 \\uB9E4\\uC6B0 \\uAC04\\uB2E8\\uD55C navigation control\\uB97C \\uB9CC\\uB4E4\\uACE0 \\uBDF0 \\uBAA8\\uB378 \\uAC04 \\uD0D0\\uC0C9\\uC744 \\uC124\\uC815\\uD55C\\uB2E4. \"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. WPF project \\uC124\\uC815 \\uBC0F MVVM \\uBC29\\uC2DD\\uC73C\\uB85C \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC124\\uC815\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add a new project : WPF Application - SimpleTrader.WPF\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAE30\\uBCF8 \\uC124\\uC815\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add Reference - SimpleTrader.Domain, SimpleTrader.EntityFrameworks\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3F4\\uB354 \\uC0DD\\uC131 - ViewModels, Views\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"App.xaml - StartupUrl=\\u201CMainWindow.xaml\\u201D line \\uC0AD\\uC81C\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"App.xaml.cs - \\uCD94\\uAC00\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    Window window = new MainWindow();        \\n    window.Show();\\n\\n    base.OnStartup(e);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"F5 \\uC2E4\\uD589 \\uC644\\uB8CC\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ViewModels / MainViewModel.cs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ViewModels / ViewModelBase.cs\"))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. Control\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Simple Wire Frame\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/O-uRlqWtzwgvgR6KTQTvWB12dLcnprtXOZ9RpewO6Pc2PGmlIFvAXMHVyW-1tw1BpD0J9uuiYVOk4GOJ4o22MHC2l2XDvTWP3qBXfZ05d39oMr7XxHKwd4pydCDEzTj85Vc-JuaafEs28Fai8ismVpCURBLNTcyIxpNwdOrOH5CvzWlhRMFpHuvWd_ABD_SIaE5CoDmetrqkUE1idi7Qz2HWituNVxt9XzAUmyT8_e-PtJWjvsyA9VEgddOqNETKWQA4Yc0le3tsT793Mk9GfVgT1WAKVIaEe0VwO88vciTdFkye82k5865Afn6omRp-xEGwTyncXjxR8ZYFV3ceNCBUgpcEfRFp9U8tOfLCPtKzgUPoZ4tGrcFugyBtT5pIAM1GnOMAXAh0UPCGKLVb5qd_QyY9fDE2jbsyn9mc_0kK_gR1nrk5BaqQqaBob8sulxb7c8DzYue1y3LhTLZZbbfkdVLchqB0yIxItpqaHbRrSr5pfWj22glADxwweUy9LpXGlSZfBH7QH76IO_a1fR38VWz8mVTvKR-5of71aftwbUw8npzlq5OSUNCNcDePSKE851iujkJDE2noO8blB1qXsEM-YMsyFp6gDmQ9oqml4J3uKcxvNZoVVtZep8PrXpVG28vUlEcFaSXQC4XRpAGabKEB8Hhus3UeIFEmRvPBfYpXyTCEhWTX2pP9lmjwNXJn4Xd7S1wr3JcT-CQ-ZA=w1342-h603-no?authuser=0\",\n    \"alt\": \"alt\"\n  })))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3F4\\uB354 \\uC0DD\\uC131 - SimpleTrader.WPF / Controls\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Controls - NavigationBar.xaml (user control)\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Navigation Bar \\uAE30\\uB2A5\\uC744 \\uD558\\uB294 user control\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <TextBlock Grid.Row=\\\"0\\\" \\n                Text=\\\"Simple Trader\\\"/>\\n    <Grid Grid.Row=\\\"1\\\" >\\n        <Grid.ColumnDefinitions>\\n            <ColumnDefinition Width=\\\"auto\\\" />\\n            <ColumnDefinition Width=\\\"auto\\\" />\\n            <ColumnDefinition Width=\\\"auto\\\" />\\n            <ColumnDefinition Width=\\\"auto\\\" />\\n            <ColumnDefinition Width=\\\"*\\\" />\\n        </Grid.ColumnDefinitions>\\n\\n        <RadioButton Grid.Column=\\\"0\\\" />\\n        <RadioButton Grid.Column=\\\"1\\\" />\\n        <RadioButton Grid.Column=\\\"2\\\" Content=\\\"Buy\\\" />\\n        <RadioButton Grid.Column=\\\"3\\\" Content=\\\"Sell\\\" />\\n    </Grid>\\n</Grid>\\n\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"MainWindow.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// MainWindow\\uC5D0 NavigationBar \\uC5F0\\uACB0\\n\\nxmlns:controls=\\\"clr-namespace:SimpleTrader.WPF.Controls\\\"\\n\\n<Grid>\\n    <controls:NavigationBar/>\\n</Grid>\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Style\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3F4\\uB354 \\uC0DD\\uC131 - SimpleTrader.WPF / Styles \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Styles / Common.xaml (Resource Dictionary)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<!--Colors-->\\n<Color x:Key=\\\"ColorPrimary1\\\">#799540</Color>\\n<Color x:Key=\\\"ColorPrimary2\\\">#50632b</Color>\\n\\n<!--Brushes-->\\n<SolidColorBrush x:Key=\\\"BrushPrimary1\\\" Color=\\\"{StaticResource ColorPrimary1}\\\" />\\n<SolidColorBrush x:Key=\\\"BrushPrimary2\\\" Color=\\\"{StaticResource ColorPrimary2}\\\" />\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"App.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Application\\uC5D0 \\uC2A4\\uD0C0\\uC77C \\uB4F1\\uB85D\\n\\n<Application.Resources>\\n    \\n    <ResourceDictionary>\\n        <ResourceDictionary.MergedDictionaries>\\n            <ResourceDictionary Source=\\\"/Styles/Common.xaml\\\" />\\n        </ResourceDictionary.MergedDictionaries>\\n    \\n    </ResourceDictionary>\\n\\n</Application.Resources>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uB4F1\\uB85D\\uD55C \\uC2A4\\uD0C0\\uC77C \\uC801\\uC6A9\\n<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <TextBlock Grid.Row=\\\"0\\\" \\n               Text=\\\"Simple Trader\\\"\\n               Background=\\\"{StaticResource BrushPrimary1}\\\"/>\\n    <Grid Grid.Row=\\\"1\\\" Background=\\\"{StaticResource BrushPrimary2}\\\">\\n\\n    ....\\n\\n    </Grid>\\n</Grid>\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"4. Setup navigation between view models\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ViewModels / HomeViewModel.cs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ViewModels / PortfolioViewModel.cs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3F4\\uB354 \\uC0DD\\uC131 - SimpleTrader.WPF / State \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3F4\\uB354 \\uC0DD\\uC131 - SimpleTrader.WPF / State / Navigators\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ State / Navigators / INavigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface INavigator\\n{\\n    ViewModelBase CurrentViewModel { get; set; }\\n    ICommand UpdateCurrentViewModelCommand { get; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ State / Navigators / Navigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class Navigator : INavigator\\n{\\n    public ViewModelBase CurrentViewModel{ get; set; }\\n\\n    public ICommand UpdateCurrentViewModelCommand => \\n                        throw new NotImplementedException();       \\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3F4\\uB354 \\uC0DD\\uC131 - SimpleTrader.WPF / Commands\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Commands / UpdateCurrentViewModelCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class UpdateCurrentViewModelCommand : ICommand\\n{\\n    public event EventHandler CanExecuteChanged;\\n\\n    private INavigator _navigator;\\n\\n    public UpdateCurrentViewModelCommand(INavigator navigator)\\n    {\\n        _navigator = navigator;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public void Execute(object parameter)\\n    {\\n        if (parameter is ViewType)\\n        {\\n            ViewType viewType = (ViewType)parameter;\\n            switch (viewType)\\n            {\\n                case ViewType.Home:\\n                    _navigator.CurrentViewModel = new HomeViewModel();\\n                    break;\\n                case ViewType.Portfolio:\\n                    _navigator.CurrentViewModel = new PortfolioViewModel();\\n                    break;\\n                default:\\n                    break;\\n            }\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ State / Navigators / INavigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public enum ViewType\\n{\\n    Home,\\n    Portfolio,\\n}\\n\\n....\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ State / Navigators / Navigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class Navigator : INavigator\\n{\\n    ....\\n\\n    public ICommand UpdateCurrentViewModelCommand => \\n                        new UpdateCurrentViewModelCommand(this);       \\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ViewModels / MainViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MainViewModel : ViewModelBase\\n{\\n    public INavigator Navigator { get; set; } = new Navigator();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Binding Command\\n\\nxmlns:nav=\\\"clr-namespace:SimpleTrader.WPF.State.Navigators\\\"\\n\\n....\\n\\n<RadioButton Grid.Column=\\\"0\\\" \\n                Content=\\\"Home\\\" \\n                Command=\\\"{Binding UpdateCurrentViewModelCommand}\\\" \\n                CommandParameter=\\\"{x:Static nav:ViewType.Home}\\\" />\\n<RadioButton Grid.Column=\\\"1\\\" \\n                Content=\\\"Portfolio\\\"\\n                Command=\\\"{Binding UpdateCurrentViewModelCommand}\\\" \\n                CommandParameter=\\\"{x:Static nav:ViewType.Portfolio}\\\" />\\n<RadioButton Grid.Column=\\\"2\\\" Content=\\\"Buy\\\" />\\n<RadioButton Grid.Column=\\\"3\\\" Content=\\\"Sell\\\" />\\n\\n....\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"MainWindow.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// MainWindow\\uC5D0 NavigationBar \\uC5F0\\uACB0\\n\\nxmlns:controls=\\\"clr-namespace:SimpleTrader.WPF.Controls\\\"\\n\\n<Grid>\\n    <controls:NavigationBar Grid.Row=\\\"0\\\" DataContext=\\\"{Binding Navigator}\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    ....\\n\\n    window.DataContext = new MainViewModel();\\n\\n    ....\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"MainWindow.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uB77C\\uB514\\uC624 \\uBC84\\uD2BC \\uD074\\uB9AD \\uC2DC \\uBDF0\\uBAA8\\uB378 \\uBC14\\uC778\\uB529\\n\\n<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n    \\n    <controls:NavigationBar Grid.Row=\\\"0\\\" DataContext=\\\"{Binding Navigator}\\\" />\\n    <ContentControl Grid.Row=\\\"1\\\" Content=\\\"{Binding Navigator.CurrentViewModel}\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ State / Navigators / Navigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uD074\\uB9AD\\uC2DC \\uC18D\\uC131 \\uBCC0\\uD654\\uB97C \\uC704\\uD574 INotifyPropertyChanged\\uC744 \\uC801\\uC6A9\\n\\npublic class Navigator : INavigator, INotifyPropertyChanged\\n{\\n    private ViewModelBase _currentViewModel;\\n    public ViewModelBase CurrentViewModel\\n    {\\n        get\\n        {\\n            return _currentViewModel;\\n        }\\n        set\\n        {\\n            _currentViewModel = value;\\n            OnPropertyChanged(nameof(CurrentViewModel));\\n        }\\n    }\\n    \\n    public ICommand UpdateCurrentViewModelCommand => \\n                        new UpdateCurrentViewModelCommand(this); \\n\\n    public event PropertyChangedEventHandler PropertyChanged;\\n\\n    protected void OnPropertyChanged(string propertyName)\\n    {\\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ Models / ObservableObject.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// INotifyPropertyChanged\\uB97C \\uAD6C\\uD604\\uD55C \\uD074\\uB798\\uC2A4 \\uC791\\uC131\\npublic class ObservableObject : INotifyPropertyChanged\\n{\\n    public event PropertyChangedEventHandler PropertyChanged;\\n\\n    protected void OnPropertyChanged(string propertyName)\\n    {\\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ State / Navigators / Navigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// INotifyPropertyChanged\\uB97C \\uAD6C\\uD604\\uD55C \\uD074\\uB798\\uC2A4\\uB97C \\uC0C1\\uC18D\\n\\npublic class Navigator : ObservableObject, INavigator\\n{\\n    private ViewModelBase _currentViewModel;\\n    public ViewModelBase CurrentViewModel\\n    {\\n        get\\n        {\\n            return _currentViewModel;\\n        }\\n        set\\n        {\\n            _currentViewModel = value;\\n            OnPropertyChanged(nameof(CurrentViewModel));\\n        }\\n    }\\n\\n    public ICommand UpdateCurrentViewModelCommand => \\n                        new UpdateCurrentViewModelCommand(this);        \\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ Views / HomeView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <TextBlock Text=\\\"Home\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"/ Views / PortfolioView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <TextBlock Text=\\\"Portfolio\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"App.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Application\\uC5D0 DataTemplate\\uC73C\\uB85C \\uBDF0\\uBAA8\\uB378-\\uBDF0 \\uB4F1\\uB85D\\n\\nxmlns:viewmodels=\\\"clr-namespace:SimpleTrader.WPF.ViewModels\\\"\\nxmlns:views=\\\"clr-namespace:SimpleTrader.WPF.Views\\\"\\n\\n<Application.Resources>\\n    \\n    <ResourceDictionary>\\n        ....\\n\\n        <DataTemplate DataType=\\\"{x:Type viewmodels:HomeViewModel}\\\">\\n            <views:HomeView />\\n        </DataTemplate>\\n        <DataTemplate DataType=\\\"{x:Type viewmodels:PortfolioViewModel}\\\">\\n            <views:PortfolioView />\\n        </DataTemplate>\\n    \\n    </ResourceDictionary>\\n    \\n</Application.Resources>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"F5\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"0894568c-6b39-5c8e-8e9d-71525e33fd6f","fields":{"slug":"/fullStackWPF/Styling-the-Navigation-Bar-05/"},"frontmatter":{"title":"FULL STACK WFP 05 - Styling the Navigation Bar"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 05 - Styling the Navigation Bar\",\n  \"date\": \"2021-05-12 05\",\n  \"tag\": \"WPF, FullStack, WPF styling, custom control template, animations, triggers\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"WPF styling\\uC73C\\uB85C navigation bar\\uB97C \\uD5A5\\uC0C1\\uC2DC\\uD0A8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The navigation bar styles\\uC740 \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uCCB4\\uACC4\\uC801\\uC73C\\uB85C \\uC720\\uC9C0\\uD558\\uAE30 \\uC704\\uD574 \\uC790\\uCCB4 resource dictionary\\uC5D0 \\uACA9\\uB9AC\\uB41C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The navigation bar resource dictionary consists of a style for the navigation bar radio buttons.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB77C\\uB514\\uC624 \\uBC84\\uD2BC \\uC2A4\\uD0C0\\uC77C\\uC740 \\uC0AC\\uC6A9\\uC790 \\uC815\\uC758 \\uCEE8\\uD2B8\\uB864 \\uD15C\\uD50C\\uB9BF\\uC744 \\uC815\\uC758\\uD558\\uACE0 \\uB2E4\\uC591\\uD55C \\uC560\\uB2C8\\uBA54\\uC774\\uC158\\uACFC \\uD2B8\\uB9AC\\uAC70\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. The navigation bar styles are isolated in their own resource dictionary\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Styles / NavigationBar.xaml (Resource Dictionary)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Style x:Key=\\\"NavButton\\\" TargetType=\\\"RadioButton\\\">\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"RadioButton\\\">\\n                <Grid>\\n                    <TextBlock Text=\\\"{TemplateBinding Content}\\\"\\n                               HorizontalAlignment=\\n                                    \\\"{TemplateBinding HorizontalContentAlignment}\\\" />\\n                </Grid>                    \\n        </Setter.Value>\\n    </Setter>    \\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / App.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"....\\n\\n<ResourceDictionary Source=\\\"/Styles/NavigationBar.xaml\\\" />\\n\\n....\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid Grid.Row=\\\"1\\\" RenderOptions.EdgeMode=\\\"Aliased\\\"\\n          Background=\\\"{StaticResource BrushPrimary2}\\\">\\n        \\n        ....\\n\\n        <Grid.Resources>\\n            <Style TargetType=\\\"RadioButton\\\" BasedOn=\\\"{StaticResource NavButton}\\\" />\\n        </Grid.Resources>\\n        \\n        ....\\n    </Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Styles / NavigationBar.xaml (Resource Dictionary)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Style x:Key=\\\"NavButton\\\" TargetType=\\\"RadioButton\\\">\\n    \\n    ....\\n\\n    <Setter Property=\\\"Foreground\\\" Value=\\\"White\\\" />\\n    <Setter Property=\\\"Padding\\\" Value=\\\"10 5\\\" />\\n    <Setter Property=\\\"FontSize\\\" Value=\\\"18\\\" />\\n\\n    ....\\n\\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Styles / NavigationBar.xaml (Resource Dictionary)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uB9C8\\uC6B0\\uC2A4 \\uC774\\uBCA4\\uD2B8 \\uD2B8\\uB9AC\\uAC70\\n\\n<Style x:Key=\\\"NavButton\\\" TargetType=\\\"RadioButton\\\">        \\n\\n    ....\\n\\n    <Style.Triggers>\\n        <EventTrigger RoutedEvent=\\\"MouseEnter\\\">\\n            <BeginStoryboard>\\n                <Storyboard>\\n                    <ColorAnimation To=\\\"{StaticResource ColorPrimary1}\\\"\\n                                    Duration=\\\"0:0:0.1\\\"\\n                                    Storyboard.TargetProperty=\\\"Background.Color\\\" />\\n                </Storyboard>\\n            </BeginStoryboard>\\n        </EventTrigger>\\n        <EventTrigger RoutedEvent=\\\"MouseLeave\\\">\\n            <BeginStoryboard>\\n                <Storyboard>\\n                    <ColorAnimation To=\\\"{StaticResource ColorPrimary2}\\\"\\n                                    Duration=\\\"0:0:0.1\\\"\\n                                    Storyboard.TargetProperty=\\\"Background.Color\\\" />\\n                </Storyboard>\\n            </BeginStoryboard>\\n        </EventTrigger>\\n    </Style.Triggers>\\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Styles / NavigationBar.xaml (Resource Dictionary)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Style x:Key=\\\"NavButton\\\" TargetType=\\\"RadioButton\\\">        \\n\\n    ....\\n\\n    <Setter Property=\\\"Template\\\">\\n\\n        ....\\n\\n                <!-- \\uB77C\\uB514\\uC624 \\uBC84\\uD2BC \\uD074\\uB9AD \\uC2DC \\uD2B8\\uB9AC\\uAC70-->\\n                <ControlTemplate.Triggers>\\n                    <Trigger Property=\\\"IsChecked\\\" Value=\\\"True\\\">\\n                        <Setter Property=\\\"Background\\\" \\n                                Value=\\\"{StaticResource BrushPrimary1}\\\"\\n                                TargetName=\\\"gridMain\\\" />\\n                    </Trigger>\\n                </ControlTemplate.Triggers>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n\\n....\\n\\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Styles / NavigationBar.xaml (Resource Dictionary)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Style x:Key=\\\"NavButton\\\" TargetType=\\\"RadioButton\\\">\\n    <Setter Property=\\\"Foreground\\\" Value=\\\"White\\\" />\\n    <Setter Property=\\\"Padding\\\" Value=\\\"10 5\\\" />\\n    <Setter Property=\\\"FontSize\\\" Value=\\\"18\\\" />\\n    <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary2}\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"RadioButton\\\">\\n                <Grid x:Name=\\\"gridMain\\\" Background=\\\"{TemplateBinding Background}\\\">\\n                    <TextBlock Text=\\\"{TemplateBinding Content}\\\"\\n                               Padding=\\\"{TemplateBinding Padding}\\\"\\n                               HorizontalAlignment=\\n                                    \\\"{TemplateBinding HorizontalContentAlignment}\\\" />\\n                </Grid>\\n                <!-- \\uB77C\\uB514\\uC624 \\uBC84\\uD2BC \\uD074\\uB9AD \\uC2DC \\uD2B8\\uB9AC\\uAC70-->\\n                <ControlTemplate.Triggers>\\n                    <Trigger Property=\\\"IsChecked\\\" Value=\\\"True\\\">\\n                        <Setter Property=\\\"Background\\\" \\n                                Value=\\\"{StaticResource BrushPrimary1}\\\"\\n                                TargetName=\\\"gridMain\\\" />\\n                    </Trigger>\\n                </ControlTemplate.Triggers>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n    <Style.Triggers>\\n        <EventTrigger RoutedEvent=\\\"MouseEnter\\\">\\n            <BeginStoryboard>\\n                <Storyboard>\\n                    <ColorAnimation To=\\\"{StaticResource ColorPrimary1}\\\"\\n                                    Duration=\\\"0:0:0.1\\\"\\n                                    Storyboard.TargetProperty=\\\"Background.Color\\\" />\\n                </Storyboard>\\n            </BeginStoryboard>\\n        </EventTrigger>\\n        <EventTrigger RoutedEvent=\\\"MouseLeave\\\">\\n            <BeginStoryboard>\\n                <Storyboard>\\n                    <ColorAnimation To=\\\"{StaticResource ColorPrimary2}\\\"\\n                                    Duration=\\\"0:0:0.1\\\"\\n                                    Storyboard.TargetProperty=\\\"Background.Color\\\" />\\n                </Storyboard>\\n            </BeginStoryboard>\\n        </EventTrigger>\\n    </Style.Triggers>\\n</Style>\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}