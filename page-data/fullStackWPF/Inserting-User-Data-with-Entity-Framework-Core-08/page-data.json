{"componentChunkName":"component---src-templates-archive-post-js","path":"/fullStackWPF/Inserting-User-Data-with-Entity-Framework-Core-08/","result":{"data":{"mdx":{"id":"9775fc7b-02fa-5258-87a7-ebdd6fe98c5f","excerpt":"계정(accounts)에서 주식을 구매할 수있는 IBuyStockService를 만든다. 이 서비스는 이전 에피소드에서 생성 된 계정의 IStockPriceService 및 IDataService를 사용한다. 또한 Entity Framework…","frontmatter":{"title":"FULL STACK WFP 08 - Inserting User Data with Entity Framework Core","date":"May 12, 2021","tag":"WPF, FullStack, Refactoring"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 08 - Inserting User Data with Entity Framework Core\",\n  \"date\": \"2021-05-12 08\",\n  \"tag\": \"WPF, FullStack, Refactoring\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uACC4\\uC815(accounts)\\uC5D0\\uC11C \\uC8FC\\uC2DD\\uC744 \\uAD6C\\uB9E4\\uD560 \\uC218\\uC788\\uB294 IBuyStockService\\uB97C \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC774 \\uC11C\\uBE44\\uC2A4\\uB294 \\uC774\\uC804 \\uC5D0\\uD53C\\uC18C\\uB4DC\\uC5D0\\uC11C \\uC0DD\\uC131 \\uB41C \\uACC4\\uC815\\uC758 IStockPriceService \\uBC0F IDataService\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C Entity Framework \\uD0D0\\uC0C9 \\uC18D\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD558\\uBBC0\\uB85C \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uC640 \\uD1B5\\uC2E0\\uD558\\uB294 GenericDataService\\uB97C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uACE0 AccountDataService\\uB97C \\uB9CC\\uB4E4\\uC5B4\\uC57C\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"AccountDataService\\uB294 AssetTransactions\\uC640 \\uAC19\\uC740 \\uACC4\\uC815\\uACFC \\uAD00\\uB828\\uB41C \\uC815\\uBCF4\\uB97C \\uCFFC\\uB9AC\\uD558\\uB3C4\\uB85D Entity Framework\\uC5D0 \\uBA85\\uC2DC\\uC801\\uC73C\\uB85C \\uC9C0\\uC2DC\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Create a IBuyStockService that allows accounts to purchase stocks.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / /TransactionServices / IBuyStockService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IBuyStockService\\n{\\n    Task<Account> BuyStock(Account buyer, string stock, int shares);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / /TransactionServices / BuyStockService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyStockService : IBuyStockService\\n{\\n    private readonly IStockPriceService _stockPriceService;\\n    private readonly IDataService<Account> _accountService;\\n\\n    public BuyStockService(IStockPriceService stockPriceService, \\n        IDataService<Account> accountService)\\n    {\\n        _stockPriceService = stockPriceService;\\n        _accountService = accountService;\\n    }\\n\\n    public async Task<Account> BuyStock(Account buyer, string symbol, int shares)\\n    {\\n        double stockPrice = await _stockPriceService.GetPrice(symbol);\\n        double transactionPrice = stockPrice * shares;\\n\\n        if (transactionPrice > buyer.Balance)\\n        {\\n            throw new InsufficientFundsException(buyer.Balance, transactionPrice);\\n        }\\n\\n        AssetTransaction transaction = new AssetTransaction()\\n        {\\n            Account = buyer,\\n            Asset = new Asset()\\n            {\\n                pricePerShare = stockPrice,\\n                Symbol = symbol\\n            },\\n            DateProcessed = DateTime.Now,\\n            Shares = shares,\\n            IsPurchase = true\\n        };\\n\\n        buyer.AssetTransactions.Add(transaction); \\n        // Account.cs \\uC218\\uC815 => Add() \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC704\\uD574\\n        // IEnumerable<AssetTransaction> AssetTransactions {get; set;} =>\\n        // ICollection<AssetTransaction> AssetTransactions {get; set;}\\n\\n        buyer.Balance -= transactionPrice;\\n\\n        await _accountService.Update(buyer.Id, buyer);\\n\\n        return buyer;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Exceptions / InsufficientFundsException.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class InsufficientFundsException : Exception\\n{\\n    public double AccountBalance { get; set; }\\n    public double RequiredBalance { get; set; }\\n\\n    public InsufficientFundsException(double accountBalance, double requiredBalance)\\n    {\\n        AccountBalance = accountBalance;\\n        RequiredBalance = requiredBalance;\\n    }\\n\\n    public InsufficientFundsException(double accountBalance, \\n        double requiredBalance, string message) : base(message)\\n    {\\n        AccountBalance = accountBalance;\\n        RequiredBalance = requiredBalance;\\n    }\\n\\n    public InsufficientFundsException(double accountBalance, \\n        double requiredBalance, string message, Exception innerException) \\n            : base(message, innerException)\\n    {\\n        AccountBalance = accountBalance;\\n        RequiredBalance = requiredBalance;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"IDataService<Account> accountService = \\n        new GenericDataServices<Account>(\\n            new EntityFramework.SimpleTraderDbContextFactory());\\nIStockPriceService stockPriceService = \\n        new StockPriceService();\\nIBuyStockService buyStockService = \\n        new BuyStockService(stockPriceService, accountService);\\n\\nAccount buyer = await accountService.Get(1);\\n\\nawait buyStockService.BuyStock(buyer, \\\"T\\\", 5); // => \\uC5D0\\uB7EC \\uBC1C\\uC0DD\\n// Entity Framework \\uD0D0\\uC0C9 \\uC18D\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD558\\uBBC0\\uB85C \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uC640 \\uD1B5\\uC2E0\\uD558\\uB294 \\n// GenericDataService\\uB97C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uACE0 AccountDataService\\uB97C \\uB9CC\\uB4E4\\uC5B4\\uC57C\\uD55C\\uB2E4.\\n// AccountDataService\\uB294 AssetTransactions\\uC640 \\uAC19\\uC740 \\uACC4\\uC815\\uACFC \\uAD00\\uB828\\uB41C \\uC815\\uBCF4\\uB97C \\uCFFC\\uB9AC\\uD558\\uB3C4\\uB85D \\n// Entity Framework\\uC5D0 \\uBA85\\uC2DC\\uC801\\uC73C\\uB85C \\uC9C0\\uC2DC\\uD55C\\uB2E4.\\n\\nWindow window = new MainWindow();\\n...\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. GenericDataService\\uB97C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uACE0 AccountDataService\\uB97C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.EntityFramework / Services / AccountDataService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AccountDataService : IDataService<Account>\\n{\\n    private readonly SimpleTraderDbContextFactory _contextFactory;\\n    private readonly NonQueryDataService<Account> _nonQueryDataService;\\n\\n    public AccountDataService(SimpleTraderDbContextFactory contextFactory)\\n    {\\n        _contextFactory = contextFactory;\\n        _nonQueryDataService = new NonQueryDataService<Account>(contextFactory);\\n    }\\n\\n    public async Task<Account> Create(Account entity)\\n    {\\n        return await _nonQueryDataService.Create(entity);\\n    }\\n\\n    public async Task<bool> Delete(int id)\\n    {\\n        return await _nonQueryDataService.Delete(id);\\n    }\\n\\n    public async Task<Account> Get(int id)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            Account entity = await context\\n                .Accounts  // \\uC218\\uC815\\uB428.\\n                .Include(a => a.AssetTransactions) // \\uC218\\uC815\\uB428.\\n                .FirstOrDefaultAsync((e) => e.Id == id);\\n\\n            return entity;\\n        }\\n    }\\n\\n    public async Task<IEnumerable<Account>> GetAll()\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            IEnumerable<Account> entities = await context\\n                .Accounts.Include(a => a.AssetTransactions) \\n                .ToListAsync();\\n\\n            return entities;\\n        }\\n    }\\n\\n    public async Task<Account> Update(int id, Account entity)\\n    {\\n        return await _nonQueryDataService.Update(id, entity);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.EntityFramework / Services / Common / NonQueryDataService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class NonQueryDataService<T> where T : DomainObject\\n{\\n    private readonly SimpleTraderDbContextFactory _contextFactory;\\n\\n    public NonQueryDataService(SimpleTraderDbContextFactory contextFactory)\\n    {\\n        _contextFactory = contextFactory;\\n    }\\n\\n    public async Task<T> Create(T entity)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            EntityEntry<T> createdResult = await context.Set<T>().AddAsync(entity);\\n            await context.SaveChangesAsync();\\n\\n            return createdResult.Entity;\\n        }\\n    }\\n\\n    public async Task<bool> Delete(int id)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            T entity = await context.Set<T>().FirstOrDefaultAsync((e) => e.Id == id);\\n            context.Set<T>().Remove(entity);\\n            await context.SaveChangesAsync();\\n\\n            return true;\\n        }\\n    }\\n\\n    public async Task<T> Update(int id, T entity)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            entity.Id = id;\\n\\n            context.Set<T>().Update(entity);\\n            await context.SaveChangesAsync();\\n\\n            return entity;\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.EntityFramework / Services / GenericDataServices.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class GenericDataServices<T> : IDataService<T> where T : DomainObject\\n{\\n    private readonly SimpleTraderDbContextFactory _contextFactory;\\n    private readonly NonQueryDataService<T> _nonQueryDataService;\\n\\n    public GenericDataServices(SimpleTraderDbContextFactory contextFactory)\\n    {\\n        _contextFactory = contextFactory;\\n        _nonQueryDataService = new NonQueryDataService<T>(contextFactory);\\n    }\\n\\n    public async Task<T> Create(T entity)\\n    {\\n        return await _nonQueryDataService.Create(entity);\\n    }\\n\\n    public async Task<bool> Delete(int id)\\n    {\\n        return await _nonQueryDataService.Delete(id);\\n    }\\n\\n    public async Task<T> Get(int id)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            T entity = await context.Set<T>().FirstOrDefaultAsync((e) => e.Id == id);\\n\\n            return entity;\\n        }\\n    }\\n\\n    public async Task<IEnumerable<T>> GetAll()\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            IEnumerable<T> entities = await context.Set<T>().ToListAsync();\\n\\n            return entities;\\n        }\\n    }\\n\\n    public async Task<T> Update(int id, T entity)\\n    {\\n        return await _nonQueryDataService.Update(id, entity);\\n    }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/fullStackWPF/Inserting-User-Data-with-Entity-Framework-Core-08/","previous":{"id":"e63043dc-1e9a-52ec-ba04-0385716ff7e2","fields":{"slug":"/fullStackWPF/Fetching-Stock-Prices-and-Refactoring-API-Calls-07/"},"frontmatter":{"title":"FULL STACK WFP 07 - Fetching Stock Prices and Refactoring API Calls"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 07 - Fetching Stock Prices and Refactoring API Calls\",\n  \"date\": \"2021-05-12 07\",\n  \"tag\": \"WPF, FullStack, Refactoring\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"Simbol\\uC5D0 \\uB300\\uD55C Stock Price\\uB97C \\uAC00\\uC838 \\uC624\\uB294 Service Class\\uB97C \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"StockPriceService\\uC640 MajorIndexService \\uC0AC\\uC774\\uC758 \\uC911\\uBCF5\\uC744 \\uBC1C\\uACAC \\uD55C \\uD6C4 \\uC0AC\\uC6A9\\uC790 \\uC9C0\\uC815 HttpClient\\uB97C \\uB3C4\\uC785\\uD558\\uC5EC \\uB450 \\uD074\\uB798\\uC2A4\\uB97C \\uBAA8\\uB450 \\uB9AC\\uD329\\uD130\\uB9C1\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C StockPriceService\\uC5D0 \\uC798\\uBABB\\uB41C \\uAE30\\uD638\\uAC00 \\uC804\\uB2EC \\uB420 \\uB54C throw \\uD560 custom exception\\uC744 \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"switch \\uBB38\\uC5D0 \\uB300\\uD55C \\uAE30\\uBCF8\\uAC12\\uC73C\\uB85C \\uC608\\uC678\\uB97C \\uB358\\uC9C0\\uACE0 MajorIndexes\\uC5D0 \\uB300\\uD574 Name \\uCD94\\uAC00\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Stock \\uD074\\uB798\\uC2A4\\uC758 \\uC774\\uB984\\uC744 Asset\\uC73C\\uB85C \\uBCC0\\uACBD\\uD558\\uC5EC \\uC751\\uC6A9 \\uD504\\uB85C\\uADF8\\uB7A8 \\uC804\\uCCB4\\uB97C \\uC815\\uB9AC\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Fetching Stock Prices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / IStockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IStockPriceService \\n{\\n    Task<double> GetPrice(string symbol);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / StockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class StockPriceService : IStockPriceService\\n{\\n    public async Task<double> GetPrice(string symbol)\\n    {\\n        using (FinancialModelingPrepHttpClient client = \\n            new FinancialModelingPrepHttpClient())\\n        {\\n            string apikey = \\\"?apikey=de2b8964\\\";\\n            string uri = \\\"quote-short/\\\" + symbol + apikey;\\n\\n            HttpResponseMessage response = await GetAsync(uri);\\n            string jsonResponse = await response.Content.ReadAsStringAsync();\\n\\n            StockPriceResult stockPriceResult = \\n                JsonConvert.DeserializeObject<StockPriceResult>(jsonResponse);\\n\\n            return stockPriceResult.Price;\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Results / StockPriceResult.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class StockPriceResult\\n{\\n    public double Price { get; set; }\\n}\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. StockPriceService\\uC640 MajorIndexService \\uC0AC\\uC774\\uC758 \\uC911\\uBCF5\\uC744 \\uB9AC\\uD329\\uD130\\uB9C1\\uD55C\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / FinancialModelingPrepHttpClient.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class FinancialModelingPrepHttpClient : HttpClient\\n{\\n    public FinancialModelingPrepHttpClient()\\n    {\\n        this.BaseAddress = new Uri(\\\"https://financialmodelingprep.com/api/v3/\\\");\\n    }\\n\\n    public async Task<T> GetAsync<T>(string uri)\\n    {\\n        HttpResponseMessage response = await GetAsync(uri);\\n        string jsonResponse = await response.Content.ReadAsStringAsync();\\n\\n        // '[',']' \\uBB38\\uC790 \\uC81C\\uAC70\\uB85C \\uBB38\\uC81C \\uD574\\uACB0\\n        jsonResponse = string.Join(string.Empty, jsonResponse.Split('[', ']'));\\n\\n        return JsonConvert.DeserializeObject<T>(jsonResponse);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / MajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async Task<MajorIndex> GetMajorIndex(MajorIndexType indexType)\\n    {\\n        string apikey = \\\"?apikey=de2b8964\\\";\\n        string uri = \\\"quote/\\\" + GetUriSuffix(indexType) + apikey;\\n\\n        using(FinancialModelingPrepHttpClient client = \\n            new FinancialModelingPrepHttpClient())\\n        {\\n            MajorIndex majorIndex = await client.GetAsync<MajorIndex>(uri);\\n            majorIndex.Type = indexType;\\n\\n            return majorIndex;\\n        }\\n    }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / StockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async Task<double> GetPrice(string symbol)\\n    {\\n        using (FinancialModelingPrepHttpClient client = \\n            new FinancialModelingPrepHttpClient())\\n        {\\n            string apikey = \\\"?apikey=de2b8964\\\";\\n            string uri = \\\"quote-short/\\\" + symbol + apikey;\\n\\n            StockPriceResult stockPriceResult = \\n                await client.GetAsync<StockPriceResult>(uri);\\n\\n            return stockPriceResult.Price;\\n        }\\n    }\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. StockPriceService\\uC5D0 \\uC798\\uBABB\\uB41C \\uAE30\\uD638\\uAC00 \\uC804\\uB2EC \\uB420 \\uB54C throw \\uD560 custom exception\\uC744 \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Exceptions / InvalidSymbolException.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class InvalidSymbolException : Exception\\n{\\n    public string Symbol { get; set; }\\n\\n    public InvalidSymbolException(string symbol)\\n    {\\n        Symbol = symbol;\\n    }\\n\\n    public InvalidSymbolException(string symbol, string message) : base(message)\\n    {\\n        Symbol = symbol;\\n    }\\n\\n    public InvalidSymbolException(string symbol, \\n        string message, Exception innerException) : base(message, innerException)\\n    {\\n        Symbol = symbol;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / StockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"using (FinancialModelingPrepHttpClient client = new FinancialModelingPrepHttpClient())\\n{\\n    ...\\n\\n    if (stockPriceResult.Price == 0)\\n    {\\n        throw new InvalidSymbolException(symbol);\\n    }\\n\\n    return stockPriceResult.Price;\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / MajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"private string GetUriSuffix(MajorIndexType indexType)\\n{\\n    switch (indexType)\\n    {\\n        case MajorIndexType.DowJones:\\n            return \\\"%5EDJI\\\";\\n        case MajorIndexType.Nasdaq:\\n            return \\\"%5EIXIC\\\";\\n        case MajorIndexType.SP500:\\n            return \\\"%5EGSPC\\\";\\n        default:\\n            throw new Exception(\\\"MajorInexType does not have a suffix defined.\\\"); \\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / MajorIndex.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndex\\n{\\n    public string Name { get; set; }  // \\uCD94\\uAC00\\n    public double Price { get; set; }\\n    public double Change { get; set; }\\n    public MajorIndexType Type { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / MajorIndexCard.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<TextBlock Grid.Row=\\\"0\\\" FontSize=\\\"18\\\" \\n           HorizontalAlignment=\\\"Center\\\"\\n           Text=\\\"{Binding Name, FallbackValue=Name}\\\" />\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"4. Stock \\uD074\\uB798\\uC2A4\\uC758 \\uC774\\uB984\\uC744 Asset\\uC73C\\uB85C \\uBCC0\\uACBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / Asset.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Stock.cs -> Asset.cs \\uC774\\uB984 \\uBCC0\\uACBD\\n\\npublic class Asset\\n{\\n    // add-migration stock-to-asset \\uBA85\\uB839\\uC774 \\uC2E4\\uD328\\uD558\\uB294 \\uACBD\\uC6B0\\uB294\\n    // \\uAC01 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBE4C\\uB4DC\\uAC00 \\uC2E4\\uD328\\uD588\\uC744 \\uB54C \\uB098\\uD0C0\\uB09C\\uB2E4. \\uC989 \\uAC01 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBE4C\\uB4DC \\uC2DC\\uB3C4!\\n    public string Symbol { get; set; }\\n    public double pricePerShare { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / AssetTransaction.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AssetTransaction : DomainObject\\n{\\n    public Account Account { get; set; }\\n    public bool IsPurchase { get; set; }\\n    public Asset Asset { get; set; }   // Stock -> Asset\\n    public int Shares { get; set; }\\n    public DateTime DateProcessed { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Package Manager Console\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"PM> add-migration stock-to-asset  \\nPM> update-database\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"8edec8a9-606b-582d-8396-537c3e94ff7f","fields":{"slug":"/fullStackWPF/Dependency-Injection-Setup-09/"},"frontmatter":{"title":"FULL STACK WFP 09 - Dependency Injection Setup"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 09 - Dependency Injection Setup\",\n  \"date\": \"2021-05-12 09\",\n  \"tag\": \"WPF, FullStack, Dependency Injection, DI, singleton, scoped, transient\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uAE30\\uBCF8 \\uC81C\\uACF5 \\uC885\\uC18D\\uC131 \\uC8FC\\uC785 .NET Core package\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC885\\uC18D\\uC131 \\uC8FC\\uC785\\uC744 \\uC124\\uC815\\uD588\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC885\\uC18D\\uC131 \\uC8FC\\uC785\\uC758 \\uC774\\uC810\\uACFC \\uC11C\\uBE44\\uC2A4\\uB97C singleton, scoped \\uB610\\uB294 transient(\\uC784\\uC2DC)\\uB85C \\uB4F1\\uB85D\\uD558\\uB294 \\uAC83\\uC758 \\uCC28\\uC774\\uC810\\uC5D0 \\uB300\\uD574 \\uC124\\uBA85\\uD55C\\uB2E4.\\n\\uB610\\uD55C \\uBDF0 \\uBAA8\\uB378 \\uC0DD\\uC131\\uC744 \\uD329\\uD1A0\\uB9AC\\uB85C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uC5EC \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158\\uC758 \\uBDF0 \\uBAA8\\uB378\\uC5D0 \\uB300\\uD55C \\uBAA8\\uB4E0 \\uC885\\uC18D\\uC131\\uC774 \\uC885\\uC18D\\uC131 \\uC8FC\\uC785 \\uCEE8\\uD14C\\uC774\\uB108\\uC5D0\\uC11C \\uD574\\uACB0\\uB418\\uB3C4\\uB85D\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Setup dependency injection.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We want the dependency injection container to automatically create all the services.   \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Give us services with dependencies already passed in.   \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define all application dependencies in one isolated plasce. (the dependecny injection container)   \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    // Don't pass around your IServiceProvider!\\n    IServiceProvider serviceProvider = CreateServiceProvider();\\n\\n    Window window = new MainWindow();\\n    Window window = serviceProvider.GetRequiredService<MainViewModel>();\\n    window.Show();\\n\\n    base.OnStartup(e); \\n}\\n\\nprivate IServiceProvider CreateServiceProvider()\\n{\\n    IServiceCollection services = new ServiceCollection();\\n\\n    // 1. Singleton - one instance per application\\n    // 2. Transient - different instance everytime\\n    // 3. Scoped - one instance per \\\"scope\\\"\\n\\n    services.AddSingleton<SimpleTraderDbContextFactory>(); \\n    // we do not depend on that interface anywhere.\\n    services.AddSingleton<IDataService<Account>, AccountDataService>();\\n    services.AddSingleton<IStockPriceService, StockPriceService>();\\n    services.AddSingleton<IBuyStockService, BuyStockService>();\\n\\n    services.AddScoped<INavigator, Navigator>();  // MainViewModel.cs \\uC218\\uC815\\n    services.AddScoped<MainViewModel>();\\n\\n    return services.BuildServiceProvider();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / MainViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MainViewModel : ViewModelBase\\n{\\n    public INavigator Navigator { get; set; }\\n\\n    public MainViewModel(INavigator navigator)\\n    {\\n        Navigator = navigator;\\n\\n        Navigator.UpdateCurrentViewModelCommand.Execute(ViewType.Home);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / ISimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface ISimpleTraderViewModelAbstractFactory\\n{\\n    ViewModelBase CreateViewModel(ViewType viewType);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SimpleTraderViewModelAbstractFactory : \\n    ISimpleTraderViewModelAbstractFactory\\n{\\n    public ViewModelBase CreateViewModel(ViewType viewType)\\n    {\\n        switch (viewType)\\n        {\\n            case ViewType.Home:\\n                return new HomeViewModel(\\n                    MajorIndexListingViewModel.LoadMajorIndexViewModel(\\n                        new MajorIndexService()));\\n            case ViewType.Portfolio:\\n                return new PortfolioViewModel();\\n            default:\\n                throw new ArgumentException(\\n                    \\\"The ViewType does not have a ViewModel.\\\", \\\"viewType\\\");\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / ISimpleTraderViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface ISimpleTraderViewModelFactory<T> where T : ViewModelBase\\n{\\n    T CreateViewModel();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / HomeViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class HomeViewModelFactory : ISimpleTraderViewModelFactory<HomeViewModel>\\n{\\n    private readonly ISimpleTraderViewModelFactory<MajorIndexListingViewModel> \\n        _majorIndexViewModelFactory;\\n\\n    public HomeViewModelFactory(\\n        ISimpleTraderViewModelFactory<MajorIndexListingViewModel> \\n            majorIndexViewModelFactory)\\n    {\\n        _majorIndexViewModelFactory = majorIndexViewModelFactory;\\n    }\\n\\n    public HomeViewModel CreateViewModel()\\n    {\\n        return new HomeViewModel(_majorIndexViewModelFactory.CreateViewModel());\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / MajorIndexListingViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndexListingViewModelFactory : \\n    ISimpleTraderViewModelFactory<MajorIndexListingViewModel>\\n{\\n    private readonly IMajorIndexService _majorIndexService;\\n\\n    public MajorIndexListingViewModelFactory(IMajorIndexService majorIndexService)\\n    {\\n        _majorIndexService = majorIndexService;\\n    }\\n\\n    public MajorIndexListingViewModel CreateViewModel()\\n    {\\n        return MajorIndexListingViewModel.LoadMajorIndexViewModel(_majorIndexService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SimpleTraderViewModelAbstractFactory : \\n    ISimpleTraderViewModelAbstractFactory\\n{\\n    private readonly ISimpleTraderViewModelFactory<HomeViewModel> \\n        _homeViewModelFactory;\\n    private readonly ISimpleTraderViewModelFactory<PortfolioViewModel> \\n        _portfolioViewModelFactory;\\n\\n    public SimpleTraderViewModelAbstractFactory(\\n        ISimpleTraderViewModelFactory<HomeViewModel> homeViewModelFactory, \\n        ISimpleTraderViewModelFactory<PortfolioViewModel> portfolioViewModelFactory)\\n    {\\n        _homeViewModelFactory = homeViewModelFactory;\\n        _portfolioViewModelFactory = portfolioViewModelFactory;\\n    }\\n\\n    public ViewModelBase CreateViewModel(ViewType viewType)\\n    {\\n        switch (viewType)\\n        {\\n            case ViewType.Home:\\n                return _homeViewModelFactory.CreateViewModel();\\n            case ViewType.Portfolio:\\n                return _portfolioViewModelFactory.CreateViewModel();\\n            default:\\n                throw new ArgumentException(\\n                    \\\"The ViewType does not have a ViewModel.\\\", \\\"viewType\\\");\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / PortfolioViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class PortfolioViewModelFactory : \\n    ISimpleTraderViewModelFactory<PortfolioViewModel>\\n{\\n    public PortfolioViewModel CreateViewModel()\\n    {\\n        return new PortfolioViewModel();\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    // Don't pass around your IServiceProvider!\\n    IServiceProvider serviceProvider = CreateServiceProvider();\\n\\n    Window window = new MainWindow();\\n    Window window = serviceProvider.GetRequiredService<MainViewModel>();\\n    window.Show();\\n\\n    base.OnStartup(e); \\n}\\n\\nprivate IServiceProvider CreateServiceProvider()\\n{\\n    IServiceCollection services = new ServiceCollection();\\n\\n    // 1. Singleton - one instance per application\\n    // 2. Transient - different instance everytime\\n    // 3. Scoped - one instance per \\\"scope\\\"\\n\\n    services.AddSingleton<SimpleTraderDbContextFactory>(); \\n    // we do not depend on that interface anywhere.\\n    services.AddSingleton<IDataService<Account>, AccountDataService>();\\n    services.AddSingleton<IStockPriceService, StockPriceService>();\\n    services.AddSingleton<IBuyStockService, BuyStockService>();\\n\\n    // \\uCD94\\uAC00\\n    services.AddSingleton<IMajorIndexService, MajorIndexService>();\\n\\n    services.AddSingleton<ISimpleTraderViewModelAbstractFactory, \\n        SimpleTraderViewModelAbstractFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<HomeViewModel>, \\n        HomeViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<PortfolioViewModel>, \\n        PortfolioViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<\\n        MajorIndexListingViewModel>, MajorIndexListingViewModelFactory>();\\n    // \\uCD94\\uAC00 \\uC644\\uB8CC\\n\\n    services.AddScoped<INavigator, Navigator>();  // MainViewModel.cs \\uC218\\uC815\\n    services.AddScoped<MainViewModel>();\\n\\n    return services.BuildServiceProvider();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / UpdateCurrentViewModelCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class UpdateCurrentViewModelCommand : ICommand\\n{\\n    public event EventHandler CanExecuteChanged;\\n\\n    private readonly INavigator _navigator;\\n    private readonly ISimpleTraderViewModelAbstractFactory _viewModelFactory;\\n\\n    public UpdateCurrentViewModelCommand(INavigator navigator, \\n        ISimpleTraderViewModelAbstractFactory viewModelFactory)\\n    {\\n        _navigator = navigator;\\n        _viewModelFactory = viewModelFactory;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public void Execute(object parameter)\\n    {\\n        if (parameter is ViewType)\\n        {\\n            ViewType viewType = (ViewType)parameter;\\n\\n            _navigator.CurrentViewModel = _viewModelFactory.CreateViewModel(viewType);\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / State / Navigators\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class Navigator : ObservableObject, INavigator\\n{\\n    private ViewModelBase _currentViewModel;\\n    public ViewModelBase CurrentViewModel\\n    {\\n        get\\n        {\\n            return _currentViewModel;\\n        }\\n        set\\n        {\\n            _currentViewModel = value;\\n            OnPropertyChanged(nameof(CurrentViewModel));\\n        }\\n    }\\n\\n    public ICommand UpdateCurrentViewModelCommand { get; set; }\\n\\n    public Navigator(ISimpleTraderViewModelAbstractFactory viewModelFactory)\\n    {\\n        UpdateCurrentViewModelCommand = \\n            new UpdateCurrentViewModelCommand(this, viewModelFactory);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / MainWindow.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public partial class MainWindow : Window\\n{\\n    public MainWindow(object dataContext)\\n    {\\n        InitializeComponent();\\n\\n        DataContext = dataContext;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    // Don't pass around your IServiceProvider!\\n    IServiceProvider serviceProvider = CreateServiceProvider();\\n\\n    // \\uC218\\uC815 \\uC644\\uB8CC\\n    Window window = serviceProvider.GetRequiredService<MainWindow>();\\n    window.Show();\\n\\n    base.OnStartup(e); \\n}\\n\\nprivate IServiceProvider CreateServiceProvider()\\n{\\n    IServiceCollection services = new ServiceCollection();\\n\\n    // 1. Singleton - one instance per application\\n    // 2. Transient - different instance everytime\\n    // 3. Scoped - one instance per \\\"scope\\\"\\n\\n    services.AddSingleton<SimpleTraderDbContextFactory>(); \\n    // we do not depend on that interface anywhere.\\n    services.AddSingleton<IDataService<Account>, AccountDataService>();\\n    services.AddSingleton<IStockPriceService, StockPriceService>();\\n    services.AddSingleton<IBuyStockService, BuyStockService>();\\n    services.AddSingleton<IMajorIndexService, MajorIndexService>();\\n\\n    services.AddSingleton<ISimpleTraderViewModelAbstractFactory, \\n        SimpleTraderViewModelAbstractFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<HomeViewModel>, \\n        HomeViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<PortfolioViewModel>, \\n        PortfolioViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<\\n        MajorIndexListingViewModel>, MajorIndexListingViewModelFactory>();\\n\\n    services.AddScoped<INavigator, Navigator>(); \\n    services.AddScoped<MainViewModel>();\\n\\n    // \\uC218\\uC815\\n    // We can't just resolve the MainViewModel automatically\\n    // because the MainWindow constructor takes an \\\"object\\\"\\n    services.AddScoped<MainWindow>(\\n        s => new MainWindow(s.GetRequiredService<MainViewModel>()));\\n\\n    return services.BuildServiceProvider();\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}