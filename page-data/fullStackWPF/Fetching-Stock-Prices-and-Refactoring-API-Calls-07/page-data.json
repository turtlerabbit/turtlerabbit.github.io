{"componentChunkName":"component---src-templates-archive-post-js","path":"/fullStackWPF/Fetching-Stock-Prices-and-Refactoring-API-Calls-07/","result":{"data":{"mdx":{"id":"e63043dc-1e9a-52ec-ba04-0385716ff7e2","excerpt":"Simbol에 대한 Stock Price를 가져 오는 Service Class를 만든다. StockPriceService와 MajorIndexService 사이의 중복을 발견 한 후 사용자 지정 HttpClient…","frontmatter":{"title":"FULL STACK WFP 07 - Fetching Stock Prices and Refactoring API Calls","date":"May 12, 2021","tag":"WPF, FullStack, Refactoring"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 07 - Fetching Stock Prices and Refactoring API Calls\",\n  \"date\": \"2021-05-12 07\",\n  \"tag\": \"WPF, FullStack, Refactoring\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"Simbol\\uC5D0 \\uB300\\uD55C Stock Price\\uB97C \\uAC00\\uC838 \\uC624\\uB294 Service Class\\uB97C \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"StockPriceService\\uC640 MajorIndexService \\uC0AC\\uC774\\uC758 \\uC911\\uBCF5\\uC744 \\uBC1C\\uACAC \\uD55C \\uD6C4 \\uC0AC\\uC6A9\\uC790 \\uC9C0\\uC815 HttpClient\\uB97C \\uB3C4\\uC785\\uD558\\uC5EC \\uB450 \\uD074\\uB798\\uC2A4\\uB97C \\uBAA8\\uB450 \\uB9AC\\uD329\\uD130\\uB9C1\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C StockPriceService\\uC5D0 \\uC798\\uBABB\\uB41C \\uAE30\\uD638\\uAC00 \\uC804\\uB2EC \\uB420 \\uB54C throw \\uD560 custom exception\\uC744 \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"switch \\uBB38\\uC5D0 \\uB300\\uD55C \\uAE30\\uBCF8\\uAC12\\uC73C\\uB85C \\uC608\\uC678\\uB97C \\uB358\\uC9C0\\uACE0 MajorIndexes\\uC5D0 \\uB300\\uD574 Name \\uCD94\\uAC00\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Stock \\uD074\\uB798\\uC2A4\\uC758 \\uC774\\uB984\\uC744 Asset\\uC73C\\uB85C \\uBCC0\\uACBD\\uD558\\uC5EC \\uC751\\uC6A9 \\uD504\\uB85C\\uADF8\\uB7A8 \\uC804\\uCCB4\\uB97C \\uC815\\uB9AC\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Fetching Stock Prices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / IStockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IStockPriceService \\n{\\n    Task<double> GetPrice(string symbol);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / StockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class StockPriceService : IStockPriceService\\n{\\n    public async Task<double> GetPrice(string symbol)\\n    {\\n        using (FinancialModelingPrepHttpClient client = \\n            new FinancialModelingPrepHttpClient())\\n        {\\n            string apikey = \\\"?apikey=de2b8964\\\";\\n            string uri = \\\"quote-short/\\\" + symbol + apikey;\\n\\n            HttpResponseMessage response = await GetAsync(uri);\\n            string jsonResponse = await response.Content.ReadAsStringAsync();\\n\\n            StockPriceResult stockPriceResult = \\n                JsonConvert.DeserializeObject<StockPriceResult>(jsonResponse);\\n\\n            return stockPriceResult.Price;\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Results / StockPriceResult.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class StockPriceResult\\n{\\n    public double Price { get; set; }\\n}\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. StockPriceService\\uC640 MajorIndexService \\uC0AC\\uC774\\uC758 \\uC911\\uBCF5\\uC744 \\uB9AC\\uD329\\uD130\\uB9C1\\uD55C\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / FinancialModelingPrepHttpClient.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class FinancialModelingPrepHttpClient : HttpClient\\n{\\n    public FinancialModelingPrepHttpClient()\\n    {\\n        this.BaseAddress = new Uri(\\\"https://financialmodelingprep.com/api/v3/\\\");\\n    }\\n\\n    public async Task<T> GetAsync<T>(string uri)\\n    {\\n        HttpResponseMessage response = await GetAsync(uri);\\n        string jsonResponse = await response.Content.ReadAsStringAsync();\\n\\n        // '[',']' \\uBB38\\uC790 \\uC81C\\uAC70\\uB85C \\uBB38\\uC81C \\uD574\\uACB0\\n        jsonResponse = string.Join(string.Empty, jsonResponse.Split('[', ']'));\\n\\n        return JsonConvert.DeserializeObject<T>(jsonResponse);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / MajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async Task<MajorIndex> GetMajorIndex(MajorIndexType indexType)\\n    {\\n        string apikey = \\\"?apikey=de2b8964\\\";\\n        string uri = \\\"quote/\\\" + GetUriSuffix(indexType) + apikey;\\n\\n        using(FinancialModelingPrepHttpClient client = \\n            new FinancialModelingPrepHttpClient())\\n        {\\n            MajorIndex majorIndex = await client.GetAsync<MajorIndex>(uri);\\n            majorIndex.Type = indexType;\\n\\n            return majorIndex;\\n        }\\n    }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / StockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async Task<double> GetPrice(string symbol)\\n    {\\n        using (FinancialModelingPrepHttpClient client = \\n            new FinancialModelingPrepHttpClient())\\n        {\\n            string apikey = \\\"?apikey=de2b8964\\\";\\n            string uri = \\\"quote-short/\\\" + symbol + apikey;\\n\\n            StockPriceResult stockPriceResult = \\n                await client.GetAsync<StockPriceResult>(uri);\\n\\n            return stockPriceResult.Price;\\n        }\\n    }\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. StockPriceService\\uC5D0 \\uC798\\uBABB\\uB41C \\uAE30\\uD638\\uAC00 \\uC804\\uB2EC \\uB420 \\uB54C throw \\uD560 custom exception\\uC744 \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Exceptions / InvalidSymbolException.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class InvalidSymbolException : Exception\\n{\\n    public string Symbol { get; set; }\\n\\n    public InvalidSymbolException(string symbol)\\n    {\\n        Symbol = symbol;\\n    }\\n\\n    public InvalidSymbolException(string symbol, string message) : base(message)\\n    {\\n        Symbol = symbol;\\n    }\\n\\n    public InvalidSymbolException(string symbol, \\n        string message, Exception innerException) : base(message, innerException)\\n    {\\n        Symbol = symbol;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / StockPriceService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"using (FinancialModelingPrepHttpClient client = new FinancialModelingPrepHttpClient())\\n{\\n    ...\\n\\n    if (stockPriceResult.Price == 0)\\n    {\\n        throw new InvalidSymbolException(symbol);\\n    }\\n\\n    return stockPriceResult.Price;\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.FinancialModelingPrepAPI / Services / MajorIndexService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"private string GetUriSuffix(MajorIndexType indexType)\\n{\\n    switch (indexType)\\n    {\\n        case MajorIndexType.DowJones:\\n            return \\\"%5EDJI\\\";\\n        case MajorIndexType.Nasdaq:\\n            return \\\"%5EIXIC\\\";\\n        case MajorIndexType.SP500:\\n            return \\\"%5EGSPC\\\";\\n        default:\\n            throw new Exception(\\\"MajorInexType does not have a suffix defined.\\\"); \\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / MajorIndex.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndex\\n{\\n    public string Name { get; set; }  // \\uCD94\\uAC00\\n    public double Price { get; set; }\\n    public double Change { get; set; }\\n    public MajorIndexType Type { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / MajorIndexCard.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<TextBlock Grid.Row=\\\"0\\\" FontSize=\\\"18\\\" \\n           HorizontalAlignment=\\\"Center\\\"\\n           Text=\\\"{Binding Name, FallbackValue=Name}\\\" />\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"4. Stock \\uD074\\uB798\\uC2A4\\uC758 \\uC774\\uB984\\uC744 Asset\\uC73C\\uB85C \\uBCC0\\uACBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / Asset.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Stock.cs -> Asset.cs \\uC774\\uB984 \\uBCC0\\uACBD\\n\\npublic class Asset\\n{\\n    // add-migration stock-to-asset \\uBA85\\uB839\\uC774 \\uC2E4\\uD328\\uD558\\uB294 \\uACBD\\uC6B0\\uB294\\n    // \\uAC01 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBE4C\\uB4DC\\uAC00 \\uC2E4\\uD328\\uD588\\uC744 \\uB54C \\uB098\\uD0C0\\uB09C\\uB2E4. \\uC989 \\uAC01 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBE4C\\uB4DC \\uC2DC\\uB3C4!\\n    public string Symbol { get; set; }\\n    public double pricePerShare { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / AssetTransaction.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AssetTransaction : DomainObject\\n{\\n    public Account Account { get; set; }\\n    public bool IsPurchase { get; set; }\\n    public Asset Asset { get; set; }   // Stock -> Asset\\n    public int Shares { get; set; }\\n    public DateTime DateProcessed { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Package Manager Console\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"PM> add-migration stock-to-asset  \\nPM> update-database\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/fullStackWPF/Fetching-Stock-Prices-and-Refactoring-API-Calls-07/","previous":{"id":"1a6c4cb0-52ef-589b-ac1e-b45627297692","fields":{"slug":"/fullStackWPF/Creating-a-Card-Control-06/"},"frontmatter":{"title":"FULL STACK WFP 06 - Creating a Card Control"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 06 - Creating a Card Control\",\n  \"date\": \"2021-05-12 06\",\n  \"tag\": \"WPF, FullStack, Converter\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"MajorIndex \\uB370\\uC774\\uD130\\uC5D0 \\uB300\\uD55C card control\\uACFC MajorIndexListingViewModel\\uC5D0 \\uB300\\uD55C user control\\uC744 \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7F0 \\uB2E4\\uC74C HomeView\\uC5D0\\uC11C MajorIndex \\uB370\\uC774\\uD130\\uB97C \\uBCFC \\uC218 \\uC788\\uB3C4\\uB85D MajorIndexListingViewModel\\uC5D0 \\uB300\\uD55C \\uCEE8\\uD2B8\\uB864\\uC744 HomeView\\uC5D0 \\uCD94\\uAC00\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C8\\uC9C0\\uB9C9\\uC73C\\uB85C \\uC2DC\\uC791\\uC2DC HomeView\\uB97C \\uC790\\uB3D9\\uC73C\\uB85C \\uD45C\\uC2DC\\uD558\\uB3C4\\uB85D \\uC751\\uC6A9 \\uD504\\uB85C\\uADF8\\uB7A8\\uC744 \\uC124\\uC815\\uD588\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Creating a card control for the MajorIndex data\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/xDqYYpVR8b994MLsd3Gvg-tYxvJqBGJ6QkS9S6ppfae5ABk3msDBigxhtjPk3DRHcDkdwTYNjRh0ozx8sOdeu87sjioqH5pHhugsSggOYg5ppTCYZXWNhyeKDVGzVH1RJetOkLC7ThMwb2uAnibIGid25QZU4TzKzUXj8rBUSoAlMjiD5TjfwojybDKIpW9RNMDEK54ZnIDm55B5WQxj6lBTVrVI_TW1w2_uz20d4sK4iYS93EUHT3Xd9nrhYTLU-axw_d-gC-7e9_zVldZbwjgWBNWzstPjwXUkEQWEq42zsEK1NQA1ppS2WVFPWC6JZXXPS9z1B5euhZnjyxc4_re7RC_8oE9VHGdmH1Y4gn7sjs4dDQGfRXdQHc6cPFziYt4wnR9IdKBBVTBnOcPkYOawAfqviJBn6geD4gPX5sfr3jrGEUX8PtSZY_n7yYMiOmE2fTpBTlUKrSZTD7oLJFPq15B-GPfd9EVmMUkKtcQG6RhpghKE8IiSbKOr8YE85xzbJmzVBugwpeA7wlYfWJHqW0EMFrFPLKYsR-ybTVArxZuLJcEXf7zbEOFYAdnS44LEWfRB_qjb1UHx2bxUCL40XKhmownf2GJOsB5JhhEl67_JGOSDrxSzVtN26Sm_p8D2bzfNsqzDwQuZiW-RzrkGW-3LcS2YwhaXfUj4LP8vm-gyMWSvtndxSDtIdmh_0RWD_ma16V-J_luIJpIb2w=w1119-h517-no?authuser=0\",\n    \"alt\": \"alt\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / MajorIndexCard.xaml (UserContorl)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Border BorderBrush=\\\"LightGray\\\" BorderThickness=\\\"1\\\" CornerRadius=\\\"10\\\">\\n    <Grid Margin=\\\"10\\\">\\n        <Grid.RowDefinitions>\\n            <RowDefinition Height=\\\"auto\\\" />\\n            <RowDefinition Height=\\\"auto\\\" />\\n        </Grid.RowDefinitions>\\n\\n        <TextBlock Grid.Row=\\\"0\\\" FontSize=\\\"18\\\" \\n                   HorizontalAlignment=\\\"Center\\\"\\n                   Text=\\\"{Binding Type, FallbackValue=Name}\\\" />\\n        <Grid Grid.Row=\\\"1\\\" Margin=\\\"0 10\\\">\\n            <Grid.RowDefinitions>\\n                <RowDefinition Height=\\\"auto\\\" />\\n                <RowDefinition Height=\\\"auto\\\" />\\n            </Grid.RowDefinitions>\\n            <Grid.ColumnDefinitions>\\n                <ColumnDefinition Width=\\\"*\\\" />\\n                <ColumnDefinition Width=\\\"*\\\" />\\n            </Grid.ColumnDefinitions>\\n\\n            <TextBlock Grid.Row=\\\"0\\\" Grid.Column=\\\"0\\\" Margin=\\\"5\\\" Text=\\\"Price\\\" />\\n            <TextBlock Grid.Row=\\\"0\\\" Grid.Column=\\\"1\\\" Margin=\\\"5\\\" \\n                Text=\\\"{Binding Price, StringFormat={}{0:c}, FallbackValue=$0.00}\\\" />\\n\\n            <TextBlock Grid.Row=\\\"1\\\" Grid.Column=\\\"0\\\" Margin=\\\"5\\\" \\n                       HorizontalAlignment=\\\"Right\\\" Text=\\\"Changes\\\" />\\n            <TextBlock Grid.Row=\\\"1\\\" Grid.Column=\\\"1\\\" Margin=\\\"5\\\" \\n                HorizontalAlignment=\\\"Right\\\" \\n                Text=\\\"{Binding Changes, StringFormat={}{0:c}, FallbackValue=$0.00}\\\" />\\n        </Grid>\\n    </Grid>\\n</Border>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / HomeView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <TextBlock Text=\\\"Home\\\" />\\n    <controls:MajorIndexCard \\n                Grid.Row=\\\"1\\\" Margin=\\\"0 10\\\" HorizontalAlignment=\\\"Center\\\"\\n                // testing - MajorIndex \\uB370\\uC774\\uD130\\uB97C MajorIndexCard(card control)\\uC5D0 \\uC801\\uC6A9\\n                DataContext=\\\"{Binding MajorIndexListingViewModel.DowJones}\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / ViewmodelBase.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// public class ObservableObject : INotifyPropertyChanged\\n// ViewModelBase ObservableObject \\uC0C1\\uC18D\\uC73C\\uB85C INotifyPropertyChanged \\uC801\\uC6A9\\n\\npublic class ViewModelBase : ObservableObject\\n{\\n}\\n\\n#\\n\\n// MajorIndexViewModel => MajorIndexListingViewModel (renaming)\\n// ViewModelBase \\uC0C1\\uC18D -> OnPropertyChanged(nameof(DowJones));\\n\\npublic class MajorIndexListingViewModel : ViewModelBase\\n{\\n    private readonly IMajorIndexService _majorIndexService;\\n\\n    private MajorIndex _dowJones;\\n    public MajorIndex DowJones \\n    {\\n        get\\n        {\\n            return _dowJones;\\n        }\\n        set\\n        {\\n            _dowJones = value;\\n            OnPropertyChanged(nameof(DowJones));\\n        }\\n    }\\n\\n    private MajorIndex _nasdaq;\\n    public MajorIndex Nasdaq\\n    {\\n        get\\n        {\\n            return _nasdaq;\\n        }\\n        set\\n        {\\n            _nasdaq = value;\\n            OnPropertyChanged(nameof(Nasdaq));\\n        }\\n    }\\n\\n    private MajorIndex _sp500;\\n    public MajorIndex SP500\\n    {\\n        get\\n        {\\n            return _sp500;\\n        }\\n        set\\n        {\\n            _sp500 = value;\\n            OnPropertyChanged(nameof(SP500));\\n        }\\n    }\\n\\n    ....    \\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. MajorIndexListingViewModel\\uC5D0 \\uB300\\uD55C user control\\uB97C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://lh3.googleusercontent.com/qf1J7ZKsxAJ6pDtXzKYxIKI0oqfv8qraHayI_IDICyvnSsYMI9G6GOUc3FL8EW9kVRjciCzsjPqARQztFemnS1fxAmWhWrn-TLn8otjjJNzDgMc0l75n1I8SVPurEOVUYpvp2HCt0owz5LNceyLcOrqrnd4-QNRHNTn2v8qTnxvp-VYuEZXThjSTyz4ozHbAXNoxa6DQsK99LlqphjyJrAgZ9iQtfROUfOHX8ndj3oF_f3w_dYBCBoumjw2u46_pV5gLHzOWzx2c49KzHkRaenJhuL9-8O_Mvsc-791MNqFtGKrzBg1S20nbxo4suQurrY3Zs97brV8sxJqtsdUz_i-1yDJzWiiaNlEYnazSCbjGHviZP0_ii5e-MYErbuQ0AuEjRLReq8WM7vl6H_I-MCETdbJV3rA0DFq5oBSQmG-D8PzqO3PKoVla3SB53toMAzJRCz7GFpX26oI1lzeFZRTqa0frpxK7HUg_7-vtkESkq3PPUVN2BEOCVIqpv64j015SqvaoAXP6tUf83jTCLQ0WUQZwaO-dXkzSN0wbzU4udz-5jtn66IKI_YyqSOeAIGVWPaOA_T-tPykIRyJQ44GKUZt-HKlAw8rYJEJgFaMdahmym-r_-7vqr9aJuRlfxLaw2dc4rVm249bz9GLCrbeHXMArBE9yEUnW-R0o3KQgT9HMaUiElLQwIQq1H8PPmBf9FZdt7E_SQQE68H9__w=w1083-h355-no?authuser=0\",\n    \"alt\": \"alt\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / MajorIndexListing.xaml (UserContorl)\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <TextBlock Grid.Row=\\\"0\\\" FontSize=\\\"18\\\" Text=\\\"Major Indexes\\\" />\\n    <Grid Grid.Row=\\\"1\\\" Margin=\\\"0 10\\\">\\n        <Grid.ColumnDefinitions>\\n            <ColumnDefinition Width=\\\"*\\\" />\\n            <ColumnDefinition Width=\\\"*\\\" />\\n            <ColumnDefinition Width=\\\"*\\\" />\\n        </Grid.ColumnDefinitions>\\n\\n        <local:MajorIndexCard Grid.Column=\\\"0\\\" Margin=\\\"10 0\\\" \\n                              DataContext=\\\"{Binding Nasdaq}\\\" />\\n        <local:MajorIndexCard Grid.Column=\\\"1\\\" Margin=\\\"10 0\\\" \\n                              DataContext=\\\"{Binding DowJones}\\\" />\\n        <local:MajorIndexCard Grid.Column=\\\"2\\\" Margin=\\\"10 0\\\" \\n                              DataContext=\\\"{Binding SP500}\\\" />\\n    </Grid>\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / HomeView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"....\\n\\n<controls:MajorIndexListing Grid.Row=\\\"1\\\" Margin=\\\"0 10\\\" HorizontalAlignment=\\\"Center\\\"\\n                             DataContext=\\\"{Binding MajorIndexListingViewModel}\\\" />\\n\\n....\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. \\uC2DC\\uC791\\uC2DC HomeView\\uB97C \\uC790\\uB3D9\\uC73C\\uB85C \\uD45C\\uC2DC\\uD558\\uB3C4\\uB85D \\uC751\\uC6A9 \\uD504\\uB85C\\uADF8\\uB7A8 \\uC124\\uC815\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / MainViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// HomeView\\uAC00 \\uC790\\uB3D9\\uC73C\\uB85C \\uC120\\uD0DD \\uC2E4\\uD589\\n\\n....\\n\\npublic MainViewModel()\\n    {\\n        Navigator.UpdateCurrentViewModelCommand.Execute(ViewType.Home);\\n    }\\n\\n....\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// radio button\\uC5D0\\uC11C ISChecked true\\uBA74 \\uC120\\uD0DD \\n// Converter \\uC801\\uC6A9\\n....\\n\\n<RadioButton Grid.Column=\\\"0\\\" Content=\\\"Home\\\" \\n                IsChecked=\\\"{Binding CurrentViewModel}\\\" // 1 \\n                Command=\\\"{Binding UpdateCurrentViewModelCommand}\\\" \\n                CommandParameter=\\\"{x:Static nav:ViewType.Home}\\\" />\\n\\n....\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Converters / EqualValueToParameterConverter.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// 2\\n\\npublic class EqualValueToParameterConverter : IValueConverter\\n{\\n    public object Convert(object value, Type targetType, \\n                                object parameter, CultureInfo culture)\\n    {\\n        return value.ToString() == parameter.ToString();\\n\\n            // value is the CurrentViewModel on the navigator\\n    }\\n\\n    public object ConvertBack(object value, Type targetType, \\n                                object parameter, CultureInfo culture)\\n    {\\n        throw new NotImplementedException();\\n\\n        // we actually don't want anything on convert back \\n        // because we never want to convert from a boolean to a view model\\n        // so to fix that we're gonna set this binding as one-way\\n        // so whenever we check the radio button \\n        // or whenever it gets set the false or anything it's not gonna send\\n        // anything back to this current view model binding.\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// radio button\\uC5D0\\uC11C ISChecked true\\uBA74 \\uC120\\uD0DD \\n// Converter \\uC801\\uC6A9\\n\\n<UserControl.Resources>\\n    <converters:EqualValueToParameterConverter \\n                    x:Key=\\\"EqualValueToParameterConverter\\\" />  // 4\\n</UserControl.Resources>\\n....\\n\\n<RadioButton Grid.Column=\\\"0\\\" Content=\\\"Home\\\" \\n                    IsChecked=\\\"{Binding CurrentViewModel, \\n                    Mode=OneWay,  // 6\\n                    Converter={StaticResource EqualValueToParameterConverter},  // 5\\n                    ConverterParameter={x:Type vm:HomeViewModel}}\\\" // 3\\n\\n....\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"9775fc7b-02fa-5258-87a7-ebdd6fe98c5f","fields":{"slug":"/fullStackWPF/Inserting-User-Data-with-Entity-Framework-Core-08/"},"frontmatter":{"title":"FULL STACK WFP 08 - Inserting User Data with Entity Framework Core"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 08 - Inserting User Data with Entity Framework Core\",\n  \"date\": \"2021-05-12 08\",\n  \"tag\": \"WPF, FullStack, Refactoring\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uACC4\\uC815(accounts)\\uC5D0\\uC11C \\uC8FC\\uC2DD\\uC744 \\uAD6C\\uB9E4\\uD560 \\uC218\\uC788\\uB294 IBuyStockService\\uB97C \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC774 \\uC11C\\uBE44\\uC2A4\\uB294 \\uC774\\uC804 \\uC5D0\\uD53C\\uC18C\\uB4DC\\uC5D0\\uC11C \\uC0DD\\uC131 \\uB41C \\uACC4\\uC815\\uC758 IStockPriceService \\uBC0F IDataService\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C Entity Framework \\uD0D0\\uC0C9 \\uC18D\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD558\\uBBC0\\uB85C \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uC640 \\uD1B5\\uC2E0\\uD558\\uB294 GenericDataService\\uB97C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uACE0 AccountDataService\\uB97C \\uB9CC\\uB4E4\\uC5B4\\uC57C\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"AccountDataService\\uB294 AssetTransactions\\uC640 \\uAC19\\uC740 \\uACC4\\uC815\\uACFC \\uAD00\\uB828\\uB41C \\uC815\\uBCF4\\uB97C \\uCFFC\\uB9AC\\uD558\\uB3C4\\uB85D Entity Framework\\uC5D0 \\uBA85\\uC2DC\\uC801\\uC73C\\uB85C \\uC9C0\\uC2DC\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Create a IBuyStockService that allows accounts to purchase stocks.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / /TransactionServices / IBuyStockService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IBuyStockService\\n{\\n    Task<Account> BuyStock(Account buyer, string stock, int shares);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / /TransactionServices / BuyStockService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyStockService : IBuyStockService\\n{\\n    private readonly IStockPriceService _stockPriceService;\\n    private readonly IDataService<Account> _accountService;\\n\\n    public BuyStockService(IStockPriceService stockPriceService, \\n        IDataService<Account> accountService)\\n    {\\n        _stockPriceService = stockPriceService;\\n        _accountService = accountService;\\n    }\\n\\n    public async Task<Account> BuyStock(Account buyer, string symbol, int shares)\\n    {\\n        double stockPrice = await _stockPriceService.GetPrice(symbol);\\n        double transactionPrice = stockPrice * shares;\\n\\n        if (transactionPrice > buyer.Balance)\\n        {\\n            throw new InsufficientFundsException(buyer.Balance, transactionPrice);\\n        }\\n\\n        AssetTransaction transaction = new AssetTransaction()\\n        {\\n            Account = buyer,\\n            Asset = new Asset()\\n            {\\n                pricePerShare = stockPrice,\\n                Symbol = symbol\\n            },\\n            DateProcessed = DateTime.Now,\\n            Shares = shares,\\n            IsPurchase = true\\n        };\\n\\n        buyer.AssetTransactions.Add(transaction); \\n        // Account.cs \\uC218\\uC815 => Add() \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC704\\uD574\\n        // IEnumerable<AssetTransaction> AssetTransactions {get; set;} =>\\n        // ICollection<AssetTransaction> AssetTransactions {get; set;}\\n\\n        buyer.Balance -= transactionPrice;\\n\\n        await _accountService.Update(buyer.Id, buyer);\\n\\n        return buyer;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Exceptions / InsufficientFundsException.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class InsufficientFundsException : Exception\\n{\\n    public double AccountBalance { get; set; }\\n    public double RequiredBalance { get; set; }\\n\\n    public InsufficientFundsException(double accountBalance, double requiredBalance)\\n    {\\n        AccountBalance = accountBalance;\\n        RequiredBalance = requiredBalance;\\n    }\\n\\n    public InsufficientFundsException(double accountBalance, \\n        double requiredBalance, string message) : base(message)\\n    {\\n        AccountBalance = accountBalance;\\n        RequiredBalance = requiredBalance;\\n    }\\n\\n    public InsufficientFundsException(double accountBalance, \\n        double requiredBalance, string message, Exception innerException) \\n            : base(message, innerException)\\n    {\\n        AccountBalance = accountBalance;\\n        RequiredBalance = requiredBalance;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"IDataService<Account> accountService = \\n        new GenericDataServices<Account>(\\n            new EntityFramework.SimpleTraderDbContextFactory());\\nIStockPriceService stockPriceService = \\n        new StockPriceService();\\nIBuyStockService buyStockService = \\n        new BuyStockService(stockPriceService, accountService);\\n\\nAccount buyer = await accountService.Get(1);\\n\\nawait buyStockService.BuyStock(buyer, \\\"T\\\", 5); // => \\uC5D0\\uB7EC \\uBC1C\\uC0DD\\n// Entity Framework \\uD0D0\\uC0C9 \\uC18D\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD558\\uBBC0\\uB85C \\uB370\\uC774\\uD130\\uBCA0\\uC774\\uC2A4\\uC640 \\uD1B5\\uC2E0\\uD558\\uB294 \\n// GenericDataService\\uB97C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uACE0 AccountDataService\\uB97C \\uB9CC\\uB4E4\\uC5B4\\uC57C\\uD55C\\uB2E4.\\n// AccountDataService\\uB294 AssetTransactions\\uC640 \\uAC19\\uC740 \\uACC4\\uC815\\uACFC \\uAD00\\uB828\\uB41C \\uC815\\uBCF4\\uB97C \\uCFFC\\uB9AC\\uD558\\uB3C4\\uB85D \\n// Entity Framework\\uC5D0 \\uBA85\\uC2DC\\uC801\\uC73C\\uB85C \\uC9C0\\uC2DC\\uD55C\\uB2E4.\\n\\nWindow window = new MainWindow();\\n...\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. GenericDataService\\uB97C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uACE0 AccountDataService\\uB97C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.EntityFramework / Services / AccountDataService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AccountDataService : IDataService<Account>\\n{\\n    private readonly SimpleTraderDbContextFactory _contextFactory;\\n    private readonly NonQueryDataService<Account> _nonQueryDataService;\\n\\n    public AccountDataService(SimpleTraderDbContextFactory contextFactory)\\n    {\\n        _contextFactory = contextFactory;\\n        _nonQueryDataService = new NonQueryDataService<Account>(contextFactory);\\n    }\\n\\n    public async Task<Account> Create(Account entity)\\n    {\\n        return await _nonQueryDataService.Create(entity);\\n    }\\n\\n    public async Task<bool> Delete(int id)\\n    {\\n        return await _nonQueryDataService.Delete(id);\\n    }\\n\\n    public async Task<Account> Get(int id)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            Account entity = await context\\n                .Accounts  // \\uC218\\uC815\\uB428.\\n                .Include(a => a.AssetTransactions) // \\uC218\\uC815\\uB428.\\n                .FirstOrDefaultAsync((e) => e.Id == id);\\n\\n            return entity;\\n        }\\n    }\\n\\n    public async Task<IEnumerable<Account>> GetAll()\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            IEnumerable<Account> entities = await context\\n                .Accounts.Include(a => a.AssetTransactions) \\n                .ToListAsync();\\n\\n            return entities;\\n        }\\n    }\\n\\n    public async Task<Account> Update(int id, Account entity)\\n    {\\n        return await _nonQueryDataService.Update(id, entity);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.EntityFramework / Services / Common / NonQueryDataService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class NonQueryDataService<T> where T : DomainObject\\n{\\n    private readonly SimpleTraderDbContextFactory _contextFactory;\\n\\n    public NonQueryDataService(SimpleTraderDbContextFactory contextFactory)\\n    {\\n        _contextFactory = contextFactory;\\n    }\\n\\n    public async Task<T> Create(T entity)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            EntityEntry<T> createdResult = await context.Set<T>().AddAsync(entity);\\n            await context.SaveChangesAsync();\\n\\n            return createdResult.Entity;\\n        }\\n    }\\n\\n    public async Task<bool> Delete(int id)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            T entity = await context.Set<T>().FirstOrDefaultAsync((e) => e.Id == id);\\n            context.Set<T>().Remove(entity);\\n            await context.SaveChangesAsync();\\n\\n            return true;\\n        }\\n    }\\n\\n    public async Task<T> Update(int id, T entity)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            entity.Id = id;\\n\\n            context.Set<T>().Update(entity);\\n            await context.SaveChangesAsync();\\n\\n            return entity;\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.EntityFramework / Services / GenericDataServices.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class GenericDataServices<T> : IDataService<T> where T : DomainObject\\n{\\n    private readonly SimpleTraderDbContextFactory _contextFactory;\\n    private readonly NonQueryDataService<T> _nonQueryDataService;\\n\\n    public GenericDataServices(SimpleTraderDbContextFactory contextFactory)\\n    {\\n        _contextFactory = contextFactory;\\n        _nonQueryDataService = new NonQueryDataService<T>(contextFactory);\\n    }\\n\\n    public async Task<T> Create(T entity)\\n    {\\n        return await _nonQueryDataService.Create(entity);\\n    }\\n\\n    public async Task<bool> Delete(int id)\\n    {\\n        return await _nonQueryDataService.Delete(id);\\n    }\\n\\n    public async Task<T> Get(int id)\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            T entity = await context.Set<T>().FirstOrDefaultAsync((e) => e.Id == id);\\n\\n            return entity;\\n        }\\n    }\\n\\n    public async Task<IEnumerable<T>> GetAll()\\n    {\\n        using (SimpleTraderDbContext context = _contextFactory.CreateDbContext())\\n        {\\n            IEnumerable<T> entities = await context.Set<T>().ToListAsync();\\n\\n            return entities;\\n        }\\n    }\\n\\n    public async Task<T> Update(int id, T entity)\\n    {\\n        return await _nonQueryDataService.Update(id, entity);\\n    }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}