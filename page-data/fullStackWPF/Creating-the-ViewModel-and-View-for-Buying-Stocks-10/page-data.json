{"componentChunkName":"component---src-templates-archive-post-js","path":"/fullStackWPF/Creating-the-ViewModel-and-View-for-Buying-Stocks-10/","result":{"data":{"mdx":{"id":"4442859d-ef21-579e-93b5-46650e251023","excerpt":"시리즈의 앞부분에 있는 BuyStockService를 사용하여 BuyViewModel 및 BuyView를 만든다. BuyViewModel은 애플리케이션 전체에서 상태가 유지되기 때문에 다른 뷰 모델과 다르다. BuyViewModel 및 BuyView…","frontmatter":{"title":"FULL STACK WFP 10 - Creating the ViewModel and View for Buying Stocks","date":"May 12, 2021","tag":"WPF, FullStack, State"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 10 - Creating the ViewModel and View for Buying Stocks\",\n  \"date\": \"2021-05-12 10\",\n  \"tag\": \"WPF, FullStack, State\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uC2DC\\uB9AC\\uC988\\uC758 \\uC55E\\uBD80\\uBD84\\uC5D0 \\uC788\\uB294 BuyStockService\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC BuyViewModel \\uBC0F BuyView\\uB97C \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"BuyViewModel\\uC740 \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uC804\\uCCB4\\uC5D0\\uC11C \\uC0C1\\uD0DC\\uAC00 \\uC720\\uC9C0\\uB418\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uB2E4\\uB978 \\uBDF0 \\uBAA8\\uB378\\uACFC \\uB2E4\\uB974\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"BuyViewModel \\uBC0F BuyView\\uC5D0 \\uAE30\\uBCF8 \\uAE30\\uB2A5\\uC744 \\uCD94\\uAC00\\uD588\\uC9C0\\uB9CC \\uBDF0 \\uBAA8\\uB378\\uC5D0\\uB294 stock \\uC815\\uBCF4\\uB97C \\uC5BB\\uAE30\\uC704\\uD55C \\uC0C8\\uB85C\\uC6B4 \\uC11C\\uBE44\\uC2A4\\uAC00 \\uD544\\uC694\\uD558\\uBA70 \\uBDF0\\uB97C \\uAC1C\\uC120\\uD574\\uC57C\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Create the BuyViewModel and BuyView\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <TextBlock Text=\\\"Buy Stocks\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<ResourceDictionary>\\n        ...\\n\\n        <DataTemplate DataType=\\\"{x:Type viewmodels:BuyViewModel}\\\">\\n            <views:BuyView />\\n        </DataTemplate>\\n    </ResourceDictionary>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"switch (viewType)\\n{\\n    case ViewType.Home:\\n        return _homeViewModelFactory.CreateViewModel();\\n    case ViewType.Portfolio:\\n        return _portfolioViewModelFactory.CreateViewModel();\\n        // \\uCD94\\uAC00\\n    case ViewType.Buy:\\n        return new BuyViewModel();\\n    ...\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / State / Navigators / INavigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public enum ViewType\\n{\\n    Home,\\n    Portfolio,\\n    Buy\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\n<RadioButton Grid.Column=\\\"2\\\" Content=\\\"Buy\\\"\\n            Command=\\\"{Binding UpdateCurrentViewModelCommand}\\\"\\n            IsChecked=\\\"{Binding CurrentViewModel, Mode=OneWay,\\n                        Converter={StaticResource EqualValueToParameterConverter},\\n                        ConverterParameter={x:Type vm:BuyViewModel}}\\\"\\n            CommandParameter=\\\"{x:Static nav:ViewType.Buy}\\\" />\\n<RadioButton Grid.Column=\\\"3\\\" Content=\\\"Sell\\\" />\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. BuyViewModel\\u2019s state is persisted throughout the application\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"BuyViewModel\\uC740 \\uBAA8\\uB4E0 \\uC815\\uBCF4\\uB97C \\uC783\\uC5B4 \\uBC84\\uB9B4 \\uD544\\uC694\\uAC00 \\uC5C6\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C \\uBAA8\\uB4E0 \\uC0C1\\uD0DC\\uB97C \\uC720\\uC9C0 \\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB2E4\\uB978 view\\uC5D0\\uC11C \\uC804\\uD658\\uD574\\uC11C \\uB2E4\\uC2DC \\uB3CC\\uC544 \\uC654\\uC744 \\uB54C BuyViewModel\\uC740 \\uBAA8\\uB4E0 \\uAC83\\uC774 \\uC5EC\\uC804\\uD788 \\uC874\\uC7AC\\uD558\\uBBC0\\uB85C \\uC2E4\\uC81C\\uB85C\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"factory\\uB97C \\uB9CC\\uB4E4\\uC9C0 \\uC54A\\uACE0 \\uC2E4\\uC81C\\uB85C \\uC0DD\\uC131\\uC790(constructor)\\uB97C \\uD1B5\\uD574 \\uBDF0 \\uBAA8\\uB378\\uC744 \\uC804\\uB2EC\\uD558\\uACE0 \\uC774 \\uBDF0 \\uBAA8\\uB378\\uC740 \\uC0C8 \\uC0C1\\uD0DC\\uB97C \\uB9CC\\uB4E4\\uC9C0 \\uC54A\\uC744 \\uBAA8\\uB4E0 \\uC0C1\\uD0DC\\uB97C \\uC720\\uC9C0\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"BuyViewModel\\uC740 \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uAE30\\uAC04 \\uB3D9\\uC548 \\uB3D9\\uC77C\\uD55C \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uB420 \\uAC83\\uC774\\uB2E4.\\n\\uADF8\\uB798\\uC11C \\uD574\\uC57C \\uD560 \\uC77C\\uC740 \\uC885\\uC18D\\uC131 \\uC8FC\\uC785 \\uCEE8\\uD14C\\uC774\\uB108\\uC5D0 \\uBAA8\\uB378\\uC744 \\uB4F1\\uB85D\\uD574\\uC57C\\uD55C\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"switch (viewType)\\n{\\n    case ViewType.Home:\\n        return _homeViewModelFactory.CreateViewModel();\\n    case ViewType.Portfolio:\\n        return _portfolioViewModelFactory.CreateViewModel();\\n        // \\uCD94\\uAC00\\n    case ViewType.Buy:\\n        return _buyViewModel;\\n    ...\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\nservices.AddScoped<INavigator, Navigator>();\\nservices.AddScoped<MainViewModel>();\\n// \\uCD94\\uAC00\\nservices.AddScoped<BuyViewModel>();\\n...\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / RootSimpleTraderViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uD30C\\uC77C\\uBA85 \\uBCC0\\uACBD : RootSimpleTraderViewModelFactory : IRootSimpleTraderViewModelFactory\\n\\npublic class RootSimpleTraderViewModelFactory : IRootSimpleTraderViewModelFactory\\n{\\n    private readonly ISimpleTraderViewModelFactory<HomeViewModel> \\n        _homeViewModelFactory;\\n    private readonly ISimpleTraderViewModelFactory<PortfolioViewModel> \\n        _portfolioViewModelFactory;\\n    private readonly BuyViewModel _buyViewModel;\\n\\n    public RootSimpleTraderViewModelFactory(\\n        ISimpleTraderViewModelFactory<HomeViewModel> homeViewModelFactory, \\n        ISimpleTraderViewModelFactory<PortfolioViewModel> portfolioViewModelFactory,\\n        BuyViewModel buyViewModel)\\n    {\\n        _homeViewModelFactory = homeViewModelFactory;\\n        _portfolioViewModelFactory = portfolioViewModelFactory;\\n        _buyViewModel = buyViewModel;\\n    }\\n\\n    public ViewModelBase CreateViewModel(ViewType viewType)\\n    {\\n        switch (viewType)\\n        {\\n            case ViewType.Home:\\n                return _homeViewModelFactory.CreateViewModel();\\n            case ViewType.Portfolio:\\n                return _portfolioViewModelFactory.CreateViewModel();\\n            case ViewType.Buy:\\n                return _buyViewModel;\\n            default:\\n                throw new ArgumentException(\\\"\\n                    The ViewType does not have a ViewModel.\\\", \\\"viewType\\\");\\n        }\\n    }\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Add basic functionality to the BuyViewModel and BuyView\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Text=\\\"\\\" /> // BuyViewModel\\uC758 Symbol\\n        <Button Content=\\\"Search\\\" Command=\\\"\\\" />\\n    </WrapPanel>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Text=\\\"{Binding Symbol, UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Content=\\\"Search\\\" Command=\\\"SearchSymbolCommand\\\" /> \\n    </WrapPanel>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }  // \\uCD94\\uAC00\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / SearchSymbolCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SearchSymbolCommand : ICommand\\n{\\n    private readonly BuyViewModel _viewModel;\\n    private readonly IStockPriceService _stockPriceService;\\n\\n    public event EventHandler CanExecuteChanged;\\n\\n    public SearchSymbolCommand(BuyViewModel viewModel, \\n        IStockPriceService stockPriceService)\\n    {\\n        _viewModel = viewModel;\\n        _stockPriceService = stockPriceService;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            double stockPrice = await _stockPriceService.GetPrice(_viewModel.Symbol);\\n            // so the command basically talks back and\\n            // forth between the view model\\n            _viewModel.StockPrice = stockPrice;  // BuyViewModel \\uCD94\\uAC00\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    // \\uCD94\\uAC00\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set { _stockPrice = value; OnPropertyChanged(nameof(StockPrice)); }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    // \\uCD94\\uAC00\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set { _stockPrice = value; OnPropertyChanged(nameof(StockPrice)); }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; } \\n\\n    public BuyViewModel(IStockPriceService stockPriceService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid Margin=\\\"20\\\"  HorizontalAlignment=\\\"Center\\\">\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Width=\\\"100\\\" Text=\\\"{Binding Symbol, \\n                UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Margin=\\\"10 0 0 0\\\" Content=\\\"Search\\\" \\n                Command=\\\"{Binding SearchSymbolCommand}\\\" />\\n    </WrapPanel>\\n\\n    <WrapPanel Margin=\\\"0 10 0 0\\\" Grid.Row=\\\"1\\\">\\n        <Border BorderBrush=\\\"Black\\\" BorderThickness=\\\"1\\\" Padding=\\\"20\\\">\\n            <StackPanel>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Text=\\\"{Binding Symbol}\\\"/>\\n                <TextBlock Margin=\\\"0 10 0 0\\\" \\n                            Text=\\\"{Binding StockPrice, StringFormat={}{0:C}}\\\" />\\n            </StackPanel>\\n        </Border>\\n        <Border BorderBrush=\\\"Black\\\" BorderThickness=\\\"1\\\" Padding=\\\"20\\\">\\n            <StackPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Shares To buy:\\\" />\\n                    <TextBox Width=\\\"50\\\" \\n                                Text=\\\"{Binding SharesToBuy, \\n                                        UpdateSourceTrigger=PropertyChanged}\\\" />\\n                </WrapPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Price per share:\\\" />\\n                    <TextBox Width=\\\"50\\\" \\n                                Text=\\\"{Binding StockPrice, \\n                                    StringFormat={}{0:C}}\\\" />\\n                </WrapPanel >\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Margin=\\\"0 10\\\" \\n                            Text=\\\"{Binding TotalPrice, StringFormat={}{0:C}}\\\" />\\n                <Button Margin=\\\"0 10\\\" Content=\\\"Buy\\\" \\n                        Command=\\\"{Binding BuyStockCommand}\\\" />\\n            </StackPanel>\\n        </Border>\\n    </WrapPanel>\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    private double _stockPrice;\\n\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set { _stockPrice = value; OnPropertyChanged(nameof(StockPrice)); }\\n    }\\n\\n    private int _sharesToBuy;\\n\\n    public int SharesToBuy\\n    {\\n        get { return _sharesToBuy; }\\n        set \\n        { \\n            _sharesToBuy = value; \\n            OnPropertyChanged(nameof(SharesToBuy));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    public double TotalPrice\\n    {\\n        get\\n        {\\n            return SharesToBuy * StockPrice;\\n        }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n    public ICommand BuyStockCommand { get; set; }\\n\\n    public BuyViewModel(IStockPriceService stockPriceService,\\n        IBuyStockService buyStockService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n        BuyStockCommand = new BuyStockCommand(this, buyStockService);\\n    }\\n\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / BuyStockCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public event EventHandler CanExecuteChanged;\\n\\n    private BuyViewModel _buyViewModel;\\n    private IBuyStockService _buyStockService;\\n\\n    public BuyStockCommand(BuyViewModel buyViewModel, IBuyStockService buyStockService)\\n    {\\n        _buyViewModel = buyViewModel;\\n        _buyStockService = buyStockService;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            // in the future, we'll easily have an Account to sue here\\n            Account account = await _buyStockService.BuyStock(new Account()\\n            {\\n                Id = 1,\\n                Balance = 500,\\n                AssetTransactions = new List<AssetTransaction>()\\n            }, _buyViewModel.Symbol, _buyViewModel.SharesToBuy);\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/fullStackWPF/Creating-the-ViewModel-and-View-for-Buying-Stocks-10/","previous":{"id":"8edec8a9-606b-582d-8396-537c3e94ff7f","fields":{"slug":"/fullStackWPF/Dependency-Injection-Setup-09/"},"frontmatter":{"title":"FULL STACK WFP 09 - Dependency Injection Setup"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 09 - Dependency Injection Setup\",\n  \"date\": \"2021-05-12 09\",\n  \"tag\": \"WPF, FullStack, Dependency Injection, DI, singleton, scoped, transient\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uAE30\\uBCF8 \\uC81C\\uACF5 \\uC885\\uC18D\\uC131 \\uC8FC\\uC785 .NET Core package\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC885\\uC18D\\uC131 \\uC8FC\\uC785\\uC744 \\uC124\\uC815\\uD588\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC885\\uC18D\\uC131 \\uC8FC\\uC785\\uC758 \\uC774\\uC810\\uACFC \\uC11C\\uBE44\\uC2A4\\uB97C singleton, scoped \\uB610\\uB294 transient(\\uC784\\uC2DC)\\uB85C \\uB4F1\\uB85D\\uD558\\uB294 \\uAC83\\uC758 \\uCC28\\uC774\\uC810\\uC5D0 \\uB300\\uD574 \\uC124\\uBA85\\uD55C\\uB2E4.\\n\\uB610\\uD55C \\uBDF0 \\uBAA8\\uB378 \\uC0DD\\uC131\\uC744 \\uD329\\uD1A0\\uB9AC\\uB85C \\uB9AC\\uD329\\uD130\\uB9C1\\uD558\\uC5EC \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158\\uC758 \\uBDF0 \\uBAA8\\uB378\\uC5D0 \\uB300\\uD55C \\uBAA8\\uB4E0 \\uC885\\uC18D\\uC131\\uC774 \\uC885\\uC18D\\uC131 \\uC8FC\\uC785 \\uCEE8\\uD14C\\uC774\\uB108\\uC5D0\\uC11C \\uD574\\uACB0\\uB418\\uB3C4\\uB85D\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Setup dependency injection.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We want the dependency injection container to automatically create all the services.   \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Give us services with dependencies already passed in.   \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define all application dependencies in one isolated plasce. (the dependecny injection container)   \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    // Don't pass around your IServiceProvider!\\n    IServiceProvider serviceProvider = CreateServiceProvider();\\n\\n    Window window = new MainWindow();\\n    Window window = serviceProvider.GetRequiredService<MainViewModel>();\\n    window.Show();\\n\\n    base.OnStartup(e); \\n}\\n\\nprivate IServiceProvider CreateServiceProvider()\\n{\\n    IServiceCollection services = new ServiceCollection();\\n\\n    // 1. Singleton - one instance per application\\n    // 2. Transient - different instance everytime\\n    // 3. Scoped - one instance per \\\"scope\\\"\\n\\n    services.AddSingleton<SimpleTraderDbContextFactory>(); \\n    // we do not depend on that interface anywhere.\\n    services.AddSingleton<IDataService<Account>, AccountDataService>();\\n    services.AddSingleton<IStockPriceService, StockPriceService>();\\n    services.AddSingleton<IBuyStockService, BuyStockService>();\\n\\n    services.AddScoped<INavigator, Navigator>();  // MainViewModel.cs \\uC218\\uC815\\n    services.AddScoped<MainViewModel>();\\n\\n    return services.BuildServiceProvider();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / MainViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MainViewModel : ViewModelBase\\n{\\n    public INavigator Navigator { get; set; }\\n\\n    public MainViewModel(INavigator navigator)\\n    {\\n        Navigator = navigator;\\n\\n        Navigator.UpdateCurrentViewModelCommand.Execute(ViewType.Home);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / ISimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface ISimpleTraderViewModelAbstractFactory\\n{\\n    ViewModelBase CreateViewModel(ViewType viewType);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SimpleTraderViewModelAbstractFactory : \\n    ISimpleTraderViewModelAbstractFactory\\n{\\n    public ViewModelBase CreateViewModel(ViewType viewType)\\n    {\\n        switch (viewType)\\n        {\\n            case ViewType.Home:\\n                return new HomeViewModel(\\n                    MajorIndexListingViewModel.LoadMajorIndexViewModel(\\n                        new MajorIndexService()));\\n            case ViewType.Portfolio:\\n                return new PortfolioViewModel();\\n            default:\\n                throw new ArgumentException(\\n                    \\\"The ViewType does not have a ViewModel.\\\", \\\"viewType\\\");\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / ISimpleTraderViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface ISimpleTraderViewModelFactory<T> where T : ViewModelBase\\n{\\n    T CreateViewModel();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / HomeViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class HomeViewModelFactory : ISimpleTraderViewModelFactory<HomeViewModel>\\n{\\n    private readonly ISimpleTraderViewModelFactory<MajorIndexListingViewModel> \\n        _majorIndexViewModelFactory;\\n\\n    public HomeViewModelFactory(\\n        ISimpleTraderViewModelFactory<MajorIndexListingViewModel> \\n            majorIndexViewModelFactory)\\n    {\\n        _majorIndexViewModelFactory = majorIndexViewModelFactory;\\n    }\\n\\n    public HomeViewModel CreateViewModel()\\n    {\\n        return new HomeViewModel(_majorIndexViewModelFactory.CreateViewModel());\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / MajorIndexListingViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class MajorIndexListingViewModelFactory : \\n    ISimpleTraderViewModelFactory<MajorIndexListingViewModel>\\n{\\n    private readonly IMajorIndexService _majorIndexService;\\n\\n    public MajorIndexListingViewModelFactory(IMajorIndexService majorIndexService)\\n    {\\n        _majorIndexService = majorIndexService;\\n    }\\n\\n    public MajorIndexListingViewModel CreateViewModel()\\n    {\\n        return MajorIndexListingViewModel.LoadMajorIndexViewModel(_majorIndexService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SimpleTraderViewModelAbstractFactory : \\n    ISimpleTraderViewModelAbstractFactory\\n{\\n    private readonly ISimpleTraderViewModelFactory<HomeViewModel> \\n        _homeViewModelFactory;\\n    private readonly ISimpleTraderViewModelFactory<PortfolioViewModel> \\n        _portfolioViewModelFactory;\\n\\n    public SimpleTraderViewModelAbstractFactory(\\n        ISimpleTraderViewModelFactory<HomeViewModel> homeViewModelFactory, \\n        ISimpleTraderViewModelFactory<PortfolioViewModel> portfolioViewModelFactory)\\n    {\\n        _homeViewModelFactory = homeViewModelFactory;\\n        _portfolioViewModelFactory = portfolioViewModelFactory;\\n    }\\n\\n    public ViewModelBase CreateViewModel(ViewType viewType)\\n    {\\n        switch (viewType)\\n        {\\n            case ViewType.Home:\\n                return _homeViewModelFactory.CreateViewModel();\\n            case ViewType.Portfolio:\\n                return _portfolioViewModelFactory.CreateViewModel();\\n            default:\\n                throw new ArgumentException(\\n                    \\\"The ViewType does not have a ViewModel.\\\", \\\"viewType\\\");\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / PortfolioViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class PortfolioViewModelFactory : \\n    ISimpleTraderViewModelFactory<PortfolioViewModel>\\n{\\n    public PortfolioViewModel CreateViewModel()\\n    {\\n        return new PortfolioViewModel();\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    // Don't pass around your IServiceProvider!\\n    IServiceProvider serviceProvider = CreateServiceProvider();\\n\\n    Window window = new MainWindow();\\n    Window window = serviceProvider.GetRequiredService<MainViewModel>();\\n    window.Show();\\n\\n    base.OnStartup(e); \\n}\\n\\nprivate IServiceProvider CreateServiceProvider()\\n{\\n    IServiceCollection services = new ServiceCollection();\\n\\n    // 1. Singleton - one instance per application\\n    // 2. Transient - different instance everytime\\n    // 3. Scoped - one instance per \\\"scope\\\"\\n\\n    services.AddSingleton<SimpleTraderDbContextFactory>(); \\n    // we do not depend on that interface anywhere.\\n    services.AddSingleton<IDataService<Account>, AccountDataService>();\\n    services.AddSingleton<IStockPriceService, StockPriceService>();\\n    services.AddSingleton<IBuyStockService, BuyStockService>();\\n\\n    // \\uCD94\\uAC00\\n    services.AddSingleton<IMajorIndexService, MajorIndexService>();\\n\\n    services.AddSingleton<ISimpleTraderViewModelAbstractFactory, \\n        SimpleTraderViewModelAbstractFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<HomeViewModel>, \\n        HomeViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<PortfolioViewModel>, \\n        PortfolioViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<\\n        MajorIndexListingViewModel>, MajorIndexListingViewModelFactory>();\\n    // \\uCD94\\uAC00 \\uC644\\uB8CC\\n\\n    services.AddScoped<INavigator, Navigator>();  // MainViewModel.cs \\uC218\\uC815\\n    services.AddScoped<MainViewModel>();\\n\\n    return services.BuildServiceProvider();\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / UpdateCurrentViewModelCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class UpdateCurrentViewModelCommand : ICommand\\n{\\n    public event EventHandler CanExecuteChanged;\\n\\n    private readonly INavigator _navigator;\\n    private readonly ISimpleTraderViewModelAbstractFactory _viewModelFactory;\\n\\n    public UpdateCurrentViewModelCommand(INavigator navigator, \\n        ISimpleTraderViewModelAbstractFactory viewModelFactory)\\n    {\\n        _navigator = navigator;\\n        _viewModelFactory = viewModelFactory;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public void Execute(object parameter)\\n    {\\n        if (parameter is ViewType)\\n        {\\n            ViewType viewType = (ViewType)parameter;\\n\\n            _navigator.CurrentViewModel = _viewModelFactory.CreateViewModel(viewType);\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / State / Navigators\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class Navigator : ObservableObject, INavigator\\n{\\n    private ViewModelBase _currentViewModel;\\n    public ViewModelBase CurrentViewModel\\n    {\\n        get\\n        {\\n            return _currentViewModel;\\n        }\\n        set\\n        {\\n            _currentViewModel = value;\\n            OnPropertyChanged(nameof(CurrentViewModel));\\n        }\\n    }\\n\\n    public ICommand UpdateCurrentViewModelCommand { get; set; }\\n\\n    public Navigator(ISimpleTraderViewModelAbstractFactory viewModelFactory)\\n    {\\n        UpdateCurrentViewModelCommand = \\n            new UpdateCurrentViewModelCommand(this, viewModelFactory);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / MainWindow.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public partial class MainWindow : Window\\n{\\n    public MainWindow(object dataContext)\\n    {\\n        InitializeComponent();\\n\\n        DataContext = dataContext;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"protected override void OnStartup(StartupEventArgs e)\\n{\\n    // Don't pass around your IServiceProvider!\\n    IServiceProvider serviceProvider = CreateServiceProvider();\\n\\n    // \\uC218\\uC815 \\uC644\\uB8CC\\n    Window window = serviceProvider.GetRequiredService<MainWindow>();\\n    window.Show();\\n\\n    base.OnStartup(e); \\n}\\n\\nprivate IServiceProvider CreateServiceProvider()\\n{\\n    IServiceCollection services = new ServiceCollection();\\n\\n    // 1. Singleton - one instance per application\\n    // 2. Transient - different instance everytime\\n    // 3. Scoped - one instance per \\\"scope\\\"\\n\\n    services.AddSingleton<SimpleTraderDbContextFactory>(); \\n    // we do not depend on that interface anywhere.\\n    services.AddSingleton<IDataService<Account>, AccountDataService>();\\n    services.AddSingleton<IStockPriceService, StockPriceService>();\\n    services.AddSingleton<IBuyStockService, BuyStockService>();\\n    services.AddSingleton<IMajorIndexService, MajorIndexService>();\\n\\n    services.AddSingleton<ISimpleTraderViewModelAbstractFactory, \\n        SimpleTraderViewModelAbstractFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<HomeViewModel>, \\n        HomeViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<PortfolioViewModel>, \\n        PortfolioViewModelFactory>();\\n    services.AddSingleton<ISimpleTraderViewModelFactory<\\n        MajorIndexListingViewModel>, MajorIndexListingViewModelFactory>();\\n\\n    services.AddScoped<INavigator, Navigator>(); \\n    services.AddScoped<MainViewModel>();\\n\\n    // \\uC218\\uC815\\n    // We can't just resolve the MainViewModel automatically\\n    // because the MainWindow constructor takes an \\\"object\\\"\\n    services.AddScoped<MainWindow>(\\n        s => new MainWindow(s.GetRequiredService<MainViewModel>()));\\n\\n    return services.BuildServiceProvider();\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"3a19a179-f5b7-5fbf-a5b5-2b1982c395d5","fields":{"slug":"/fullStackWPF/Dynamic-Views-and-Custom-Element-Styles-11/"},"frontmatter":{"title":"FULL STACK WFP 11 - Dynamic Views and Custom Element Styles"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 11 - Dynamic Views and Custom Element Styles\",\n  \"date\": \"2021-05-12 11\",\n  \"tag\": \"WPF, FullStack, Dynamic Views, Custom Element Styles\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uC8FC\\uC2DD \\uB9E4\\uC785\\uC5D0 \\uC0AC\\uC6A9\\uB418\\uB294 BuyView\\uC758 \\uAE30\\uB2A5, \\uC2A4\\uD0C0\\uC77C, \\uB808\\uC774\\uC544\\uC6C3\\uC744 \\uAC1C\\uC120\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uBDF0\\uC758 \\uAE30\\uB2A5\\uC744 \\uAC1C\\uC120\\uD558\\uAE30 \\uC704\\uD574 BuyViewModel\\uC5D0\\uC11C \\uC77C\\uBD80 \\uC18D\\uC131 \\uBC14\\uC778\\uB529\\uC744 \\uC218\\uC815\\uD558\\uACE0 BuyView\\uC5D0\\uC11C DataTrigger\\uB97C \\uB9CC\\uB4E4\\uC5B4 \\uC8FC\\uC2DD\\uC774 \\uAC80\\uC0C9 \\uB420 \\uB54C\\uAE4C\\uC9C0 \\uAC80\\uC0C9\\uACB0\\uACFC\\uD328\\uB110\\uC744 \\uC228\\uAE34\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C TextBox \\uBC0F Button \\uCEE8\\uD2B8\\uB864\\uC5D0 \\uB300\\uD55C \\uC0AC\\uC6A9\\uC790 \\uC9C0\\uC815 \\uC694\\uC18C \\uC2A4\\uD0C0\\uC77C\\uC744 \\uCD94\\uAC00\\uD558\\uC5EC View\\uC758 \\uC2A4\\uD0C0\\uC77C\\uC744 \\uAC1C\\uC120\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C8\\uC9C0\\uB9C9\\uC73C\\uB85C \\uAC01 \\uD558\\uC704 \\uD328\\uB110\\uC758 \\uD06C\\uAE30\\uB97C \\uAC1C\\uC120\\uD558\\uAE30 \\uC704\\uD574 \\uD328\\uB110 \\uB808\\uC774\\uC544\\uC6C3\\uC744 WrapPanel\\uC5D0\\uC11C \\u2019*\\u2019 \\uB108\\uBE44\\uAC00 \\uC788\\uB294 \\uADF8\\uB9AC\\uB4DC\\uB85C \\uBCC0\\uD658\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Improve the functionality, style, and layout of the BuyView, which is used to purchase stocks.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid Margin=\\\"20\\\">\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Width=\\\"100\\\" Text=\\\"{Binding Symbol, \\n                                    UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Margin=\\\"5 0 0 0\\\" Content=\\\"Search\\\" \\n                Command=\\\"{Binding SearchSymbolCommand}\\\" />\\n    </WrapPanel>\\n\\n    <Grid Margin=\\\"0 20 0 0\\\" Grid.Row=\\\"1\\\" MaxWidth=\\\"500\\\">\\n        <Grid.Style>\\n            <Style TargetType=\\\"Grid\\\">\\n                <Style.Triggers>\\n                    <DataTrigger Binding=\\\"{Binding SearchResultSymbol}\\\" Value=\\\"\\\">\\n                        <Setter Property=\\\"Visibility\\\" Value=\\\"Collapsed\\\" />\\n                    </DataTrigger>\\n                </Style.Triggers>\\n            </Style>\\n        </Grid.Style>\\n        <Grid.ColumnDefinitions>\\n            <ColumnDefinition Width=\\\"*\\\" />\\n            <ColumnDefinition Width=\\\"2*\\\" />\\n        </Grid.ColumnDefinitions>\\n        \\n        <Border Grid.Column=\\\"0\\\" BorderBrush=\\\"Gray\\\" BorderThickness=\\\"1\\\" \\n                Padding=\\\"20\\\" CornerRadius=\\\"3 0 0 3\\\">\\n            <StackPanel>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Text=\\\"{Binding SearchResultSymbol}\\\"/>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" Margin=\\\"0 10 0 0\\\" \\n                            Text=\\\"{Binding StockPrice, StringFormat={}{0:C}}\\\" />\\n            </StackPanel>\\n        </Border>\\n        <Border Grid.Column=\\\"1\\\" BorderBrush=\\\"Gray\\\" BorderThickness=\\\"0 1 1 1\\\" \\n                Padding=\\\"20\\\" CornerRadius=\\\"0 3 3 0\\\">\\n            <StackPanel HorizontalAlignment=\\\"Center\\\">\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Shares To buy:\\\" />\\n                    <TextBox Width=\\\"50\\\" Text=\\\"{Binding SharesToBuy, \\n                                               UpdateSourceTrigger=PropertyChanged}\\\" />\\n                </WrapPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Price per share:\\\" />\\n                    <TextBlock Width=\\\"50\\\" Text=\\\"{Binding StockPrice, \\n                                                    StringFormat={}{0:C}}\\\" />\\n                </WrapPanel >\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" FontSize=\\\"32\\\" Margin=\\\"0 10\\\" \\n                            Text=\\\"{Binding TotalPrice, StringFormat={}{0:C}}\\\" />\\n                <Button Margin=\\\"0 10\\\" Padding=\\\"20 5\\\" FontSize=\\\"24\\\" Content=\\\"Buy\\\" \\n                            Command=\\\"{Binding BuyStockCommand}\\\" />\\n            </StackPanel>\\n        </Border>\\n    </Grid>\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Public class public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    private string _searchResultSymbol = string.Empty;\\n    public string SearchResultSymbol\\n    {\\n        get { return _searchResultSymbol; }\\n        set \\n        { \\n            _searchResultSymbol = value; \\n            OnPropertyChanged(nameof(SearchResultSymbol)); \\n        }\\n    }\\n\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set \\n        { \\n            _stockPrice = value; \\n            OnPropertyChanged(nameof(StockPrice));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    private int _sharesToBuy;\\n    public int SharesToBuy\\n    {\\n        get { return _sharesToBuy; }\\n        set \\n        { \\n            _sharesToBuy = value; \\n            OnPropertyChanged(nameof(SharesToBuy));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    public double TotalPrice\\n    {\\n        get { return SharesToBuy * StockPrice; }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n    public ICommand BuyStockCommand { get; set; }\\n\\n    public BuyViewModel(IStockPriceService stockPriceService,\\n        IBuyStockService buyStockService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n        BuyStockCommand = new BuyStockCommand(this, buyStockService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / SearchSymbolCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            double stockPrice = await _stockPriceService.GetPrice(_viewModel.Symbol);\\n            _viewModel.SearchResultSymbol = _viewModel.Symbol.ToUpper();\\n            _viewModel.StockPrice = stockPrice;\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Styles / Common.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<!--Text Boxes-->\\n<Style TargetType=\\\"TextBox\\\">\\n    <Setter Property=\\\"VerticalContentAlignment\\\" Value=\\\"Center\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"TextBox\\\">\\n                <Border BorderThickness=\\\"1\\\" BorderBrush=\\\"Gray\\\" CornerRadius=\\\"3\\\">\\n                    <ScrollViewer x:Name=\\\"PART_ContentHost\\\" />\\n                </Border>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n</Style>\\n\\n<!-- Button -->\\n<Style TargetType=\\\"Button\\\">\\n    <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary2}\\\" />\\n    <Setter Property=\\\"Foreground\\\" Value=\\\"White\\\" />\\n    <Setter Property=\\\"Cursor\\\" Value=\\\"Hand\\\" />\\n    <Setter Property=\\\"Padding\\\" Value=\\\"10 5\\\" />\\n    <Setter Property=\\\"HorizontalAlignment\\\" Value=\\\"Center\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"Button\\\">\\n                <Border CornerRadius=\\\"3\\\" \\n                        Background=\\\"{TemplateBinding Background}\\\"\\n                        Padding=\\\"{TemplateBinding Padding}\\\"\\n                        Margin=\\\"{TemplateBinding Margin}\\\">\\n                    <!--We can use ContentPresenter on Buttons and not TextBoxes \\n                        because Buttons are derived from ContentControl-->\\n                    <ContentPresenter />\\n                </Border>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n    <Style.Triggers>\\n        <Trigger Property=\\\"IsMouseOver\\\" Value=\\\"True\\\">\\n            <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary1}\\\" />\\n        </Trigger>\\n    </Style.Triggers>\\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / MainWindow.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n    \\n    <controls:NavigationBar Grid.Row=\\\"0\\\" DataContext=\\\"{Binding Navigator}\\\" />\\n    <ScrollViewer Grid.Row=\\\"1\\\" VerticalScrollBarVisibility=\\\"Auto\\\" \\n                  HorizontalScrollBarVisibility=\\\"Disabled\\\">\\n        <ContentControl Content=\\\"{Binding Navigator.CurrentViewModel}\\\" />\\n    </ScrollViewer>\\n</Grid>\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}