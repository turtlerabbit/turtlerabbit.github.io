{"componentChunkName":"component---src-templates-archive-post-js","path":"/fullStackWPF/Dynamic-Views-and-Custom-Element-Styles-11/","result":{"data":{"mdx":{"id":"3a19a179-f5b7-5fbf-a5b5-2b1982c395d5","excerpt":"주식 매입에 사용되는 BuyView의 기능, 스타일, 레이아웃을 개선한다. 뷰의 기능을 개선하기 위해 BuyViewModel에서 일부 속성 바인딩을 수정하고 BuyView에서 DataTrigger를 만들어 주식이 검색 될 때까지 검색결과패널을 숨긴다. 또한 TextBox 및 Button…","frontmatter":{"title":"FULL STACK WFP 11 - Dynamic Views and Custom Element Styles","date":"May 12, 2021","tag":"WPF, FullStack, Dynamic Views, Custom Element Styles"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 11 - Dynamic Views and Custom Element Styles\",\n  \"date\": \"2021-05-12 11\",\n  \"tag\": \"WPF, FullStack, Dynamic Views, Custom Element Styles\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uC8FC\\uC2DD \\uB9E4\\uC785\\uC5D0 \\uC0AC\\uC6A9\\uB418\\uB294 BuyView\\uC758 \\uAE30\\uB2A5, \\uC2A4\\uD0C0\\uC77C, \\uB808\\uC774\\uC544\\uC6C3\\uC744 \\uAC1C\\uC120\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uBDF0\\uC758 \\uAE30\\uB2A5\\uC744 \\uAC1C\\uC120\\uD558\\uAE30 \\uC704\\uD574 BuyViewModel\\uC5D0\\uC11C \\uC77C\\uBD80 \\uC18D\\uC131 \\uBC14\\uC778\\uB529\\uC744 \\uC218\\uC815\\uD558\\uACE0 BuyView\\uC5D0\\uC11C DataTrigger\\uB97C \\uB9CC\\uB4E4\\uC5B4 \\uC8FC\\uC2DD\\uC774 \\uAC80\\uC0C9 \\uB420 \\uB54C\\uAE4C\\uC9C0 \\uAC80\\uC0C9\\uACB0\\uACFC\\uD328\\uB110\\uC744 \\uC228\\uAE34\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C TextBox \\uBC0F Button \\uCEE8\\uD2B8\\uB864\\uC5D0 \\uB300\\uD55C \\uC0AC\\uC6A9\\uC790 \\uC9C0\\uC815 \\uC694\\uC18C \\uC2A4\\uD0C0\\uC77C\\uC744 \\uCD94\\uAC00\\uD558\\uC5EC View\\uC758 \\uC2A4\\uD0C0\\uC77C\\uC744 \\uAC1C\\uC120\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C8\\uC9C0\\uB9C9\\uC73C\\uB85C \\uAC01 \\uD558\\uC704 \\uD328\\uB110\\uC758 \\uD06C\\uAE30\\uB97C \\uAC1C\\uC120\\uD558\\uAE30 \\uC704\\uD574 \\uD328\\uB110 \\uB808\\uC774\\uC544\\uC6C3\\uC744 WrapPanel\\uC5D0\\uC11C \\u2019*\\u2019 \\uB108\\uBE44\\uAC00 \\uC788\\uB294 \\uADF8\\uB9AC\\uB4DC\\uB85C \\uBCC0\\uD658\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Improve the functionality, style, and layout of the BuyView, which is used to purchase stocks.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid Margin=\\\"20\\\">\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Width=\\\"100\\\" Text=\\\"{Binding Symbol, \\n                                    UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Margin=\\\"5 0 0 0\\\" Content=\\\"Search\\\" \\n                Command=\\\"{Binding SearchSymbolCommand}\\\" />\\n    </WrapPanel>\\n\\n    <Grid Margin=\\\"0 20 0 0\\\" Grid.Row=\\\"1\\\" MaxWidth=\\\"500\\\">\\n        <Grid.Style>\\n            <Style TargetType=\\\"Grid\\\">\\n                <Style.Triggers>\\n                    <DataTrigger Binding=\\\"{Binding SearchResultSymbol}\\\" Value=\\\"\\\">\\n                        <Setter Property=\\\"Visibility\\\" Value=\\\"Collapsed\\\" />\\n                    </DataTrigger>\\n                </Style.Triggers>\\n            </Style>\\n        </Grid.Style>\\n        <Grid.ColumnDefinitions>\\n            <ColumnDefinition Width=\\\"*\\\" />\\n            <ColumnDefinition Width=\\\"2*\\\" />\\n        </Grid.ColumnDefinitions>\\n        \\n        <Border Grid.Column=\\\"0\\\" BorderBrush=\\\"Gray\\\" BorderThickness=\\\"1\\\" \\n                Padding=\\\"20\\\" CornerRadius=\\\"3 0 0 3\\\">\\n            <StackPanel>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Text=\\\"{Binding SearchResultSymbol}\\\"/>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" Margin=\\\"0 10 0 0\\\" \\n                            Text=\\\"{Binding StockPrice, StringFormat={}{0:C}}\\\" />\\n            </StackPanel>\\n        </Border>\\n        <Border Grid.Column=\\\"1\\\" BorderBrush=\\\"Gray\\\" BorderThickness=\\\"0 1 1 1\\\" \\n                Padding=\\\"20\\\" CornerRadius=\\\"0 3 3 0\\\">\\n            <StackPanel HorizontalAlignment=\\\"Center\\\">\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Shares To buy:\\\" />\\n                    <TextBox Width=\\\"50\\\" Text=\\\"{Binding SharesToBuy, \\n                                               UpdateSourceTrigger=PropertyChanged}\\\" />\\n                </WrapPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Price per share:\\\" />\\n                    <TextBlock Width=\\\"50\\\" Text=\\\"{Binding StockPrice, \\n                                                    StringFormat={}{0:C}}\\\" />\\n                </WrapPanel >\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" FontSize=\\\"32\\\" Margin=\\\"0 10\\\" \\n                            Text=\\\"{Binding TotalPrice, StringFormat={}{0:C}}\\\" />\\n                <Button Margin=\\\"0 10\\\" Padding=\\\"20 5\\\" FontSize=\\\"24\\\" Content=\\\"Buy\\\" \\n                            Command=\\\"{Binding BuyStockCommand}\\\" />\\n            </StackPanel>\\n        </Border>\\n    </Grid>\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Public class public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    private string _searchResultSymbol = string.Empty;\\n    public string SearchResultSymbol\\n    {\\n        get { return _searchResultSymbol; }\\n        set \\n        { \\n            _searchResultSymbol = value; \\n            OnPropertyChanged(nameof(SearchResultSymbol)); \\n        }\\n    }\\n\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set \\n        { \\n            _stockPrice = value; \\n            OnPropertyChanged(nameof(StockPrice));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    private int _sharesToBuy;\\n    public int SharesToBuy\\n    {\\n        get { return _sharesToBuy; }\\n        set \\n        { \\n            _sharesToBuy = value; \\n            OnPropertyChanged(nameof(SharesToBuy));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    public double TotalPrice\\n    {\\n        get { return SharesToBuy * StockPrice; }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n    public ICommand BuyStockCommand { get; set; }\\n\\n    public BuyViewModel(IStockPriceService stockPriceService,\\n        IBuyStockService buyStockService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n        BuyStockCommand = new BuyStockCommand(this, buyStockService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / SearchSymbolCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            double stockPrice = await _stockPriceService.GetPrice(_viewModel.Symbol);\\n            _viewModel.SearchResultSymbol = _viewModel.Symbol.ToUpper();\\n            _viewModel.StockPrice = stockPrice;\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Styles / Common.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<!--Text Boxes-->\\n<Style TargetType=\\\"TextBox\\\">\\n    <Setter Property=\\\"VerticalContentAlignment\\\" Value=\\\"Center\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"TextBox\\\">\\n                <Border BorderThickness=\\\"1\\\" BorderBrush=\\\"Gray\\\" CornerRadius=\\\"3\\\">\\n                    <ScrollViewer x:Name=\\\"PART_ContentHost\\\" />\\n                </Border>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n</Style>\\n\\n<!-- Button -->\\n<Style TargetType=\\\"Button\\\">\\n    <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary2}\\\" />\\n    <Setter Property=\\\"Foreground\\\" Value=\\\"White\\\" />\\n    <Setter Property=\\\"Cursor\\\" Value=\\\"Hand\\\" />\\n    <Setter Property=\\\"Padding\\\" Value=\\\"10 5\\\" />\\n    <Setter Property=\\\"HorizontalAlignment\\\" Value=\\\"Center\\\" />\\n    <Setter Property=\\\"Template\\\">\\n        <Setter.Value>\\n            <ControlTemplate TargetType=\\\"Button\\\">\\n                <Border CornerRadius=\\\"3\\\" \\n                        Background=\\\"{TemplateBinding Background}\\\"\\n                        Padding=\\\"{TemplateBinding Padding}\\\"\\n                        Margin=\\\"{TemplateBinding Margin}\\\">\\n                    <!--We can use ContentPresenter on Buttons and not TextBoxes \\n                        because Buttons are derived from ContentControl-->\\n                    <ContentPresenter />\\n                </Border>\\n            </ControlTemplate>\\n        </Setter.Value>\\n    </Setter>\\n    <Style.Triggers>\\n        <Trigger Property=\\\"IsMouseOver\\\" Value=\\\"True\\\">\\n            <Setter Property=\\\"Background\\\" Value=\\\"{StaticResource BrushPrimary1}\\\" />\\n        </Trigger>\\n    </Style.Triggers>\\n</Style>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / MainWindow.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n    \\n    <controls:NavigationBar Grid.Row=\\\"0\\\" DataContext=\\\"{Binding Navigator}\\\" />\\n    <ScrollViewer Grid.Row=\\\"1\\\" VerticalScrollBarVisibility=\\\"Auto\\\" \\n                  HorizontalScrollBarVisibility=\\\"Disabled\\\">\\n        <ContentControl Content=\\\"{Binding Navigator.CurrentViewModel}\\\" />\\n    </ScrollViewer>\\n</Grid>\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/fullStackWPF/Dynamic-Views-and-Custom-Element-Styles-11/","previous":{"id":"4442859d-ef21-579e-93b5-46650e251023","fields":{"slug":"/fullStackWPF/Creating-the-ViewModel-and-View-for-Buying-Stocks-10/"},"frontmatter":{"title":"FULL STACK WFP 10 - Creating the ViewModel and View for Buying Stocks"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 10 - Creating the ViewModel and View for Buying Stocks\",\n  \"date\": \"2021-05-12 10\",\n  \"tag\": \"WPF, FullStack, State\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"\\uC2DC\\uB9AC\\uC988\\uC758 \\uC55E\\uBD80\\uBD84\\uC5D0 \\uC788\\uB294 BuyStockService\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC BuyViewModel \\uBC0F BuyView\\uB97C \\uB9CC\\uB4E0\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"BuyViewModel\\uC740 \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uC804\\uCCB4\\uC5D0\\uC11C \\uC0C1\\uD0DC\\uAC00 \\uC720\\uC9C0\\uB418\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uB2E4\\uB978 \\uBDF0 \\uBAA8\\uB378\\uACFC \\uB2E4\\uB974\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"BuyViewModel \\uBC0F BuyView\\uC5D0 \\uAE30\\uBCF8 \\uAE30\\uB2A5\\uC744 \\uCD94\\uAC00\\uD588\\uC9C0\\uB9CC \\uBDF0 \\uBAA8\\uB378\\uC5D0\\uB294 stock \\uC815\\uBCF4\\uB97C \\uC5BB\\uAE30\\uC704\\uD55C \\uC0C8\\uB85C\\uC6B4 \\uC11C\\uBE44\\uC2A4\\uAC00 \\uD544\\uC694\\uD558\\uBA70 \\uBDF0\\uB97C \\uAC1C\\uC120\\uD574\\uC57C\\uD55C\\uB2E4.\"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. Create the BuyViewModel and BuyView\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <TextBlock Text=\\\"Buy Stocks\\\" />\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<ResourceDictionary>\\n        ...\\n\\n        <DataTemplate DataType=\\\"{x:Type viewmodels:BuyViewModel}\\\">\\n            <views:BuyView />\\n        </DataTemplate>\\n    </ResourceDictionary>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"switch (viewType)\\n{\\n    case ViewType.Home:\\n        return _homeViewModelFactory.CreateViewModel();\\n    case ViewType.Portfolio:\\n        return _portfolioViewModelFactory.CreateViewModel();\\n        // \\uCD94\\uAC00\\n    case ViewType.Buy:\\n        return new BuyViewModel();\\n    ...\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / State / Navigators / INavigator.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public enum ViewType\\n{\\n    Home,\\n    Portfolio,\\n    Buy\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Controls / NavigationBar.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\n<RadioButton Grid.Column=\\\"2\\\" Content=\\\"Buy\\\"\\n            Command=\\\"{Binding UpdateCurrentViewModelCommand}\\\"\\n            IsChecked=\\\"{Binding CurrentViewModel, Mode=OneWay,\\n                        Converter={StaticResource EqualValueToParameterConverter},\\n                        ConverterParameter={x:Type vm:BuyViewModel}}\\\"\\n            CommandParameter=\\\"{x:Static nav:ViewType.Buy}\\\" />\\n<RadioButton Grid.Column=\\\"3\\\" Content=\\\"Sell\\\" />\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"2. BuyViewModel\\u2019s state is persisted throughout the application\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"BuyViewModel\\uC740 \\uBAA8\\uB4E0 \\uC815\\uBCF4\\uB97C \\uC783\\uC5B4 \\uBC84\\uB9B4 \\uD544\\uC694\\uAC00 \\uC5C6\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C \\uBAA8\\uB4E0 \\uC0C1\\uD0DC\\uB97C \\uC720\\uC9C0 \\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB2E4\\uB978 view\\uC5D0\\uC11C \\uC804\\uD658\\uD574\\uC11C \\uB2E4\\uC2DC \\uB3CC\\uC544 \\uC654\\uC744 \\uB54C BuyViewModel\\uC740 \\uBAA8\\uB4E0 \\uAC83\\uC774 \\uC5EC\\uC804\\uD788 \\uC874\\uC7AC\\uD558\\uBBC0\\uB85C \\uC2E4\\uC81C\\uB85C\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"factory\\uB97C \\uB9CC\\uB4E4\\uC9C0 \\uC54A\\uACE0 \\uC2E4\\uC81C\\uB85C \\uC0DD\\uC131\\uC790(constructor)\\uB97C \\uD1B5\\uD574 \\uBDF0 \\uBAA8\\uB378\\uC744 \\uC804\\uB2EC\\uD558\\uACE0 \\uC774 \\uBDF0 \\uBAA8\\uB378\\uC740 \\uC0C8 \\uC0C1\\uD0DC\\uB97C \\uB9CC\\uB4E4\\uC9C0 \\uC54A\\uC744 \\uBAA8\\uB4E0 \\uC0C1\\uD0DC\\uB97C \\uC720\\uC9C0\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"BuyViewModel\\uC740 \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uAE30\\uAC04 \\uB3D9\\uC548 \\uB3D9\\uC77C\\uD55C \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uB420 \\uAC83\\uC774\\uB2E4.\\n\\uADF8\\uB798\\uC11C \\uD574\\uC57C \\uD560 \\uC77C\\uC740 \\uC885\\uC18D\\uC131 \\uC8FC\\uC785 \\uCEE8\\uD14C\\uC774\\uB108\\uC5D0 \\uBAA8\\uB378\\uC744 \\uB4F1\\uB85D\\uD574\\uC57C\\uD55C\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / SimpleTraderViewModelAbstractFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"switch (viewType)\\n{\\n    case ViewType.Home:\\n        return _homeViewModelFactory.CreateViewModel();\\n    case ViewType.Portfolio:\\n        return _portfolioViewModelFactory.CreateViewModel();\\n        // \\uCD94\\uAC00\\n    case ViewType.Buy:\\n        return _buyViewModel;\\n    ...\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\nservices.AddScoped<INavigator, Navigator>();\\nservices.AddScoped<MainViewModel>();\\n// \\uCD94\\uAC00\\nservices.AddScoped<BuyViewModel>();\\n...\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / Factories / RootSimpleTraderViewModelFactory.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// \\uD30C\\uC77C\\uBA85 \\uBCC0\\uACBD : RootSimpleTraderViewModelFactory : IRootSimpleTraderViewModelFactory\\n\\npublic class RootSimpleTraderViewModelFactory : IRootSimpleTraderViewModelFactory\\n{\\n    private readonly ISimpleTraderViewModelFactory<HomeViewModel> \\n        _homeViewModelFactory;\\n    private readonly ISimpleTraderViewModelFactory<PortfolioViewModel> \\n        _portfolioViewModelFactory;\\n    private readonly BuyViewModel _buyViewModel;\\n\\n    public RootSimpleTraderViewModelFactory(\\n        ISimpleTraderViewModelFactory<HomeViewModel> homeViewModelFactory, \\n        ISimpleTraderViewModelFactory<PortfolioViewModel> portfolioViewModelFactory,\\n        BuyViewModel buyViewModel)\\n    {\\n        _homeViewModelFactory = homeViewModelFactory;\\n        _portfolioViewModelFactory = portfolioViewModelFactory;\\n        _buyViewModel = buyViewModel;\\n    }\\n\\n    public ViewModelBase CreateViewModel(ViewType viewType)\\n    {\\n        switch (viewType)\\n        {\\n            case ViewType.Home:\\n                return _homeViewModelFactory.CreateViewModel();\\n            case ViewType.Portfolio:\\n                return _portfolioViewModelFactory.CreateViewModel();\\n            case ViewType.Buy:\\n                return _buyViewModel;\\n            default:\\n                throw new ArgumentException(\\\"\\n                    The ViewType does not have a ViewModel.\\\", \\\"viewType\\\");\\n        }\\n    }\\n\")))), mdx(\"h1\", null), mdx(\"h3\", null, \"3. Add basic functionality to the BuyViewModel and BuyView\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Text=\\\"\\\" /> // BuyViewModel\\uC758 Symbol\\n        <Button Content=\\\"Search\\\" Command=\\\"\\\" />\\n    </WrapPanel>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Text=\\\"{Binding Symbol, UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Content=\\\"Search\\\" Command=\\\"SearchSymbolCommand\\\" /> \\n    </WrapPanel>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }  // \\uCD94\\uAC00\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / SearchSymbolCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class SearchSymbolCommand : ICommand\\n{\\n    private readonly BuyViewModel _viewModel;\\n    private readonly IStockPriceService _stockPriceService;\\n\\n    public event EventHandler CanExecuteChanged;\\n\\n    public SearchSymbolCommand(BuyViewModel viewModel, \\n        IStockPriceService stockPriceService)\\n    {\\n        _viewModel = viewModel;\\n        _stockPriceService = stockPriceService;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            double stockPrice = await _stockPriceService.GetPrice(_viewModel.Symbol);\\n            // so the command basically talks back and\\n            // forth between the view model\\n            _viewModel.StockPrice = stockPrice;  // BuyViewModel \\uCD94\\uAC00\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    // \\uCD94\\uAC00\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set { _stockPrice = value; OnPropertyChanged(nameof(StockPrice)); }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    // \\uCD94\\uAC00\\n    private double _stockPrice;\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set { _stockPrice = value; OnPropertyChanged(nameof(StockPrice)); }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; } \\n\\n    public BuyViewModel(IStockPriceService stockPriceService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Views / BuyView.xaml\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Grid Margin=\\\"20\\\"  HorizontalAlignment=\\\"Center\\\">\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\\\"auto\\\" />\\n        <RowDefinition Height=\\\"*\\\" />\\n    </Grid.RowDefinitions>\\n\\n    <WrapPanel Grid.Row=\\\"0\\\" HorizontalAlignment=\\\"Center\\\">\\n        <TextBox Width=\\\"100\\\" Text=\\\"{Binding Symbol, \\n                UpdateSourceTrigger=PropertyChanged}\\\" />\\n        <Button Margin=\\\"10 0 0 0\\\" Content=\\\"Search\\\" \\n                Command=\\\"{Binding SearchSymbolCommand}\\\" />\\n    </WrapPanel>\\n\\n    <WrapPanel Margin=\\\"0 10 0 0\\\" Grid.Row=\\\"1\\\">\\n        <Border BorderBrush=\\\"Black\\\" BorderThickness=\\\"1\\\" Padding=\\\"20\\\">\\n            <StackPanel>\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Text=\\\"{Binding Symbol}\\\"/>\\n                <TextBlock Margin=\\\"0 10 0 0\\\" \\n                            Text=\\\"{Binding StockPrice, StringFormat={}{0:C}}\\\" />\\n            </StackPanel>\\n        </Border>\\n        <Border BorderBrush=\\\"Black\\\" BorderThickness=\\\"1\\\" Padding=\\\"20\\\">\\n            <StackPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Shares To buy:\\\" />\\n                    <TextBox Width=\\\"50\\\" \\n                                Text=\\\"{Binding SharesToBuy, \\n                                        UpdateSourceTrigger=PropertyChanged}\\\" />\\n                </WrapPanel>\\n                <WrapPanel Margin=\\\"0 10\\\">\\n                    <TextBlock Width=\\\"150\\\" Text=\\\"Price per share:\\\" />\\n                    <TextBox Width=\\\"50\\\" \\n                                Text=\\\"{Binding StockPrice, \\n                                    StringFormat={}{0:C}}\\\" />\\n                </WrapPanel >\\n                <TextBlock HorizontalAlignment=\\\"Center\\\" \\n                            FontSize=\\\"32\\\" Margin=\\\"0 10\\\" \\n                            Text=\\\"{Binding TotalPrice, StringFormat={}{0:C}}\\\" />\\n                <Button Margin=\\\"0 10\\\" Content=\\\"Buy\\\" \\n                        Command=\\\"{Binding BuyStockCommand}\\\" />\\n            </StackPanel>\\n        </Border>\\n    </WrapPanel>\\n</Grid>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / ViewModels / BuyViewModel.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class BuyViewModel : ViewModelBase\\n{\\n    private string _Symbol;\\n\\n    public string Symbol\\n    {\\n        get { return _Symbol; }\\n        set { _Symbol = value; OnPropertyChanged(nameof(Symbol)); }\\n    }\\n\\n    private double _stockPrice;\\n\\n    public double StockPrice\\n    {\\n        get { return _stockPrice; }\\n        set { _stockPrice = value; OnPropertyChanged(nameof(StockPrice)); }\\n    }\\n\\n    private int _sharesToBuy;\\n\\n    public int SharesToBuy\\n    {\\n        get { return _sharesToBuy; }\\n        set \\n        { \\n            _sharesToBuy = value; \\n            OnPropertyChanged(nameof(SharesToBuy));\\n            OnPropertyChanged(nameof(TotalPrice));\\n        }\\n    }\\n\\n    public double TotalPrice\\n    {\\n        get\\n        {\\n            return SharesToBuy * StockPrice;\\n        }\\n    }\\n\\n    public ICommand SearchSymbolCommand { get; set; }\\n    public ICommand BuyStockCommand { get; set; }\\n\\n    public BuyViewModel(IStockPriceService stockPriceService,\\n        IBuyStockService buyStockService)\\n    {\\n        SearchSymbolCommand = new SearchSymbolCommand(this, stockPriceService);\\n        BuyStockCommand = new BuyStockCommand(this, buyStockService);\\n    }\\n\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / Commands / BuyStockCommand.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public event EventHandler CanExecuteChanged;\\n\\n    private BuyViewModel _buyViewModel;\\n    private IBuyStockService _buyStockService;\\n\\n    public BuyStockCommand(BuyViewModel buyViewModel, IBuyStockService buyStockService)\\n    {\\n        _buyViewModel = buyViewModel;\\n        _buyStockService = buyStockService;\\n    }\\n\\n    public bool CanExecute(object parameter)\\n    {\\n        return true;\\n    }\\n\\n    public async void Execute(object parameter)\\n    {\\n        try\\n        {\\n            // in the future, we'll easily have an Account to sue here\\n            Account account = await _buyStockService.BuyStock(new Account()\\n            {\\n                Id = 1,\\n                Balance = 500,\\n                AssetTransactions = new List<AssetTransaction>()\\n            }, _buyViewModel.Symbol, _buyViewModel.SharesToBuy);\\n        }\\n        catch (Exception e)\\n        {\\n            MessageBox.Show(e.Message);\\n        }\\n    }\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"8055bc63-a257-5da4-9d97-ba56e571aa32","fields":{"slug":"/fullStackWPF/User-Authentication-Login-Registration-Service-12/"},"frontmatter":{"title":"FULL STACK WFP 12 - User Authentication (Login/Registration) Service"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FULL STACK WFP 12 - User Authentication (Login/Registration) Service\",\n  \"date\": \"2021-05-12 12\",\n  \"tag\": \"WPF, FullStack, Login, Registration, User Authentication\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"SimpleTrader\\uC5D0 \\uB300\\uD55C \\uC778\\uC99D \\uC11C\\uBE44\\uC2A4\\uB97C \\uC124\\uC815\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC774 \\uC11C\\uBE44\\uC2A4\\uB97C \\uD1B5\\uD574 \\uC0AC\\uC6A9\\uC790\\uB294 \\uACC4\\uC815\\uC744 \\uB4F1\\uB85D\\uD558\\uACE0 \\uACC4\\uC815\\uC5D0 \\uB85C\\uADF8\\uC778 \\uD560 \\uC218 \\uC788\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB610\\uD55C \\uC778\\uC99D \\uC11C\\uBE44\\uC2A4\\uC5D0\\uC11C \\uC774\\uBA54\\uC77C \\uBC0F \\uC0AC\\uC6A9\\uC790 \\uC774\\uB984\\uC73C\\uB85C \\uACC4\\uC815\\uC744 \\uD6A8\\uC728\\uC801\\uC73C\\uB85C \\uAC00\\uC838\\uC62C \\uC218 \\uC788\\uB3C4\\uB85D \\uACC4\\uC815\\uC5D0 \\uB300\\uD55C IDataService\\uB97C IAccountService\\uB85C \\uD655\\uC7A5\\uD55C\\uB2E4. \"), mdx(\"h1\", null), mdx(\"h3\", null, \"1. setup an authentication service for SimpleTrader.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Models / User.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class User : DomainObject\\n{\\n    public string Email { get; set; }\\n    public string Username { get; set; }\\n    public string PasswordHash { get; set; }  // \\uC218\\uC815\\n    public DateTime DatedJoined { get; set; }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Package Manager Console\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Password => PasswordHash\\n\\nPM> add-migration password_hash\\nPM> update-datebase\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / AuthenticationServices / IAuthenticationService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public enum RegistrationResult\\n{\\n    Success,\\n    PasswordsDoNotMatch,\\n    EmailAlreadyExists,\\n    UsernameAlreadyExists\\n}\\n\\npublic interface IAuthenticationService\\n{        \\n    Task<RegistrationResult> Register(string email, \\n                string username, string password, string confirmPasswrod);\\n    Task<Account> Login(string username, string password);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services / AuthenticationServices / AuthenticationService.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class AuthenticationService : IAuthenticationService\\n{\\n    private readonly IAccountService _accountService;\\n\\n    // using Microsoft.AspNet.Identity;\\n    private readonly IPasswordHasher _passwordHasher;\\n\\n    public AuthenticationService(IAccountService accountService, \\n                IPasswordHasher passwordHasher)\\n    {\\n        _accountService = accountService;\\n        _passwordHasher = passwordHasher;\\n    }\\n\\n    public async Task<Account> Login(string username, string password)\\n    {\\n        // 1. Get the user's account from the database\\n        // 2. Hash the password provided in the method\\n        // 3. Campare the hashed provided password to the database hasehd password\\n\\n        Account storedAccount = await _accountService.GetByUsername(username);\\n\\n        PasswordVerificationResult passwordResult = _passwordHasher\\n            .VerifyHashedPassword(storedAccount.AccountHolder.PasswordHash, password);\\n\\n        if (passwordResult != PasswordVerificationResult.Success)\\n        {\\n            throw new InvalidPasswordException(username, password);\\n        }\\n\\n        return storedAccount;\\n    }\\n\\n    public async Task<RegistrationResult> Register(string email, \\n                string username, string password, string confirmPasswrod)\\n    {\\n        RegistrationResult result = RegistrationResult.Success;\\n\\n        if (password != confirmPasswrod)\\n        {\\n            result = RegistrationResult.PasswordsDoNotMatch;\\n        }\\n\\n        Account emailAccount = await _accountService.GetByEmail(email);\\n        if (emailAccount != null)\\n        {\\n            result = RegistrationResult.EmailAlreadyExists;\\n        }\\n\\n        Account usernameAccount = await _accountService.GetByUsername(username);\\n        if (usernameAccount != null)\\n        {\\n            result = RegistrationResult.UsernameAlreadyExists;\\n        }\\n\\n        if (result == RegistrationResult.Success)\\n        {\\n            string hashedPassword = _passwordHasher.HashPassword(password);\\n\\n            User user = new User()\\n            {\\n                Email = email,\\n                Username = username,\\n                PasswordHash = hashedPassword,\\n                DatedJoined = DateTime.Now\\n            };\\n\\n            Account account = new Account()\\n            {\\n                AccountHolder = user\\n            };\\n\\n            await _accountService.Create(account);\\n        }\\n       \\n        return result;\\n    }\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Services /\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public interface IAccountService : IDataService<Account>\\n{\\n    Task<Account> GetByUsername(string username);\\n    Task<Account> GetByEmail(string email);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.WPF / App.xaml.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\nservices.AddSingleton<SimpleTraderDbContextFactory>();\\nservices.AddSingleton<IAuthenticationService, AuthenticationService>();   // \\uCD94\\uAC00\\nservices.AddSingleton<IDataService<Account>, AccountDataService>();\\nservices.AddSingleton<IAccountService, AccountDataService>();      // \\uCD94\\uAC00\\nservices.AddSingleton<IStockPriceService, StockPriceService>();\\nservices.AddSingleton<IBuyStockService, BuyStockService>();\\nservices.AddSingleton<IMajorIndexService, MajorIndexService>();\\n\\nservices.AddSingleton<IPasswordHasher, PasswordHasher>();   // \\uCD94\\uAC00\\n...\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SimpleTrader.Domain / Exceptions / InvalidPasswordException.cs\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"public class InvalidPasswordException : Exception\\n{\\n    public string Username { get; set; }\\n    public string Password { get; set; }\\n\\n    public InvalidPasswordException(string username, string password)\\n    {\\n        Username = username;\\n        Password = password;\\n    }\\n\\n    public InvalidPasswordException(string message, \\n            string username, string password) : base(message)\\n    {\\n        Username = username;\\n        Password = password;\\n    }\\n\\n    public InvalidPasswordException(string message, \\n            Exception innerException, string username, string password) : \\n                base(message, innerException)\\n    {\\n        Username = username;\\n        Password = password;\\n    }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":[]}